GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 23:47:32 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1   
      ----------------------------------------------------
       Static Capacity Planning model
      ----------------------------------------------------
        A deterministic static (aka single period) electricity generation capacity planning
        model with discrete or continuous build decisions.
       
       Command Line Options (defaults shown):
       ======================================
       Data
        Primary data setup file:
         --sys=test_sys.inc     System parameters include file. This file references all data for a model
                                run. Typically single value data such as: cost of carbon, WACC, etc. are
                                included directly, while larger tables are in separate sub-include files.
                                The standard sub-include files are:
                                    fuel.inc      Fuel names, prices, and emissions
                                    gens.inc      Generator set, operating parameters, and availability
                                    demand.inc    Demand block set, duration, and power levels
       
        Files used to override values set or referenced in sys and sub-includes (assumed to to be
        located in data_dir, except as noted):
         --fuel=(from sys)     Fuel prices and emissions
         --gens=(from sys)     Generation set & tables of parameters & availability/renewable output.
         --gparams=(OPTIONAL from sys)    Default generator parameters to use for any missing values.
         --avail=(from sys)    Generation availability/renewable output
         --demand=(from sys)   Demand include file that defines demand blocks, levels, and duration
         --update=NONE         An optional final include file to override selected settings from other
                                include files. Does not override any explicit command-line values. The
                                path for update file is relative to the model (not data_dir). 
                                IMPORTANT: the update file works in S space, so most parameters must 
                                be indexed by S and you must use the scenario dependent 
                                parameters: pFuel, pDemand, pGen, and pGenAvail. Changes to the 
                                p*Data parameters (pGenData, pDemandData, etc) will NOT be used.
         --scen=NONE           For multiple scenario problems (multi-period or stochastic) specifies
                                the list of scenarios (populates the S set) and their associated
                                weight/probability table, pScenWeight(S).
       
       
        Specific Value Overrides (take precedence over all values defined in data files. Use for
        sensitivity analysis, etc.) IMPORTANT, these values are used for ALL scenarios, use an update
        for changing these on a by scenario basis.
         --co2cost=#            Cost of CO2 in $/t-co2e (default: use sys or update value)
         --demscale=#           Factor to uniformly scale demand (default: use sys or update value)
         --rps=#                Renewable Portfolio Standard     (default: use sys or update value)
         --co2cap=#             Carbon Emission Cap (Mt-co2e)         (default: use sys or update value)
       
        Model Setup Flags (by default these are not set. Set to any number, including zero, to enable)
         --obj_var=vTotalCost   Variable to minimize in solution. In scenario mode (stochastic UC, 
                                  multi-period planning, etc.) The weighted sum across scenarios of
                                  this value is used Common options:
                                   vTotalCost  (default) Least cost operations
                                   vCarbonEmissions  Use with no_nse=1 to find minimum possible co2
                                  Technical Note: Any variable indexed by S can be used
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 23:47:32 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


         --startup=(off)        Compute startup costs (also enables unit_commit)   (default: ignore)
         --unit_commit=(off)    Compute unit commitment constraints   (default: ignore)
         --ramp=(off)           Flag to limit inter period ramp rates  (default: ignore)
         --ignore_integer=(off) Flag to ignore integer constraints in new capacity investments,
                                 (eg allow 1MW nuclear plants) and in Unit Commitment if enabled (unit is
                                 either committed or not) (default: use integer constraints)
         --avg_avail=(off)      Flag to use the average rather than time dependent availabilities. Using
                                 averages is OK for thermal units, but highly simplifies time varying
                                 renewables. This simplification is made in the analytic version of the
                                 model, but not generally a good idea for numeric estimates. (default: use
                                 complete time varying information.)
         --ignore_cap_credit=(off) Flag to ignore the distinction between capacity credit and availability
                                 When set, the capacity credit parameter is set equal to the time weighted
                                 average of availability. (default: use cap_credit value from GenParams)
         --uc_ignore_unit_min=(0)   Threshold for unit_min to ignore integer commitment decisions in unit
                                 commitment. Gens with unit_min less than or equal to this value will be
                                 treated as continuous to speed performance
         --uc_int_unit_min=(0)   Threshold for unit_min to ignore INTEGER commitment 
                                  decisions & constraints. Gens with unit_min less than or equal to 
                                  this value will still have commitment variables, but their valid
                                  range is relaxed to be continous. The same equations are used
                                  as for those units with integer constraints.
          --uc_lp=(0)            Ignore integer constraints on all UC variables (& startup/shutdown)
         --adj_rsrv_for_nse=(off)  Adjust reserves for non-served energy. This uses actual power
                        production rather than total desired demand for setting reserve requirements.
                        This distinction is only significant if there is non-served energy. When
                        enabled (old default for SVN=479-480), then non-served energy provides a way
                        to reduce reserve requirements. [Default= use total non-adjusted demand]
         --rsrv=(none)  Specify Type of reserve calculation. Options are:
              =separate  Enforce separate reserve requirements based on "classic" ancillary
                          services plus additions for renewable uncertainty. This includes Reg Up, 
                          Reg Down, Spin Up, & Quick Start
              =flex      Use combined "flexibility" reserves grouped simply into flex up and flex down
              =both      Compute both separate and flexibility reserves
              =(none)    If not set, no reserve limits are computed
        --non_uc_rsrv_up_offline=0   For non-unit commitment generators, the fraction of non-running 
                          generation capacity to use toward UP reserves. This parameter has no
                          effect on UC generators. deJonge assumes 0.6, NETPLAN assumes 1.0, 
                          (default=0). 
        --non_uc_rsrv_down_offline=0 For non-unit commitment generators, the fraction of non-running 
                          generation capacity to use toward DOWN reserves. This parameter has no
                          effect on UC generators. deJonge assumes 0.6, NETPLAN assumes 1.0, 
                          (default=0).
        --no_quick_st=(off)     Flag to zero out quickstart reserve contribution to spinning/flex up 
                                 reserves. Useful when non_uc_rsrv... > 0
         --no_nse=(off)         Don't allow non-served energy
         --force_renewables=(off) Force all renewable output to be used. This is only feasible until
                                 the point where load and op_reserves dictate a max. (until we add storage).
                                 When used with cap_fix, it is a bit more widely useful b/c we can limit
                                 output to the level of demand. (this is NLP when capacity is a decision)
         --fix_cap=(off)        Fix capacity to cap_cur by not allowing additions or retirements
         --max_start=(off)      Enforce maximum number of startups   (default: ignore)
         --force_gen_size=(off) Force all plant sizes to equal the specified value (in GW)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 23:47:32 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


         --min_gen_size=(off)   Force small plant sizes to be larger than specified value (in GW)
         --derate=(off)         Use simple derating of power output, typically for non-reserves
         --from_scratch=(off)   Zero out existing capacity and build new system from scratch
         --no_cap_limit=(off)   Allow unlimited expansion of all generators (useful with from_scratch)
         --basic_pmin=(off)     Enforce non-UC based minimum output levels for each generator type. 
                                This can be useful for baseload plants with simple (non-UC) operations.
         --no_capital=(off)     Ignore capital costs, used for operations models to only compute non
                                 capital costs. Not recommended for planning models. [default: include 
                                 capital costs]
         --renew_lim=(avg)     Technique for limiting renewable expansion:
               =avg   Limit Avg to demand peak: 
                       average power < peak*(1+renew_overbuild) [default]
               =firm  Limit base on firm capacity (typically way to high):
                       cap_credit < peak*(1+plan_margin)*(1+renew_overbuild)
               =rps   Limit expansion to that required to meet the RPS (maybe too low for high rps):
                       rps*(1+renew_overbuild)
               =norm  Treat As Normal Gen (uses general overbuild, not renew_specific): 
                       (1+overbuild)*max(avg < peak*(1+plan), cap_credit < peak(1+plan))
         --overbuild=0.2        Amount (a fraction) over the planning margin to limit the maximum
                                 number of plants for each type. Also used with the heuristic capacity
                                 limit described below.
         --renew_overbuild=0.2  Amount (a fraction) over the peak/rps energy requirements for 
                                 renewables.
         --skip_cap_limit=(off) Do not enforce the heuristic capacity limit equation that can greatly
                                 speed MIP tree searches by ignoring capacity combinations, such as 
                                 maxing out all gens, that exceed the tougher of the planning margin
                                 or operating reserve requirements by more than the overbuild factor.
                                 In rare cases, with few generator types, strange availability patterns,
                                 etc. this heuristic may be overly restrictive.
         --no_loop=(off)       Do not loop around demand periods for inter-period constraints
                                such as ramping, min_up_down. (default= assume looping)
         --maint=(off)         Compute Maintenance schedule (default = use avail data, typically 
                                assumes full availability for thermal plants)
         --maint_lp=(off)      Relax integer constraints on maintenance decisions (default: use integers) 
         --maint_om_fract=0.5   If maintenance planning enabled, the default fraction of total fixed 
                                 O&M costs to divide among the required weeks of maintenance.
         --plan_margin=(off)    Enforce the planning margin. Set to 1 to enable and use the problem
                                 defined pPlanReserve (typically in sys.inc). Alternatively can set
                                 to a value < 1 that then is used for pPlanReserve overriding other 
                                 definitions.
         --plan_margin_penalty=(off) Allow planning margin to be not met and define associated penalty
                                 [$/MW-firm] (default= must meet planning margin)
         --rps_penalty=(off)    Allow planning margin to be not met and define associated penalty
                                 [$/MWh] (default= must meet rps)
         --retire=(0)           Fraction of current capacity to retire. Max capacity is also adjusted
                                 down accordingly (value 0 to 1)
          --derate_to_maint=(off) Override gen datafile derating value and derate based on 
                                  the maintenance value only.
       
        Additional Model Components & Related
         --calc_water=(off)     Compute water use and limits
               Related options (see shared_dir/WaterEquations for complete details)
                 --h2o_limit=(Inf)     System wide maximum water use [Tgal]. Only computed for gens
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 23:47:32 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


                                        with specified water usage (h2o_withdraw_var)
                 --h2o_cost=(0)        System wide water cost [$/kgal]. Only computed for gens
                                        with specified water usage (h2o_withdraw_var)
       
       
        Solver Options
          --debug=(off)           Print out extra material in the *.lst file (timing, variables, equations, etc)
          --max_solve_time=10800  Maximum number of seconds to let the solver run. (Default = 3hrs)
          --mip_gap=0.001        max MIP gap to treat as valid solution
          --par_threads=1         Number of parallel threads to use. Specify 0 to use one thread per core 
                                   (Default = use only 1 thread)
          --par_mode=1            CPLEX parallel mode 1=deterministic & repeatable, 0=automatic,
                                   -1=Opportunistic, but not repeatable (Default = determinstic)
          --lp_method=4           CPLEX code for lp_method to use for pure root node, LP, RMIP, and 
                                   final MIP solve.  Options: 0=automatic, 2=Dual Simplex, 4=barrier,
                                   6=concurrent (a race between dual simplex and barrier in parallel)
                                   (Default = 4, barrier) Use 6 if running in parallel
          --cheat=(off)           use epsilon-optimal branch & bound by removing solutions that are
                                   not "cheat" better than the current best. This can speed up the 
                                   MIP search, but may miss the true optimal solution. Note that this
                                   value is specified in absolute terms of the objective function.
          --rel_cheat=(off)       Similar to cheat, but specified in relative percentage of objective
                                   this works in CPLEX only
          --probe=0               CPLEX code for probing, a technique to more fully examine a MIP 
                                   problem before starting branch-and-cut. Can sometimes dramatically
                                   reduce run times. Options: 0=automatic, 1=limited, 2=more, 3=full,
                                   -1=off. (default = 0, automatic). Probe time also limited to 5min.
          --priority=off          Use branching priorities for Branch & Bound tree, set to anything
                                   other than off to enable.    
       
        File Locations (Note, on Windows & DOS, \'s are used for defaults)
         --data_dir=../data/     Relative path to data file includes
         --out_dir=out/          Relative path to output csv files
         --util_dir=../util/     Relative path to csv printing and other utilities
         --shared_dir=../shared/ Relative path to shared model components
         --out_prefix=SCP_       Prefix for all our our output data files
         
        Output Control Flags (by default these are not set. Set to any number, including zero, to enable)
         --debug=(off)           Print out extra material in the *.lst file (timing, variables, 
                                  equations, etc)
         --debug_avail=(off)    Display full availability table in *.lst file for debugging
         --no_csv=(off)         Flag to suppress creation of csv output files (default: create csv output)
         --summary_only=(off)   Only create output summary data (default: create additional tables)
         --summary_and_power_only=(off)   Create only summary & power table outputs (Default: all files)
         --out_gen_params=(off) Create output file listing generator parameter input data (Default: skip)
         --out_gen_avail=(off)  Create output file listing generator availability input data (Default: skip)
         --memo=(none)          Free-form text field added to the summary table NO COMMAS (Default: none)
         --gdx=(off)            Export the entire solved model to a gdx file in the out_dir (Default: no gdx file)
         --debug_off_maint=(off) Create table of capacity off maintenance
       
       
        Supports:
          - multiple operations model modes:
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 23:47:32 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


              + simple economic dispatch
              + ramp (up & down) constrained economic dispatch
              + integer unit commitment:
                 - minimum output for committed generators
                 - startup costs (optional)
                 - ramp (up & down) constraints (optional)
          - arbitrary number of generation technologies/units with
              + availability factors (separate from capacity credit, see below)
              + maximum installed capacity by unit
              + minimum power for baseload units
              + existing installed capacity, with ability to not fully use
              + discrete plant sizes (can ignore)
              + technology specific operating reserve capabilities
          - features designed explicitly for proper wind support:
              + RPS (minimum wind energy penetration %)
              + Non-unity capacity credits (how much does each generator help the peak?)
              + time varying wind availability/output
          - (optional) endogenous operating reserves during each time block (hourly for 8760) including:
              + Spinning Reserves
              + Quick Start Reserves (effectively non-spin)
              + Regulation Up & Down
          - planning reserves (during peak block only)
          - arbitrary number of demand blocks of varying duration
          - heat rates + separate fuel costs for easy scenario analysis
          - carbon intensity
             + imbedded carbon from construction
             + carbon content of fuels
          - carbon constraint (carbon cap)
          - carbon tax
          - non-served energy
          - ability to mothball plants to save fixed O&M costs (still pay capital costs)
       
      Outputs
          - Summary, Power, Commitment, New capacity, #startups, emissions, wind shedding, cost breakdown.
       
       
      Additional Features:
          - loading of data from include files to allow an unchanging core model.
              - These file names can be optionally specified at the command line.
          - A final, optional "update" file to allow for adjusting parameters for easy sensitivity
            analysis or to change the values for a model run without changing the default values
          - internal annualizing of capital costs (requires definition of WACC)
          - ability to scale demand
          - ability to ignore integer constraints
          - automatically estimates max integer # of plants based on gen_size
          - Force wind mode to require using all wind production with no shedding (only valid for small %wind)
       
      Performance enhancements:
          - ignores unit commitment for plants with no/low unit minimum output such as renewables and
            peakers. This threshold is tunable with --unit_min
       
      Assumptions:
          - Ramping and Startup "loop" such that the state at the endo of the year must match the
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 23:47:32 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


            beginning of year. This prevents turning off baseload in anticipation of the "end of the world"
       
       
      ToDo:
          * Decouple ops into blocks for faster UC?
          * Add hydro
          ? compute fixed and var cost by gen
          - compute required market based incentives to achieve same results
          - automatic scaling of demand blocks based on year, baseline, & growth rate
       
        Originally Coded in GAMS by:
         Bryan Palmintier, MIT
         March 2010
       
       Version History
      Ver   Date       Time  Who            What
      ---  ----------  ----- -------------- ---------------------------------
        1  2010-05-20  23:30  bpalmintier   Original version merged: ToyCapPlan v7 + DemoCapPlanWind v4
        2  2010-05-21  04:00  bpalmintier   Expanded & Improved features for MATLAB integration
        3  2010-05-21  10:30  bpalmintier   Added support for lumpy (integer plant) investments
        4  2010-05-21  10:50  bpalmintier   Made existing capacity also pay capital costs (no change to
                                            solution by "grandma's theorem")
        5  2010-07-31  08:40  bpalmintier   Added flag (no_csv) to suppress output of csv files.
        6  2010-08-02  00:40  bpalmintier   Fixed MAJOR bug: derate power output by availability
        7  2010-09-06  22:00  bpalmintier   Added total energy to summary output
        8  2010-09-06  23:45  bpalmintier   - Made include paths platform independent
                                            - Moved data includes to ../data directory
                                            - Fix no_csv default
                                            - explicitly compute total capacity
        9  2010-09-07  20:23  bpalmintier   Separated pGenAvail for time varying availability
       10  2010-09-07  23:00  bpalmintier   Added flag to use averages for availability
       11  2010-09-07  18:30  bpalmintier   Converted to single sys.inc with subincludes. Updated comments
       12  2010-09-08  23:55  bpalmintier   Added ramp_limits (optional) for ramp constrained dispatch
       13  2010-09-09  17:35  bpalmintier   Adjusted solve parameters for more realistic runtimes
       14  2010-09-09  19:35  bpalmintier   Made key solution parameters available on the command line
       15  2010-09-11  20:00  bpalmintier   Minor tweaks and bug fixes:
                                             - loop around for ramp constraints to prevent start from 0
                                             - use RMIP for ignore_integer (also fix related $if bugs)
                                             - renamed --limit_ramps to --ramp
                                             - renamed --mip_tol to --mip_gap
       16  2010-09-17  12:15  bpalmintier   Added option to use avg avail for cap_credit (traditional approach)
       17  2010-10-24  01:00  bpalmintier   Added calculation of energy production mix
       18  2010-10-26  13:00  bpalmintier   Major rework to ignore integer unit commitment for unit_min=0
                                            Result is 10-300x speed up for MIP (startup) solutions!!!
                                            Also:
                                              - improved comments
                                              - Expanded RPS to include a subset based on fuel type (not name)
       19  2010-11-xx         bpalmintier   made unit_min a tunable parameter (default = 0)
       20  2010-11-13  23:00  bpalmintier   Key Update to include both up & down ramping
       21  2010-11-14  10:30  bpalmintier   Additional features:
                                              - debug mode to print more complete *.lst file
                                              - More realistic ramping for unit commitment that considers
                                                the on-line generator fleet rather than the total fleet
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 23:47:32 Page 7
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


       22  2010-11-14  18:30  bpalmintier   Added hourly reserves (finally!) including Spin, QuickStart,
                                             RegUp, and RegDown.
       23  2010-11-14  22:30  bpalmintier   Added non-served energy & some solution helpers
       24  2010-11-15  02:30  bpalmintier   New features:
                                              - Ability to restart from a saved solution (should help initial LP only)
                                              - Command line switches for non-served, op_reserves, etc.
                                              - Reworked equations so unit_commit dictated by $G_UC(G)
       25  2010-11-16  09:00  bpalmintier   BUG FIX: corrected ramp limits for UC
       26  2010-11-16  09:00  bpalmintier   Tweaks:
                                              - Only compute ramp for units with ramp_max < 1
                                              - Consider availability in ramp for non-UC
                                              - Shortened command line options to no_nse & no_op_rsrv
       27  2010-11-16  23:59  bpalmintier   Report Startup Data
       30  2010-11-18  03:00  bpalmintier   Added max_start
       31  2010-11-19         bpalmintier   FIXED major bug in op reserve: loophole for spin_rsv, etc = 0
       32  2010-11-20  11:00  bpalmintier   FIXED major bug where startup did not actually turn on UC
       33  2010-11-22  10:30  bpalmintier   Added fix_cap mode
       34  2010-11-23  20:50  bpalmintier   Added & renamed output for use with StaticCapPlanScripter.m
       35  2010-11-24  11:15  bpalmintier   Added carbon price and marginal emissions
       36  2011-01-11  20:00  bpalmintier   Added command-line parameter checks
       37  2011-05-26  20:00  bpalmintier   Added startup cost to summary
       38  2011-06-18  03:15  bpalmintier   Added --avail option to fix bug with inconsitant gen availability files
       39  2011-06-20  12:15  bpalmintier   change update file path to relative to the model (not data_dir)
       40  2011-07-08  02:15  bpalmintier   Added ability to force plant (bin) sizes to a specified value
       41  2011-07-15  10:15  bpalmintier   move output summary to shared include file
       42  2011-07-20  03:00  bpalmintier   re-arrange data includes for sys definition of avail file
       43  2011-07-20  15:00  bpalmintier   Added support for parallel processing with par_threads
       44  2011-07-21  03:00  bpalmintier   Added --memo, set cap_max=0 integer limit to zero
       45  2011-07-21  03:30  bpalmintier   Added --co2cap
       46  2011-07-22  14:55  bpalmintier   Added combined Flexibility reserves (from OpsLp v5)
       47  2011-07-24  01:00  bpalmintier   Added max_cap_factor and derate, cleaned up flex vs separate reserves
       48  2011-07-24  01:15  bpalmintier   Remove down req't for wind when shedding OK, Added --from_scratch
       49  2011-07-24  08:30  bpalmintier   Replace availability CSV with GAMS table format
       50  2011-07-24  11:30  bpalmintier   Corrected (again) double counting for separate & flex reserves
       51  2011-07-24  19:30  bpalmintier   User configurable --out_prefix
       52  2011-07-26  16:30  bpalmintier   Made support of p_min optional with --basic_pmin
       53  2011-08-02  17:00  bpalmintier   Made planning margin optional with --plan_margin
       54  2011-08-02  17:30  bpalmintier   More flexible force_renewables with min of demand and renew output (borrow from OpsLp)
       55  2011-08-02  21:30  bpalmintier   Corrections based on OpsLp:
                                              - only G_WIND used for reserves since req't are tech specific
                                              - cleaned up ramping limit equations
       56  2011-08-03  00:10  bpalmintier   BUG FIX: pPlanRserve use for non fix_cap settings
       57  2011-08-03  00:40  bpalmintier   Added support for water limits via include file
       58  2011-08-05  01:40  bpalmintier   TWEAKED solver option file to use barrier algorithm
       59  2011-08-05  11:30  bpalmintier   Increased output precision to 5 after decimal
       60  2011-08-06  16:15  bpalmintier   Further refinement of solver to use concurrent optimization
       61  2011-08-17  15:55  bpalmintier   Added water cost
       62  2011-08-19  10:35  bpalmintier   Force renewables on system-wide, rather than per gen, basis
       63  2011-09-21  17:00  bpalmintier   Comments & other updates from UnitCommit extraction
       64  2011-10-11  14:15  bpalmintier   Renamed plant_size to gen_size (also related flags)
       65  2011-10-14  09:55  bpalmintier   BUGFIX: corrected scaling for co2_cap passed from command line
       66  2011-11-06  13:15  bpalmintier   Updated to use AdvPwrSetup and AdvPwrDataRead
       67  2011-11-07  15:25  bpalmintier   Corrected comments re: sys.inc
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 23:47:32 Page 8
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


       68  2011-11-10  12:15  bpalmintier   Added no_capital option
        69 2012-01-26  11:05  bpalmintier   Search and replace to partially match UnitCommit scenario overhaul (v26)
        70 2012-01-28  02:45  bpalmintier   Modularize to call UnitCommit for operations
        71 2012-01-29  00:10  bpalmintier   Removed "helper" lower bound on new cap b/c causing errors
        72 2012-02-03  15:15  bpalmintier   MAJOR
                                              -- scaling: MW to GW, Capital costs to M$/GW
                                              -- Default to using barrier for LP solver (typically faster, especially for LPs)
                                              -- Cleaned-up Capacity limit equations
        73 2012-02-21  15:15  bpalmintier   Stricter capacity limits for renewables. Added renew_overbuild and renew_to_rps
        74 2012-03-07  11:35  bpalmintier   Added support for partial period simulation through B_SIM
        75 2012-05-02  12:40  bpalmintier   Separate demand (D) into blocks (B) and time sub-periods (T)
        76 2012-06-14  05:10  bpalmintier   Added no_cap_limit option
        77 2012-06-14  15:05  bpalmintier   Added rps & planning margin penalties (via UnitCommit)
        78 2012-08-21  16:05  bpalmintier   Updated comments, prevent negative max for rps gens with low rps & renew_to_rps
        79 2012-08-22  00:15  bpalmintier   Shortened file names, no more "out_"
        80 2012-08-22  15:05  bpalmintier   Added priority (B&B tree) option
        81 2012-08-23  14:05  bpalmintier   BUGFIX: ignore integers for startup/shutdown when ignoring uc integers, publish uc_lp option
        82 2012-08-25  09:05  bpalmintier   BUGFIX: correct renew_to_rps logic (previously reversed).
        83 2012-08-25  11:10  bpalmintier   Replace renew_to_rps with more flexible renew_lim
        84 2012-08-29  17:45  bpalmintier   Update to set integer bounds for all except uclp
        85 2012-08-31  00:35  bpalmintier   Allow non-served energy to reduce reserve needs (old behavior with --rsrv_use_tot_demand=1)
        86 2012-08-31  07:15  bpalmintier   UPDATE: default to rsrv to demand (without nse). Flag renamed to adj_rsrv_for_nse
        87 2012-09-02  17:05  bpalmintier   BUGFIX: Correct maintenance by preventing mismatch between local & global values of capacity_G, Ergh!
        88 2012-09-02  17:08  bpalmintier   Replace all $set with $setglobal (to prevent other possible troubles)
        89 2012-09-03  07:08  bpalmintier   Add derate_to_maint & debug_off_maint
      -----------------------------------------------------
 400   
 401  *================================*
 402  *             Setup              *
 403  *================================*
 404   
 405  * First define the shared directory
 406   
 407  * ======  Platform Specific Adjustments
 408  * Setup the file separator to use for relative pathnames
 411   
 412  * By default look for shared components in sibling directory "shared"
 414   
 415  * Enable $ variables from include file to propagate back to this master file
 417   
 418  * Include common setup definitions including:
 419  *  -- Platform specific path adjustments
 420  *  -- GAMS options
 421  *  -- debug settings
 422  *  -- standardized AdvPower directories
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/AdvPwrSetup.gms
 424   
 425  *skip if already setup (to allow including one model from another)
 427   
      ----------------------------------------------------
        Unified setup file for Advanced Power Family of Models.
        
      Includes common setup definitions for:
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 23:47:32 Page 9
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


        -- Platform specific path adjustments
        -- GAMS options including support for set redefinition and limits to list output display
        -- Debug settings for expanded list file information
        -- Standardized AdvPower directories
        
       
      Command Line Parameters Implemented Here:
        Model Setup Flags (by default these are not set. Set to any number, including zero, to enable)
         --no_loop=(off)       Do not loop around demand periods for inter-period constraints
                                such as ramping, min_up_down. (default= assume looping)
        Solver Options
         --debug=(off)           Print out extra material in the *.lst file (timing, variables, 
                                  equations, etc)
         --max_solve_time=10800  Maximum number of seconds to let the solver run. (Default = 3hrs)
         --mip_gap=0.001         Max MIP gap to treat as valid solution (Default = 0.1%)
         --par_threads=2         Number of parallel threads to use. Specify 0 to use one thread per
                                   core (Default = use 2 cores)
       
        File Locations (Note, on Windows & DOS, \'s are used for defaults)
         --data_dir=../data/     Relative path to data file includes
         --out_dir=out/          Relative path to output csv files
         --util_dir=../util/     Relative path to csv printing and other utilities
       
        Output Control Flags (by default these are not set. Set to any number, including zero, to enable)
         --no_csv=(off)         Flag to suppress creation of csv output files (default: create csv output)
       
       
      Additional control variables:
       
      Note: Many of these settings and compile variables need to propagate up
      to the caller. Be sure to set $onglobal before $including this file 
      (optionally you can use $offglobal afterwards)
      	
        Originally Coded in GAMS by:
         Bryan Palmintier, MIT
         September 2011
       
       Version History
      Ver   Date       Time  Who            What
      ---  ----------  ----- -------------- ---------------------------------
        1  2011-09-21  17:05  bpalmintier   Extracted from StaticCapPlan v62
        2  2011-09-23  15:55  bpalmintier   Moved platform specific filesep & shared_dir definition (required by caller)
        3  2011-09-23  16:05  bpalmintier   Converted to $setglobal so our changes propagate to caller
        4  2011-09-23  19:55  bpalmintier   Relaxed default MIP gap to 0.1%
        5  2012-01-26  15:45  bpalmintier   Use alternate loop/control structure syntax
        6  2012-01-30  12:25  bpalmintier   Added par_mode and rel_cheat
      -----------------------------------------------------
 481   
 482  *================================*
 483  *             Setup              *
 484  *================================*
 485   
 486  * ======  GAMS Options
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 10
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 487  *display $dollar commands in lst file (for easier pre-compiler debugging)
 488  $ondollar
 489  * Allow declaration of empty sets & variables
 490  $onempty
 491  * Allow additions to set elements with multiple set definitions
 492  $onmulti
 493  * Include symbol list in LST file
 494  $onsymlist
 495  *Enable alternate loop syntax using end* rather than ()'s
 496  $onend
 497   
 498   
 499  *get a more precise MIP solution  (optcr is relative convergence). GAMS default is only 10%
 500  $setglobal mip_gap 0.001
 501  option optcr=0.001
 502   
 503  *Allow for extra execution time. units are seconds of execution (needed to extend the GAMS default
 504  * of only 1000 to successfully solve larger problems)
 505  $setglobal max_solve_time 10800
 506  option reslim = 10800;
 507   
 508  *Default to not using a relative cheat parameter
 509  $setglobal rel_cheat 0
 510   
 511  *Default to deterministic parallel mode
 512  $setglobal par_mode 1
 513   
 514  * Reduce the size of the LST file
 515  * Turn off equation listing, (unless debug on) see below
 516  * Note: limrow specifies the number of cases for each equation type that are included in the output
 517  option limrow = 0;
 518   
 519  * Turn off variable listing, (unless debug on) see below
 520  * Note: limrow specifies the number of cases for each equation type that are included in the output
 521  option limcol = 0;
 522   
 523  *=== Solution Output options
 524  * Enable csv output by default
 525  $setglobal no_csv 0
 526   
 527  * Turn off solution printing unless csv output is disabled
 528  $else
 529      option Solprint = off ;
 530  $endif
 531   
 532  *=== Debug options
 533  *enable additional debugging information
 534  $endif
 535   
 536  * ======  Setup directories
 537  * By default look for data in the sibling directory "data"
 538  $setglobal data_dir ../data/
 539   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 11
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 540  * By default store output in the sub-directory "out"
 541  $if NOT set out_dir    $setglobal out_dir out/
 542   
 543  * By default look for utilities in sibling directory "util"
 544  $setglobal util_dir ../util/
 545   
 546  * ======  Define Macros
 547  * mDemShift, this is a general replacement for the set - and -- operators that allows
 548  * the user to control whether or inter-demand period constraints loop"
 549  $ifthen not set no_loop
 550  $macro mDemShift(d_set, shift) d_set -- shift
 551  $endif
 552   
 553  * mDelFile, Delete an operating system file (quietly)
 554  * Choose appropriate system delete function using filesep as a proxy for Unix-like vs Windows
 555  * Note that both forms, quietly ignore any missing files
 556  $ifthen / == "/"
 557  $macro mDelFile(fname) execute "=rm -f &&fname"
 558  $endif
 559   
 560  $setglobal setup_complete
 561  $label label_skip_setup
 562   
 563  * Disable influence of $ settings from include files
 564  $offglobal
 565   
 566   
 567  * ======  Additional setup
 568   
 569  * == Identify if we are the master calling model
 570  $ifthen.we_are_main NOT set model_name
 571  *Establish the title
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 12
"Static Capacity Planning model"
C o m p i l a t i o n


 572  $Title "Static Capacity Planning model"
 573   
 574  *If so set it
 575  $setglobal model_name StaticCapPlan
 576   
 577  * == And we want to idenfify whether or not we are using a mixed integer solution
 578  $else.mip
 579  $setglobal use_mip yes
 580  $endif.mip
 581   
 582  $endif.we_are_main
 583   
 584  * == Default to UnitCommit based operations
 585  $setglobal ops_model UnitCommit
 586   
 587  * Setup output prefix
 588  $setglobal out_prefix SCP_
 589   
 590  * ======  Handle some initial command line parameters
 591  *Additional factor for capacity/unit commitment upper limits
 592  $setglobal overbuild .2
 593  $setglobal renew_overbuild .2
 594  $setglobal renew_lim avg
 595   
 596  *================================*
 597  *         Declarations           *
 598  *================================*
 599   
 600  * ====== Bypass Declarations & Model if doing a restart
 601  $if defined StaticCapPlan $goto skip_redef
 602   
 603   
 604  * ======  Declare all sets so can use in equations
 605  * Note: be sure to quote descriptions otherwise "/" can not be used in a description.
 606   
 607  sets
 608  * Sets for table parameters
 609   
 610      DEM_PARAMS  "demand block table parameters from load duration curve"
 611          /dur         "duration of block                 [hrs]"
 612           power       "average power demand during block [GW]"
 613          /
 614   
 615      GEN_PARAMS  "generation table parameters"
 616         /
 617          cap_credit  "Capacity Credit during peak block           [p.u.]"
 618          c_cap       "total capital cost                          [$/GW]"
 619          life        "economic lifetime for unit                  [yr]"
 620          cap_cur     "Current installed capacity for generation   [GW]"
 621          cap_max     "Maximum installed capacity for generation   [GW]"
 622          lead_time   "Delay from construction to operation        [yr]"
 623          gen_size    "typical discrete plant size                 [GW]"
 624          derate       "Derating factor for simple (non-reserves) cap planning [p.u.]"
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 13
"Static Capacity Planning model"
C o m p i l a t i o n


 625         /
 626   
 627  * Sets for data, actual definitions can be found in include files
 628      G           "generation types (or generator list)"
 629      S           "scenarios for multi-period and stochastic problems"
 630      B           "Demand blocks (e.g. weeks or ldc)"
 631          T                       "Demand time sub-periods (e.g. hours or ldc sub-blocks)"
 632      B_SIM(B)    "demand blocks used in simulation"
 633   
 634  * Subsets for special purposes
 635   
 636  * ======  Declare the data parameters. Actual data imported from include files
 637  parameters
 638  * Data Tables
 639      pGen   (G, GEN_PARAMS, S)       "table of generator data"
 640  * Post Processing Results Parameters
 641      pGenAvgAvail (G, S)             "average availability (max capacity factor)"
 642  * Additional Parameters
 643      pScenWeight(S)     "Scenario weighting for cost calcs. Use for probability or time discounting"
 644      pCRF       (G)               "capital recovery factors      [/yr]"
 645      pDemandMax (S)               "Maximum demand level          [GW]"
 646   
 647  scalars
 648      pWACC             "weighted average cost of capital (utility investment discount rate) [p.u.]"
 649   
 650  *Include operating reserves in total capacity limits only if they are used
 651  $ifthen.skip_lim not set skip_cap_limit
 652  $ifthen.fix_cap not set fix_cap
 653  $endif.plan_marg
 654  $endif.fix_cap
 655  $endif.skip_lim
 656   
 657  $endif
 658   
 659  * ======  Declare Variables
 660  variables
 661     vObjective  "Objective: scenario weighted average (EV or discounted ops cost)  [M$]"
 662     vTotalCost      (S)          "total system cost for scenario               [M$]"
 663     vOpsCost        (S)          "system operations cost in target year        [M$]"
 664     vCapitalCost    (S)          "annualized capital costs of new capacity     [M$]"
 665   
 666  * Specify integer variables. If ignore_integer flag is specified these are treated as continous by
 667  * GAMS by using the RMIP solution type.
 668  integer variables
 669      vNumNewPlants(G, S)   "number of discrete new plants to construct         [integer]"
 670   
 671   
 672  positive variables
 673     vCapInUse (   G, S)   "total installed capacity that is used [GW]"
 674   
 675     vNewCapacity( G, S)   "new capacity constructed              [GW]"
 676  * ======  Declare Equations
 677  equations
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 14
"Static Capacity Planning model"
C o m p i l a t i o n


 678  $ifthen StaticCapPlan == StaticCapPlan
 679     eObjective  "Objective function: scenario weighted average (EV or discounted ops cost)  [M$]"
 680     eTotalCost  (S)     "total cost = ops + capital cos            [M$]"
 681  $endif
 682     eCapitalCost (S)    "annualized capital cost of new capacity      [M$]"
 683   
 684  $ifthen not set fix_cap
 685     ePositiveNew(G, S)   "prevent negative net new capacities w slack variable."
 686     eInstCap  (   G, S)  "installed capacity                    [GW]"
 687  $endif
 688   
 689  $ifthen.skip_lim not set skip_cap_limit
 690  $ifthen.fix_cap not set fix_cap
 691  $endif
 692  $endif.fix_cap
 693  $endif.skip_lim
 694   
 695  $ifthen not set fix_cap
 696     eNewPlants (G, S)      "integer constraints on new capacity investment"
 697  $endif
 698     ;
 699   
 700  *================================*
 701  *  Additional Model Formulation  *
 702  *================================*
 703  * Note: this must be included between declarations & equations so that the included file
 704  * has access to our declarations, and any objective function additions can be used.
 705   
 706  * Enable $ variables from included model(s) to propagate back to this master file
 707  $onglobal
 708   
 709  * Include operations model, which greatly expands the parameter, variable, and equation set
INCLUDE    /Users/bpalmint/repos/advpower/models/ops/UnitCommit.gms
 710  $include ../ops/UnitCommit
 711   
 712  $ontext
      ----------------------------------------------------
      Flexible Unit Commitment Model
      ----------------------------------------------------
        Highly Configurable Electric power system operations model
        
      Model formulation based on the formulation described in:
       Palmintier, B., & Webster, M. (???). Efficient Long-Term Unit Commitment. In Preparation for IEEE Transactions on Power Systems
       
       
       Command Line Options (defaults shown):
       ======================================
       Data
        Primary data setup file:
         --sys=test_sys.inc     System parameters include file. This file references all data for a model
                                run. Typically single value data such as: cost of carbon, WACC, etc. are
                                included directly, while larger tables are in separate sub-include files.
                                The standard sub-include files are:
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 15
"Static Capacity Planning model"
C o m p i l a t i o n


                                    fuel.inc      Fuel names, prices, and emissions
                                    gens.inc      Generator set, operating parameters, and availability
                                    demand.inc    Demand block set, duration, and power levels
       
        Files used to override values set or referenced in sys and sub-includes (assumed to to be
        located in data_dir, except as noted):
         --fuel=(from sys)     Fuel prices and emissions
         --gens=(from sys)     Generation set & tables of parameters & availability/renewable output.
         --gparams=(OPTIONAL from sys)    Default generator parameters to use for any missing values.
         --avail=(from sys)    Generation availability/renewable output
         --demand=(from sys)   Demand include file that defines demand blocks, levels, and duration
         --update=NONE         An optional final include file to override selected settings from other
                                include files. Does not override any explicit command-line values. The
                                path for update file is relative to the model (not data_dir). 
                                IMPORTANT: the update file works in S space, so most parameters must 
                                be indexed by S and you must use the scenario dependent 
                                parameters: pFuel, pDemand, pGen, and pGenAvail. Changes to the 
                                p*Data parameters (pGenData, pDemandData, etc) will NOT be used.
         --scen=NONE           For multiple scenario problems (multi-period or stochastic) specifies
                                the list of scenarios (populates the S set) and their associated
                                weight/probability table, pScenWeight(S).
       
       
        Specific Value Overrides (take precedence over all values defined in data files. Use for
        sensitivity analysis, etc.) IMPORTANT, these values are used for ALL scenarios, use an update
        for changing these on a by scenario basis.
         --co2cost=#            Cost of CO2 in $/t-co2e          (default: use sys or update value)
         --demscale=#           Factor to uniformly scale demand (default: use sys or update value)
         --rps=#                Renewable Portfolio Standard     (default: use sys or update value)
         --co2cap=#             Carbon Emission Cap (Mt-co2e)    (default: use sys or update value)
       
        Model Setup Flags (by default these are not set. Set to any number, including zero, to enable)
         --obj_var=vOpsCost     Variable to minimize in solution. In scenario mode (stochastic UC, 
                                  multi-period planning, etc.) The weighted sum across scenarios of
                                  this value is used Common options:
                                   vOpsCost  (default) Least cost operations
                                   vCarbonEmissions  Use with no_nse=1 to find minimum possible co2
                                  Technical Note: Any variable indexed by S can be used
         --startup=(off)        Compute startup costs (also enables unit_commit)   (default: ignore)
         --unit_commit=on       Compute unit commitment constraints   (default: use UC constraints --
                                 Note: different default from other AdvPower models. When used as
                                 as sub-model, the callers value is used instead)
         --ramp=(off)           Flag to limit inter period ramp rates  (default: ignore)
         --ignore_integer=(off) Flag to ignore integer constraints in Unit Commitment if enabled (unit is
                                 either committed or not) (default: use integer constraints)
         --avg_avail=(off)      Flag to use the average rather than time dependent availabilities. Using
                                 averages is OK for thermal units, but highly simplifies time varying
                                 renewables. This simplification is made in the analytic version of the
                                 model, but not generally a good idea for numeric estimates. (default: use
                                 complete time varying information.)
         --uc_ignore_unit_min=(0)   Threshold for unit_min to ignore All (even continuos) commitment 
                                  decisions & constraints. Gens with unit_min less than or equal to 
                                  this value will not have commitment variables and use LP 
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 16
"Static Capacity Planning model"
C o m p i l a t i o n


                                  formulations for equations from dispatch. Use uc_int_unit_min for
                                  a better approach.
         --uc_int_unit_min=(0)   Threshold for unit_min to ignore INTEGER commitment 
                                  decisions & constraints. Gens with unit_min less than or equal to 
                                  this value will still have commitment variables, but their valid
                                  range is relaxed to be continous. The same equations are used
                                  as for those units with integer constraints.
          --uc_lp=(0)            Ignore integer constraints on all UC variables (& startup/shutdown)
         --adj_rsrv_for_nse=(off)  Adjust reserves for non-served energy. This uses actual power
                        production rather than total desired demand for setting reserve requirements.
                        This distinction is only significant if there is non-served energy. When
                        enabled (old default for SVN=479-480), then non-served energy provides a way
                        to reduce reserve requirements. [Default= use total non-adjusted demand]
         --rsrv=(none)  Specify Type of reserve calculation. Options are:
              =separate  Enforce separate reserve requirements based on "classic" ancillary
                          services plus additions for renewable uncertainty. This includes Reg Up, 
                          Reg Down, Spin Up, & Quick Start
              =flex      Use combined "flexibility" reserves grouped simply into flex up and flex down
              =both      Compute both separate and flexibility reserves
              =(none)    If not set, no reserve limits are computed
        --non_uc_rsrv_up_offline=0   For non-unit commitment generators, the fraction of non-running 
                          generation capacity to use toward UP reserves. This parameter has no
                          effect on UC generators. deJonge assumes 0.6, NETPLAN assumes 1.0, 
                          (default=0). 
        --non_uc_rsrv_down_offline=0 For non-unit commitment generators, the fraction of non-running 
                          generation capacity to use toward DOWN reserves. This parameter has no
                          effect on UC generators. deJonge assumes 0.6, NETPLAN assumes 1.0, 
                          (default=0).
        --no_quick_st=(off)     Flag to zero out quickstart reserve contribution to spinning/flex up 
                                 reserves. Useful when non_uc_rsrv... > 0
         --no_nse=(off)         Don't allow non-served energy
         --force_renewables=(off) Force all renewable output to be used. This is only feasible until
                                 the point where load and op_reserves dictate a max. (until we add storage).
                                 When used with cap_fix, it is a bit more widely useful b/c we can limit
                                 output to the level of demand. (this is NLP when capacity is a decision)
         --max_start=(off)      Enforce maximum number of startups   (default: ignore)
         --basic_pmin=(off)     Enforce non-UC based minimum output levels for each generator type. 
                                 This can be useful for baseload plants with simple (non-UC) operations.
         --pwl_cost=(off)     Use piecewise linear cost (fuel consumption) for generators with 
                                 segments defined (in a pGenHrSegments (G, PWL_COEF, HR_SEG) table)
                                 other generators use the standard afine approximation defined in 
                                 pGen(G, GENA_PARAMS). The default afine approximation defines
                                 a linear+offset fuel use using zero power fuel (p0_fuel) and a 
                                 constant heat rate (heatrate). (default: use
                                 afine approx for all generators)
         --p0_recover=0.85    For units not under unit commitment constraints, a zero intercept fuel
                                 curve is used by distributing the p0_fuel (or intercept for 
                                 piecewise linear units) across the output range using an adjusted 
                                 (higher) heatrate. The p0_recover parameter specifies the power 
                                 output level used for full recovery. A value of less than 1.0 is 
                                 recommended, otherwise, the linear fit would be universally too low,
                                 providing an unfair efficiency bonus for non-UC units. (default 85%)
         --pwl2afine=(off)    Overwrite the heatrate & p0_fuel values in the generator table 
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 17
"Static Capacity Planning model"
C o m p i l a t i o n


                                 pGen with the steepest (least efficient, last) piecewise linear
                                 segment. This option can provide better matches to pwl runs when
                                 the data is available.
         --min_up_down=(off)  Enforce minimum up and down time constraints (default: ignore)
         --force_gen_size=(off) Force all plant sizes to equal the specified value (in MW)
         --min_gen_size=(off)   Force small plant sizes to be larger than specified value (in MW)
         --no_loop=(off)       Do not loop around demand periods for inter-period constraints
                                such as ramping, min_up_down. (default= assume looping)
         --maint=(off)         Compute Maintenance schedule (default = use avail data, typically 
                                assumes full availability for thermal plants)
         --maint_lp=(off) Relax integer constraints on maintenance decisions (default: use integers) 
         --maint_om_fract=0.5   If maintenance planning enabled, the default fraction of total fixed 
                                 O&M costs to divide among the required weeks of maintenance.
         --plan_margin=(off)    Enforce the planning margin. Set to 1 to enable and use the problem
                                 defined pPlanReserve (typically in sys.inc). Alternatively can set
                                 to a value < 1 that then is used for pPlanReserve overriding other 
                                 definitions.
         --plan_margin_penalty=(off) Allow planning margin to be not met and define associated penalty
                                 [$/MW-firm] (default= must meet planning margin)
         --rps_penalty=(off)    Allow planning margin to be not met and define associated penalty
                                 [$/MWh] (default= must meet rps)
         --retire=(0)           Fraction of current capacity to retire. Max capacity is also adjusted
                                 down accordingly (value 0 to 1)
          --derate_to_maint=(off) Override gen datafile derating value and derate based on 
                                  the maintenance value only.
       
        Additional Model Components & Related
         --calc_water=(off)     Compute water use and limits
               Related options (see shared_dir/WaterEquations for complete details)
                 --h2o_limit=(Inf)     System wide maximum water use [Tgal]. Only computed for gens
                                        with specified water usage (h2o_withdraw_var)
                 --h2o_cost=(0)        System wide water cost [$/kgal]. Only computed for gens
                                        with specified water usage (h2o_withdraw_var)
       
       
        Solver Options
         --max_solve_time=10800  Maximum number of seconds to let the solver run. (Default = 3hrs)
         --mip_gap=0.001         Max MIP gap to treat as valid solution (Default = 0.1%)
         --par_threads=1         Number of parallel threads to use. Specify 0 to use one thread per
                                   core (Default = use 1 core)
         --par_mode=1            CPLEX parallel mode 1=deterministic & repeatable, 0=automatic,
                                  -1=Opportunistic, but not repeatable (Default = determinstic)
         --lp_method=4           CPLEX code for lp_method to use for pure root node, LP, RMIP, and 
                                   final MIP solve.  Options: 0=automatic, 2=Dual Simplex, 4=barrier,
                                   6=concurrent (a race between dual simplex and barrier in parallel)
                                   (Default = 4, barrier) Use 6 if running in parallel
         --cheat=(off)           use epsilon-optimal branch & bound by removing solutions that are
                                  not "cheat" better than the current best. This can speed up the 
                                  MIP search, but may miss the true optimal solution. Note that this
                                  value is specified in absolute terms of the objective function.
         --rel_cheat=(off)       Similar to cheat, but specified in relative percentage of objective
                                  this works in CPLEX only
       
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 18
"Static Capacity Planning model"
C o m p i l a t i o n


        File Locations (Note, on Windows & DOS, \'s are used for defaults)
         --data_dir=../data/     Relative path to data file includes
         --out_dir=out/          Relative path to output csv files
         --util_dir=../util/     Relative path to csv printing and other utilities
         --shared_dir=../shared/ Relative path to shared model components
         --out_prefix=UC_        Prefix for all our our output data files
         
        Output Control Flags (by default these are not set. Set to any number, including zero, to enable)
         --debug=(off)           Print out extra material in the *.lst file (timing, variables, 
                                  equations, etc)
         --debug_avail=(off)    Display full availability table in *.lst file for debugging
         --no_csv=(off)         Flag to suppress creation of csv output files (default: create csv output)
         --summary_only=(off)   Only create output summary data (default: create additional tables)
         --summary_and_power_only=(off)   Create only summary & power table outputs (Default: all files)
         --out_gen_params=(off) Create output file listing generator parameter input data (Default: skip)
         --out_gen_avail=(off)  Create output file listing generator availability input data (Default: skip)
         --memo=(none)          Free-form text field added to the summary table NO COMMAS (Default: none)
         --gdx=(off)            Export the entire solved model to a gdx file in the out_dir (Default: no gdx file)
         --debug_off_maint=(off) Create table of capacity off maintenance
       
        Supports:
          - multiple operations model modes:
              + simple economic dispatch
              + ramp (up & down) constrained economic dispatch
              + integer unit commitment:
                 - minimum output for committed generators
                 - startup costs (optional)
                 - ramp (up & down) constraints (optional)
          - arbitrary number of generation technologies/units with
              + availability factors (separate from capacity credit, see below)
              + minimum power for baseload units
              + technology specific operating reserve capabilities
          - features designed explicitly for proper wind support:
              + RPS (minimum wind energy penetration %)
              + time varying wind availability/output
          - (optional) endogenous operating reserves during each time block (hourly for 8760) including:
              + Spinning Reserves
              + Quick Start Reserves (effectively non-spin)
              + Regulation Up & Down
          - arbitrary number of demand blocks of varying duration
          - heat rates + separate fuel costs for easy scenario analysis
          - carbon intensity
             + imbedded carbon from construction
             + carbon content of fuels
          - carbon constraint (carbon cap)
          - carbon tax
          - non-served energy
          - Arbitrary Scenarios (using set S), only weighted sum of costs is implemented here, 
            calling model needs to handle any additional constraints. Scenarios enabled for all
            parameters EXCEPT: piecewise linear segments, and (most) generator technical constraints 
            (specifically those that affect subsets G_UC, G_RPS, G_RAMP, G_UC_INT, etc). 
       
      Outputs
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 19
"Static Capacity Planning model"
C o m p i l a t i o n


          - Summary, Power, Commitment, #startups, emissions, wind shedding, cost breakdown.
       
       
      Additional Features:
          - loading of data from include files to allow an unchanging core model.
              - These file names can be optionally specified at the command line.
          - A final, optional "update" file to allow for adjusting parameters for easy sensitivity
            analysis or to change the values for a model run without changing the default values
          - internal annualizing of capital costs (requires definition of WACC)
          - ability to scale demand
          - ability to ignore integer constraints
          - Force wind mode to require using all wind production with no shedding (only valid for small %wind)
       
      Performance enhancements:
          - ignores unit commitment for plants with no/low unit minimum output such as renewables and
            peakers. This threshold is tunable with --unit_min
       
      Assumptions:
          - Ramping and Startup "loop" such that the state at the endo of the year must match the
            beginning of year. This prevents turning off baseload in anticipation of the "end of the world"
       
       
      ToDo:
          * Decouple ops into blocks for faster UC?
          * Add hydro
          * Add stochasticity
          - quadratic or affine (linear+offset) heat rate curves for different plants in group
          - replace put2csv with rutherford's equivalent?
          - add min up/down times
          - compute fixed and var cost by gen
          - compute required market based incentives to achieve same results
          - expand in-line comments for equations
          - automatic scaling of demand blocks based on year, baseline, & growth rate
          - Add load following reserves
          - Separate reserves as a function of wind, load ramps, etc.
          - setup solution in a loop with initial start to allow saving of intermediate solutions?
          ? initial guess for some integer constraints
       
        Originally Coded in GAMS by:
         Bryan Palmintier, MIT
         March 2010
       
       Version History
      Ver   Date       Time  Who            What
      ---  ----------  ----- -------------- ---------------------------------
        1  2011-09-21  17:00  bpalmintier   Original version adapted from: StaticCapPlan v62
        2  2011-09-21  17:30  bpalmintier   Separated out shared AdvPwrSetup section
        3  2011-09-22  16:00  bpalmintier   Expanded equation comments
        4  2011-09-22  16:50  bpalmintier   Overhauled quick start limits to account for avail & derate
        5  2011-09-23  15:00  bpalmintier   Introduced capacity_G alias for total capacity to reduce $ifs
        6  2011-09-23  19:50  bpalmintier   Added cheat parameter for e-optimal Branch & Bound
        7  2011-09-25  23:30  bpalmintier   Added support for afine (linear + intercept) fuel use (heatrates)
        8  2011-09-27  20:50  bpalmintier   Added support for piecewise linear fuel consumption (heatrates)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 20
"Static Capacity Planning model"
C o m p i l a t i o n


        9  2011-09-30  13:50  bpalmintier   Added gmx option & put page width to max to reduce truncation
        10 2011-10-06  09:30  bpalmintier   Enable relaxfixedinfeas for cleaner final LP solves
        11 2011-10-06  21:30  bpalmintier   Scale Capital + Fixed O&M by fraction of the year
        12 2011-10-08  01:30  bpalmintier   Added rel_cheat option
        13 2011-10-08  11:30  bpalmintier   Add p0_recovery to adjust p0_fuel allocation for non-UC plants
        14 2011-10-08  11:30  bpalmintier   Add pwl2afine to override afine heatrate using piecewise segments
        15 2011-10-08  22:40  bpalmintier   BIG NEWS: use G_INT_UC & uc_int_unit_min for better linearization
        16 2011-10-09  23:40  bpalmintier   Print all control variables to list file
        17 2011-10-11  14:15  bpalmintier   Renamed plant_size to gen_size (also related flags)
        18 2011-10-13  15:55  bpalmintier   Added support for default generator parameters
        19 2011-10-17  15:25  bpalmintier   Added options to output generator & availability parameters
        20 2011-10-17  16:00  bpalmintier   Tighten LP tolerance: faster & avoid MIP gap issues for small problems
        21 2011-10-18  20:30  bpalmintier   Added par_mode
        22 2011-11-07  15:30  bpalmintier   Updated comments re: sys.inc
        23 2011-11-10  12:15  bpalmintier   Added no_capital option
        24 2011-11-12  10:15  bpalmintier   Set vUnitCommit to be positive
        25 2011-11-15  01:15  bpalmintier   Added ability to check planning margin
        26 2012-01-25  23:25  bpalmintier   Major expansion:
                                              -- Scenario support for stochastic UC, multi-period planning, etc.
                                              -- User definable objective variable
                                              -- Removed capital costs (doesn't belong in an ops model)
                                              -- Separate pGen, pDemand, pFuel (used in model) from p*Data read from file
        27 2012-01-26  13:05  bpalmintier   Major expansion:
                                              -- Scenario support for stochastic UC, multi-period planning, etc.
                                              -- Separate pGen, pDemand, pFuel (used in model) from p*Data read from file
        28 2012-01-28  02:00  bpalmintier   Extracted writeResults
        29 2012-01-28  20:35  bpalmintier   Removed planning margin (it belongs in planning models not ops)
        30 2012-02-01  23:05  bpalmintier   MAJOR...
                                            Bugfixes:
                                              -- Added startup fuel use to vFuelUse for correct carbon (and fuel) accounting
                                              -- removed fuel costs from startup to avoid double counting
                                            Equation adjustments:
                                              -- separate fuel use and carbon emission by generator
                                            And scaling:
                                              -- MW to GW
                                              -- Most $ figures to M$
                                              -- Many fuel numbers from MMBTU to BTUe9
        31 2012-02-03  15:05  bpalmintier   Scale Co2 to Mt, use BTUe12 for (internal) fuel use.
        32 2012-02-04  04:05  bpalmintier   Default to non-parallel barrier for solution method
        33 2012-02-18  08:25  bpalmintier   BUGFIX - Startup cost scaling off by 1e6
        34 2012-03-07  11:35  bpalmintier   Added support for partial period simulation through D_SIM
        35 2012-03-09  12:45  bpalmintier   Replace -- with mDemandShift for optional loop startup
        36 2012-05-02  10:15  bpalmintier   Separate demand (D) into blocks (B) and time sub-periods (T)
        37 2012-05-04  17:35  bpalmintier   Convert Startup & Shutdown to integers: Much faster, see note
        38 2012-05-04  23:05  bpalmintier   Added maintenance support
        39 2012-06-14  15:05  bpalmintier   Added rps & planning margin penalties
        40 2012-06-19  00:10  bpalmintier   BUGFIX: Overhaul ramp limits to include startup/shutdown
        41 2012-08-20  15:35  bpalmintier   Added costs for maintenance
        42 2012-08-23  14:05  bpalmintier   BUGFIX: ignore integers for startup/shutdown when ignoring uc integers, publish uc_lp option
        43 2012-08-29  17:45  bpalmintier   Update to set integer bounds for all except uclp
        44 2012-08-31  00:35  bpalmintier   Allow non-served energy to reduce reserve needs (old behavior with --rsrv_use_tot_demand=1)
        45 2012-08-31  07:15  bpalmintier   UPDATE: default to rsrv to demand (without nse). Flag renamed to adj_rsrv_for_nse
        46 2012-09-02  17:08  bpalmintier   Replace all $set with $setglobal (to prevent scope errors)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 21
"Static Capacity Planning model"
C o m p i l a t i o n


        47 2012-09-03  07:08  bpalmintier   Add derate_to_maint & debug_off_maint
      -----------------------------------------------------
1050  $offtext
1051   
1052  *================================*
1053  *             Setup              *
1054  *================================*
1055   
1056  * First define the shared directory
1057   
1058  * ======  Platform Specific Adjustments
1059  * Setup the file separator to use for relative pathnames
1060  $setglobal filesep "/"
1061  $endif
1062   
1063  * By default look for shared components in sibling directory "shared"
1064  $if not set shared_dir $setglobal shared_dir ../shared/
1065   
1066  * Enable $ variables from include file to propagate back to this master file
1067  $onglobal
1068   
1069  * Include common setup definitions including:
1070  *  -- Platform specific path adjustments
1071  *  -- GAMS options
1072  *  -- debug settings
1073  *  -- standardized AdvPower directories
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/AdvPwrSetup.gms
1074  $include ../shared/AdvPwrSetup
1075   
1076  *skip if already setup (to allow including one model from another)
1077  $label label_skip_setup
1078   
1079  * Disable influence of $ settings from include files
1080  $offglobal
1081   
1082   
1083  * ======  Additional setup
1084  * == Identify if we are the master calling model
1085  $endif.we_are_main_name
1086   
1087  * == Setup short hand alias for total capacity to use as a control variable
1088  $else.fix_cap
1089  $setglobal capacity_G vCapInUse(G, S)
1090  $endif.fix_cap
1091   
1092  $setglobal cap_for_plan_margin vCapInUse(G, S)
1093   
1094  $ifthen.maint set maint
1095  $setglobal capacity_G vCapOffMaint(B, T, G, S)
1096  $endif.maint
1097   
1098  *Set Maximum Capacity for Fixed O&M costs & computing vCapOffMaint
1099  $else.fix_cap
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 22
"Static Capacity Planning model"
C o m p i l a t i o n


1100  $setglobal max_cap_G vCapInUse(G, S)
1101  $endif.fix_cap
1102   
1103  * Setup output prefix
1104  $if NOT set out_prefix $setglobal out_prefix UC_
1105   
1106  * Make sure unit_commit is set if startup is set
1107  $if set startup $setglobal unit_commit 1
1108   
1109  * Make sure we compute startup & shutdown variables if we need them
1110  $if set startup     $setglobal compute_state 1
1111  $if set max_start   $setglobal compute_state 1
1112  $setglobal compute_state 1
1113   
1114  * Assign the power point for p0_fuel recovery for non-uc generators
1115  $setglobal p0_recover 0.85
1116   
1117  *================================*
1118  *         Declarations           *
1119  *================================*
1120   
1121  * ======  Declare all sets so can use in equations
1122  * Note: be sure to quote descriptions otherwise "/" can not be used in a description.
1123   
1124  sets
1125  * Sets for table parameters
1126   
1127      DEM_PARAMS  "demand block table parameters from load duration curve"
1128          /
1129           dur         "duration of block                 [hrs]"
1130           power       "average power demand during block [GW]"
1131          /
1132   
1133      GEN_PARAMS  "generation table parameters"
1134         /
1135          c_var_om    "variable O&M cost                           [$/MWh]"
1136          c_fix_om    "fixed O&M cost                              [M$/GW-yr]"
1137          heatrate    "heatrate for generator (inverse efficiency) [MMBTU/MWh = BTUe9/GWh]"
1138          p0_fuel     "fuel use at zero power out (heatrate intercept) [BTUe9/hr]"
1139          fuel        "name of fuel used                           [name]"
1140          cap_cur     "Current installed capacity for generation   [GW]"
1141          co2_ccs     "Fraction of carbon capture & sequestration  [p.u.]"
1142          co2_embed   "CO2_eq emissions from plant construction    [Mt/GW]"
1143          p_min       "minimum power output (for baseload)         [p.u.]"
1144          gen_size    "typical discrete plant size                   [GW]"
1145          ramp_max    "Maximum hourly ramp rate                    [fract/hr]"
1146          unit_min    "Minimum power output per committed unit     [GW]"
1147          c_start_fix "Fixed cost to start up a unit               [K$/start]"
1148          fuel_start  "Fuel usage to start up a unit               [BTUe9/start]"
1149          quick_start "Fraction of capacity avail for non-spin reserves [p.u.]"
1150          reg_up      "Fraction of capacity avail for regulation up reserves [p.u.]"
1151          reg_down    "Fraction of capacity avail for regulation down reserves [p.u.]"
1152          spin_rsv    "Fraction of capacity avail for spinning reserves [p.u.]"
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 23
"Static Capacity Planning model"
C o m p i l a t i o n


1153          max_start   "Maximum number of startups per plant per year [starts/unit/yr]"
1154          max_cap_fact "Maximum capacity factor, use for maintanence [p.u.]"
1155          derate       "Derating factor for simple (non-reserves) cap planning [p.u.]"
1156         /
1157   
1158      FUEL_PARAMS "fuel table parameters"
1159          /
1160           name        "The name as a string (acronym) for comparison  [name]"
1161           cost        "Unit fuel cost                                 [$/MMBTU = $K/BTUe9]"
1162           co2         "Carbon Dioxide (eq) emitted                    [t/MMBTU = Kt/BTUe9]"
1163          /
1164   
1165  * Sets for data, actual definitions can be found in include files
1166      G           "generation types (or generator list)"
1167          /
1168           wind
1169          /
1170      B           "Demand blocks (e.g. weeks or ldc)"
1171          T                       "Demand time sub-periods (e.g. hours or ldc sub-blocks)"
1172      B_SIM(B)    "demand blocks used in simulation"
1173      F           "fuel types"
1174      S           "scenarios for multi-period and stochastic problems"
1175   
1176  * Sets associated with piecewise linear cost (fuel) functions
1177          HR_SEG       "piece-wise linear fuel use segments (slope=heatrate)"
1178  *      (Note only define the first segment here, assume other segs defined in data files as needed
1179                  /seg1/
1180   
1181          PWL_COEF    "Coefficients for piecewise linear representation"
1182                  /
1183                   slope
1184                   intercept
1185                  /
1186   
1187   
1188  * Sets for mapping between other sets
1189      GEN_FUEL_MAP(G, F)     "map for generator fuel types"
1190   
1191  * Subsets for special purposes
1192      G_UC(G)       "Generators to compute continuous or discrete unit commitment state and constraints"
1193      G_UC_INT(G)   "Generators with integer on/off values for unit commitment"
1194      G_RPS(G)      "Generators included in the Renewable Portfolio Standard"
1195      G_WIND(G)     "Wind generators (for reserve requirements)"
1196      G_RAMP(G)     "Generators for which to enforce ramping limits"
1197      G_PWL_COST(G) "Generators for which to use multi-segment piecewise linear fuel use"
1198      PWL_COST_SEG(G, HR_SEG) "Valid piece-wise linear segments"
1199   
1200  * ======  Declare the data parameters. Actual data imported from include files
1201  parameters
1202  * Data Tables
1203      pDemand    (B, T, DEM_PARAMS, S)   "table of demand data"
1204      pGen       (G, GEN_PARAMS, S)   "table of generator data"
1205      pGenAvail  (B, T, G, S)            "table of time dependent generator availability"
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 24
"Static Capacity Planning model"
C o m p i l a t i o n


1206      pFuel      (F, FUEL_PARAMS, S)  "table of fuel data"
1207  $endif
1208   
1209  * Additional Parameters
1210     pScenWeight(S)     "Scenario weighting for cost calcs. Use for probability or time discounting"
1211   
1212     pCostCO2     (S)     "cost of carbon (in terms of CO2 equivalent)                         [$/t-CO2eq = M$/Mt]"
1213     pRPS         (S)     "fraction of energy from wind                                        [p.u.]"
1214     pCarbonCap   (S)     "max annual CO2 emissions                                            [Mt CO2e]"
1215     pDemandScale (S)     "factor by which to scale demand"
1216     pFractionOfYear(S)   "fraction of year covered by the simulation"
1217   
1218     pMaxNumPlants(G, S)  "upper bound on number of plants for unit commitment"
1219   
1220  scalars
1221     pWACC             "weighted average cost of capital (utility investment discount rate) [p.u.]"
1222     pPriceNonServed     "Cost of non-served energy                                           [$/MWh]"
1223   
1224  * ======  Declare Variables
1225  variables
1226     vObjective  "Objective: scenario weighted average (EV or discounted ops cost)  [M$]"
1227     vTotalCost      (S)          "total system cost for scenario               [M$]"
1228     vOpsCost        (S)          "system operations cost in target year        [M$]"
1229     vFixedOMCost    (S)          "fixed O&M costs in target year               [M$]"
1230     vVariableOMCost (S)          "variable O&M costs in target year            [M$]"
1231     vFuelCost       (S)          "total fuel costs in target year              [M$]"
1232     vCarbonCost     (S)          "cost of all carbon emissions                 [M$]"
1233     vPenaltyCost    (S)          "rps and plan_margin penalty costs            [M$]"
1234   
1235  $endif
1236  $endif
1237     vCarbonEmissions(G, S)          "carbon from operations + fraction embedded   [Mt-CO2e]"
1238   
1239  * See below for integerization
1240  positive variables
1241     vUnitCommit(B, T, G, S)  "number of units of each gen type on-line during period     [continuous]"
1242     vStartUp  (B, T, G, S)   "number of units of each type that starts up during each period  [continuous]"
1243     vShutDown (B, T, G, S)   "number of units of each type that shuts down during each period  [continuous]"
1244   
1245  * Specify integer variables. If ignore_integer flag is specified these are treated as continous by
1246  * GAMS by using the RMIP solution type.
1247  $ifthen not set uc_lp
1248  integer variables
1249  $endif
1250     vUCInt(B, T,G,S)         "integer match to vUnitCommit for members of G_INT_UC [integer]"
1251   
1252  * Previously, we made vStartup and vShutDown continuous since the unit commitment constraint (eState)
1253  * forces them to integers since vUnitCommit is an integer. This trick reduces the number
1254  * integer variables, BUT in testing and as is described in [1] with modern solvers, this
1255  * actually takes longer to run.
1256  * [1] J. Ostrowski, M. F. Anjos, and A. Vannelli,
1257  * "Tight Mixed Integer Linear Programming Formulations for the Unit Commitment Problem,"
1258  * IEEE Transactions on Power Systems, vol. 27, no. 1, pp. 39-46, Feb. 2012.
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 25
"Static Capacity Planning model"
C o m p i l a t i o n


1259   
1260     vStartInt  (B, T, G, S)   "integer match to vStartUp for members of G_INT_UC [integer]"
1261     vShutInt (B, T, G, S)   "integer match to vShutDown for members of G_INT_UC [integer]"
1262     ;
1263   
1264  positive variables
1265     vInstantFuel(B, T, G, S) "instantaneous fuel use by gen per period [BTUe9/hr]"
1266     vFuelUse  (F, G, S)   "fuel usage by generator & type           [BTUe12]"
1267     vPwrOut   (B, T, G, S)   "production of the unit                   [GW]"
1268     vNonServed(B, T   , S)   "non-served demand                        [GW]"
1269   
1270  $endif
1271  $endif
1272     ;
1273   
1274  * ======  Declare Equations
1275  equations
1276  $endif
1277     eOpsCost    (S)     "system operations cost for one year of operation  [M$]"
1278     eFixedOMCost(S)     "system fixed O&Mcosts for one year           [M$]"
1279     eVarOMCost  (S)     "system variable O&M costs for one year       [M$]"
1280     eFuelCost   (S)     "system fuel costs for one year               [M$]"
1281     eCarbonCost (S)     "cost of all carbon emissions                 [M$]"
1282  $endif
1283  $endif
1284     ePenaltyCost(S)      "rps and plan_margin penalty costs                   [M$]"
1285   
1286     eCarbonEmissions(G, S) "carbon from operations + fraction embedded   [Mt-CO2e]"
1287     eInstantFuelByGen (B, T, G, S) "fuel use by gen and demand period       [BTUe9/hr]"
1288  $endif
1289     eFuelUse (F, G, S)      "fuel usage by type                           [quad = BTUe15]"
1290   
1291  $ifthen NOT set rsrv
1292     ePwrMax   (B, T, G, S)  "output w/o reserves lower than available max       [GW]"
1293     ePwrMin   (B, T, G, S)  "output w/o reserves greater than installed min     [GW]"
1294     ePwrMaxUC (B, T, G, S)  "output w/o reserves lower than committed max       [GW]"
1295     ePwrMinUC (B, T, G, S)  "output w/o reserves greater than committed min     [GW]"
1296  $endif
1297   
1298     eDemand   (B, T   , S)  "output must equal demand                           [GW]"
1299   
1300     eRPS      (S)        "RPS Standard: minimum energy percent from renewables     [p.u.]"
1301     eCarbonCap(S)        "Limit total emissions                                    [Mt-CO2e]"
1302   
1303  $endif
1304   
1305  $ifthen set ramp
1306     eRampUpLimitUC  (B, T, G, S)     "Limit period to period ramp up rates for integer commited plants"
1307     eRampDownLimitUC(B, T, G, S)     "Limit period to period ramp down for integer commited plants"
1308     eRampUpLimit    (B, T, G, S)     "Limit period to period ramp up rates"
1309     eRampDownLimit  (B, T, G, S)     "Limit period to period ramp down rates"
1310  $endif
1311   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 26
"Static Capacity Planning model"
C o m p i l a t i o n


1312     eUnitCommit(B, T, G, S)  "can only commit up to the installed number of units     [continous]"
1313  $ifthen not set uc_lp
1314  *(possibly) Mixed Integer Equations
1315     eUnitCommitInteger(B, T, G, S) "Integerization for unit commitment"
1316     eStartUpInteger(B, T, G, S)    "Integerization for unit startup"
1317     eShutDownInteger(B, T, G, S)   "Integerization for unit shutdown"
1318  $endif
1319   
1320  $ifthen set compute_state
1321     eState     (B, T, G, S)  "compute unit commitment startup and shutdowns           [integer]"
1322  $endif
1323   
1324  $endif
1325     ;
1326   
1327  *================================*
1328  *  Additional Model Formulation  *
1329  *================================*
1330  * Note: this must be included between declarations & equations so that the included file
1331  * has access to our declarations, and any objective function additions can be used.
1332   
1333  * Enable $ variables from included model(s) to propagate back to this master file
1334  $onglobal
1335   
1336  * Include Reserve constraints if required
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/MaintenanceEquations.gms
1337  $include ../shared/MaintenanceEquations
1338   
1339  $ontext
      ----------------------------------------------------
        Maintenance scheduling for Advanced Power Family of Models.
        
       
      Command Line Parameters Implemented Here:
          --maint=(off)    Enforce minimum up and down time constraints (default: ignore)
          --maint_lp=(off) Relax integer constraints on maintenance decisions (default: use integers) 
       
      Additional control variables:
       
      IMPORTANT: unlike most equation $include files, this file must be loaded AFTER reading in
      the generator datafile. That way our $macros expand properly
       
        Originally Coded in GAMS by:
         Bryan Palmintier, MIT
         May 2012
       
       Version History
      Ver   Date       Time  Who            What
      ---  ----------  ----- -------------- ---------------------------------
        1  2012-05-04  13:45  bpalmintier   Original Code
        2  2012-05-04  23:35  bpalmintier   Added max_maint as basic crew limit heuristic
        3  2012-08-20  15:35  bpalmintier   Added costs for maintenance
        4  2012-08-23  13:05  bpalmintier   Added maint_lp to ignore maintenance integers
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 27
"Static Capacity Planning model"
C o m p i l a t i o n


        5  2012-08-24  11:20  bpalmintier   BUGFIX: scale maintenance costs by block duration
      -----------------------------------------------------
1366  $offtext
1367   
1368  *================================*
1369  *         Declarations           *
1370  *================================*
1371  * ======  Declare Control Variables
1372  * Default to 15% of capacity maximum on maintenance (plus 1, so always feasible)
1373  $setglobal max_maint 0.15
1374   
1375  * ======  Declare Parameters
1376  parameter
1377      pBlockDurWk(B, S)              "duration for each block in weeks"
1378      ;
1379   
1380  * ======  Declare Sets
1381  set
1382      GEN_PARAMS
1383         /
1384          maint_wks   "Annual weeks of maintenance                    [wk/yr]"
1385          c_maint_wk   "Cost per week of maintenance                  [M$/wk]"
1386         /
1387      ;
1388   
1389  * ======  Declare Variables
1390  positive variables
1391      vMaintCost(S)     "Total maintenance cost for scenario"
1392      vCapOffMaint(B, T, G, S)    "Quantity of capacity available off maintenance [GW]"
1393  $ifthen not set maint_lp
1394  integer variables
1395  $endif
1396  * Note taking a queue from Ostrowski (2012) the extra integers actually help with modern
1397  * solvers. See UnitCommitment for more
1398      vOnMaint(B, G, S)       "Number of units on maintenance in a block"
1399      vMaintBegin(B, G, S)    "Number of units starting maintenance during the block [integer]"
1400      vMaintEnd(B, G, S)      "Number of units finishing maintenance during the block [integer]"
1401      ;
1402   
1403  * ======  Declare Equations
1404  equations
1405      eMaintCost(S)         "Compute total maintenance cost for scenario"
1406      eMaintState(B, G, S)        "Compute maintenance begin and end"
1407      eMaintTime (B, G, S)        "Sum total maintenance over the time horizon"
1408      eTotalMaint(G, S)           "Sum total maintenance over the time horizon"
1409      eCapOffMaint(B, T, G, S)    "Compute resulting capacity available for dispatch"
1410      eMaintMax(B, G, S)          "Limit quantity of each gen type on maintenance simultaneously"
1411      ;
1412   
1413  *================================*
1414  *     The Actual Equations       *
1415  *================================*
1416  * Important: we must be included into a larger model, so no objective function defined
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 28
"Static Capacity Planning model"
C o m p i l a t i o n


1417   
1418  * == Compute total maintenance cost (eMaintState)
1419  * Note: this formulation is the same as the unit commitment state formulation
1420  eMaintCost(S)  ..
1421      vMaintCost(S)
1422      =e= sum[(B, G)$(pGen(G, 'maint_wks', S) > 0), vOnMaint(B, G, S) * pGen(G, 'c_maint_wk', S) * pBlockDurWk(B, S)];
1423   
1424  * == Compute maintenance begin and end (eMaintState)
1425  * Note: this formulation is the same as the unit commitment state formulation
1426  eMaintState  (B, G, S)$(pGen(G, 'maint_wks', S) > 0)  ..
1427      vOnMaint(B, G, S)
1428      =e= vOnMaint(B--1, G, S) + vMaintBegin(B, G, S) - vMaintEnd(B, G, S);
1429   
1430  * == Need to have sufficient Maintenance (scaled by time horizon) (eTotalMaint)
1431  eTotalMaint(G, S)$(pGen(G, 'maint_wks', S) > 0) ..
1432      sum[(B), vOnMaint(B, G, S) * pBlockDurWk(B, S)]
1433      =g= pGen(G, 'maint_wks', S) * vCapInUse(G, S) / pGen(G, 'gen_size', S) * pFractionOfYear(S);
1434   
1435  * == Compute resulting capacity available for dispatch (eCapOffMaint)
1436  * Note: must include for all generators, even without maintenance to ensure there is a
1437  * reasonable upper limit on their dispatch
1438  eCapOffMaint(B, T, G, S) ..
1439      vCapOffMaint(B, T, G, S) =e= vCapInUse(G, S) - vOnMaint(B, G, S) * pGen(G, 'gen_size', S);
1440   
1441  * == Limit quantity of each gen type on maintenance simultaneously (MaintMax)
1442  eMaintMax(B, G, S)$(pGen(G, 'maint_wks', S) > 0) ..
1443      vOnMaint(B, G, S) =l= 1 + 0.15 * vCapInUse(G, S) / pGen(G, 'gen_size', S);
1444   
1445  * == Once started, must take full time for maintanence (eMaintTime)
1446  * Note: this formulation is basically the same as the min up/down time formulation
1447  * the primary difference is that we sum over block duration to allow reasonable maintenance
1448  * plans for partial year time periods
1449  eMaintTime(B, G, S)$(pGen(G, 'maint_wks', S) > 0) ..
1450      vOnMaint(B, G, S)
1451      =g=
1452      vMaintBegin(B, G, S)
1453      + vMaintBegin(B--1, G, S)$(pGen(G, 'maint_wks', S)
1454                                  > pBlockDurWk(B, S) )
1455      + vMaintBegin(B--2, G, S)$(pGen(G, 'maint_wks', S)
1456                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) )
1457      + vMaintBegin(B--3, G, S)$(pGen(G, 'maint_wks', S)
1458                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) + pBlockDurWk(B--2, S) )
1459      + vMaintBegin(B--4, G, S)$(pGen(G, 'maint_wks', S)
1460                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) + pBlockDurWk(B--2, S)
1461                                      + pBlockDurWk(B--3, S) )
1462      + vMaintBegin(B--5, G, S)$(pGen(G, 'maint_wks', S)
1463                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) + pBlockDurWk(B--2, S)
1464                                      + pBlockDurWk(B--3, S) + pBlockDurWk(B--4, S) )
1465      + vMaintBegin(B--6, G, S)$(pGen(G, 'maint_wks', S)
1466                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) + pBlockDurWk(B--2, S)
1467                                      + pBlockDurWk(B--3, S) + pBlockDurWk(B--4, S)
1468                                      + pBlockDurWk(B--5, S) )
1469      + vMaintBegin(B--7, G, S)$(pGen(G, 'maint_wks', S)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 29
"Static Capacity Planning model"
C o m p i l a t i o n


1470                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) + pBlockDurWk(B--2, S)
1471                                      + pBlockDurWk(B--3, S) + pBlockDurWk(B--4, S)
1472                                      + pBlockDurWk(B--5, S) + pBlockDurWk(B--6, S) )
1473      + vMaintBegin(B--8, G, S)$(pGen(G, 'maint_wks', S)
1474                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) + pBlockDurWk(B--2, S)
1475                                      + pBlockDurWk(B--3, S) + pBlockDurWk(B--4, S)
1476                                      + pBlockDurWk(B--5, S) + pBlockDurWk(B--6, S)
1477                                      + pBlockDurWk(B--7, S) )
1478      + vMaintBegin(B--9, G, S)$(pGen(G, 'maint_wks', S)
1479                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) + pBlockDurWk(B--2, S)
1480                                      + pBlockDurWk(B--3, S) + pBlockDurWk(B--4, S)
1481                                      + pBlockDurWk(B--5, S) + pBlockDurWk(B--6, S)
1482                                      + pBlockDurWk(B--7, S) + pBlockDurWk(B--8, S) )
1483      ;
1484   
1485  * Include Planning Margin if required & we are the main function (CapPlan models include
1486  * these equations directly
1487  $if StaticCapPlan==UnitCommit $if set plan_margin $include ../shared/PlanMarginEquations
1488   
1489  * Include Reserve constraints if required
1490  $if set rsrv $include ../shared/ReserveEquations
1491   
1492  * Include Minimum Up and Down time formulation if required
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/MinUpDownEquations.gms
1493  $include ../shared/MinUpDownEquations
1494   
1495  $ontext
      ----------------------------------------------------
        Abstracts out the rather convoluted minimum up and down time computations for Advanced Power 
        Family of Models.
        
      LIMITATIONS:
         -- Currently limited to up/down times of 50hrs
         -- Hourly demand. (Or more generally: equal demand periods and that the min_up & min_down
             parameters are specified in units of demand periods)
        
       
      Command Line Parameters Implemented Here:
          --min_up_down=(off)  Enforce minimum up and down time constraints (default: ignore)
       
      Additional control variables:
       
      IMPORTANT: Currently assumes that the demand dataset is hourly. This could change with more sums
       
      IMPORTANT: time looping (ie first period follows the last) controlled by the no_loop command
       line parameter through mDemShift
       
      IMPORTANT: unlike most equation $include files, this file must be loaded AFTER reading in
      the generator datafile. That way our $macros expand properly
       
        Originally Coded in GAMS by:
         Bryan Palmintier, MIT
         September 2011
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 30
"Static Capacity Planning model"
C o m p i l a t i o n


       
       Version History
      Ver   Date       Time  Who            What
      ---  ----------  ----- -------------- ---------------------------------
        1  2011-09-27  23:05  bpalmintier   Original Code
        2  2011-10-11  14:15  bpalmintier   Renamed plant_size to gen_size (also related flags)
        3  2012-01-25  23:55  bpalmintier   Added scenario support for stochastic UC, multi-period planning, etc.
        4  2012-03-07  12:55  bpalmintier   Added support for partial period simulation through D_SIM
        5  2012-03-09  12:45  bpalmintier   Replace -- with mDemandShift for optional loop startup
        6  2012-05-02  10:45  bpalmintier   Separate demand (D) into blocks (B) and time sub-periods (T)
      -----------------------------------------------------
1533  $offtext
1534   
1535  *================================*
1536  *         Declarations           *
1537  *================================*
1538  set
1539  GEN_PARAMS
1540     /
1541      min_up
1542      min_down
1543     /
1544  ;
1545   
1546  * ======  Declare Variables
1547   
1548  * ======  Declare Equations
1549  equations
1550      eMinUpTime(B, T, G, S)
1551      eMinDownTime(B, T, G, S)
1552      ;
1553   
1554  *================================*
1555  *     The Actual Equations       *
1556  *================================*
1557  * Important: we must be included into a larger model, so no objective function defined
1558   
1559  * == Once on, a generator must remain on for specified number of periods (eMinUpTime)
1560  eMinUpTime(B, T, G, S)$( B_SIM(B)
1561                        and G_UC(G)
1562                        and pGen(G, 'min_up', S) > 1
1563                        and pGen(G,'gen_size', S) <> 0 ) ..
1564      vUnitCommit(B, T, G, S)
1565      =g=
1566      vStartup(B, T, G, S)
1567      + vStartup(B, T -- 1, G, S)$(pGen(G, 'min_up', S) > 1)
1568      + vStartup(B, T -- 2, G, S)$(pGen(G, 'min_up', S) > 2)
1569      + vStartup(B, T -- 3, G, S)$(pGen(G, 'min_up', S) > 3)
1570      + vStartup(B, T -- 4, G, S)$(pGen(G, 'min_up', S) > 4)
1571      + vStartup(B, T -- 5, G, S)$(pGen(G, 'min_up', S) > 5)
1572      + vStartup(B, T -- 6, G, S)$(pGen(G, 'min_up', S) > 6)
1573      + vStartup(B, T -- 7, G, S)$(pGen(G, 'min_up', S) > 7)
1574      + vStartup(B, T -- 8, G, S)$(pGen(G, 'min_up', S) > 8)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 31
"Static Capacity Planning model"
C o m p i l a t i o n


1575      + vStartup(B, T -- 9, G, S)$(pGen(G, 'min_up', S) > 9)
1576      + vStartup(B, T -- 10, G, S)$(pGen(G, 'min_up', S) > 10)
1577      + vStartup(B, T -- 11, G, S)$(pGen(G, 'min_up', S) > 11)
1578      + vStartup(B, T -- 12, G, S)$(pGen(G, 'min_up', S) > 12)
1579      + vStartup(B, T -- 13, G, S)$(pGen(G, 'min_up', S) > 13)
1580      + vStartup(B, T -- 14, G, S)$(pGen(G, 'min_up', S) > 14)
1581      + vStartup(B, T -- 15, G, S)$(pGen(G, 'min_up', S) > 15)
1582      + vStartup(B, T -- 16, G, S)$(pGen(G, 'min_up', S) > 16)
1583      + vStartup(B, T -- 17, G, S)$(pGen(G, 'min_up', S) > 17)
1584      + vStartup(B, T -- 18, G, S)$(pGen(G, 'min_up', S) > 18)
1585      + vStartup(B, T -- 19, G, S)$(pGen(G, 'min_up', S) > 19)
1586      + vStartup(B, T -- 20, G, S)$(pGen(G, 'min_up', S) > 20)
1587      + vStartup(B, T -- 21, G, S)$(pGen(G, 'min_up', S) > 21)
1588      + vStartup(B, T -- 22, G, S)$(pGen(G, 'min_up', S) > 22)
1589      + vStartup(B, T -- 23, G, S)$(pGen(G, 'min_up', S) > 23)
1590      + vStartup(B, T -- 24, G, S)$(pGen(G, 'min_up', S) > 24)
1591      + vStartup(B, T -- 25, G, S)$(pGen(G, 'min_up', S) > 25)
1592      + vStartup(B, T -- 26, G, S)$(pGen(G, 'min_up', S) > 26)
1593      + vStartup(B, T -- 27, G, S)$(pGen(G, 'min_up', S) > 27)
1594      + vStartup(B, T -- 28, G, S)$(pGen(G, 'min_up', S) > 28)
1595      + vStartup(B, T -- 29, G, S)$(pGen(G, 'min_up', S) > 29)
1596      + vStartup(B, T -- 30, G, S)$(pGen(G, 'min_up', S) > 30)
1597      + vStartup(B, T -- 31, G, S)$(pGen(G, 'min_up', S) > 31)
1598      + vStartup(B, T -- 32, G, S)$(pGen(G, 'min_up', S) > 32)
1599      + vStartup(B, T -- 33, G, S)$(pGen(G, 'min_up', S) > 33)
1600      + vStartup(B, T -- 34, G, S)$(pGen(G, 'min_up', S) > 34)
1601      + vStartup(B, T -- 35, G, S)$(pGen(G, 'min_up', S) > 35)
1602      + vStartup(B, T -- 36, G, S)$(pGen(G, 'min_up', S) > 36)
1603      + vStartup(B, T -- 37, G, S)$(pGen(G, 'min_up', S) > 37)
1604      + vStartup(B, T -- 38, G, S)$(pGen(G, 'min_up', S) > 38)
1605      + vStartup(B, T -- 39, G, S)$(pGen(G, 'min_up', S) > 39)
1606      + vStartup(B, T -- 40, G, S)$(pGen(G, 'min_up', S) > 40)
1607      + vStartup(B, T -- 41, G, S)$(pGen(G, 'min_up', S) > 41)
1608      + vStartup(B, T -- 42, G, S)$(pGen(G, 'min_up', S) > 42)
1609      + vStartup(B, T -- 43, G, S)$(pGen(G, 'min_up', S) > 43)
1610      + vStartup(B, T -- 44, G, S)$(pGen(G, 'min_up', S) > 44)
1611      + vStartup(B, T -- 45, G, S)$(pGen(G, 'min_up', S) > 45)
1612      + vStartup(B, T -- 46, G, S)$(pGen(G, 'min_up', S) > 46)
1613      + vStartup(B, T -- 47, G, S)$(pGen(G, 'min_up', S) > 47)
1614      + vStartup(B, T -- 48, G, S)$(pGen(G, 'min_up', S) > 48)
1615      + vStartup(B, T -- 49, G, S)$(pGen(G, 'min_up', S) > 49)
1616      ;
1617   
1618  eMinDownTime(B, T, G, S)$( B_SIM(B)
1619                          and G_UC(G)
1620                          and pGen(G, 'min_down', S) > 1
1621                          and pGen(G,'gen_size', S) <> 0 ) ..
1622      (vCapOffMaint(B, T, G, S) / pGen(G,'gen_size', S) - vUnitCommit(B, T, G, S))
1623      =g=
1624      vShutdown(B, T, G, S)
1625      + vShutDown(B, T -- 1, G, S)$(pGen(G, 'min_down', S) > 1)
1626      + vShutDown(B, T -- 2, G, S)$(pGen(G, 'min_down', S) > 2)
1627      + vShutDown(B, T -- 3, G, S)$(pGen(G, 'min_down', S) > 3)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 32
"Static Capacity Planning model"
C o m p i l a t i o n


1628      + vShutDown(B, T -- 4, G, S)$(pGen(G, 'min_down', S) > 4)
1629      + vShutDown(B, T -- 5, G, S)$(pGen(G, 'min_down', S) > 5)
1630      + vShutDown(B, T -- 6, G, S)$(pGen(G, 'min_down', S) > 6)
1631      + vShutDown(B, T -- 7, G, S)$(pGen(G, 'min_down', S) > 7)
1632      + vShutDown(B, T -- 8, G, S)$(pGen(G, 'min_down', S) > 8)
1633      + vShutDown(B, T -- 9, G, S)$(pGen(G, 'min_down', S) > 9)
1634      + vShutDown(B, T -- 10, G, S)$(pGen(G, 'min_down', S) > 10)
1635      + vShutDown(B, T -- 11, G, S)$(pGen(G, 'min_down', S) > 11)
1636      + vShutDown(B, T -- 12, G, S)$(pGen(G, 'min_down', S) > 12)
1637      + vShutDown(B, T -- 13, G, S)$(pGen(G, 'min_down', S) > 13)
1638      + vShutDown(B, T -- 14, G, S)$(pGen(G, 'min_down', S) > 14)
1639      + vShutDown(B, T -- 15, G, S)$(pGen(G, 'min_down', S) > 15)
1640      + vShutDown(B, T -- 16, G, S)$(pGen(G, 'min_down', S) > 16)
1641      + vShutDown(B, T -- 17, G, S)$(pGen(G, 'min_down', S) > 17)
1642      + vShutDown(B, T -- 18, G, S)$(pGen(G, 'min_down', S) > 18)
1643      + vShutDown(B, T -- 19, G, S)$(pGen(G, 'min_down', S) > 19)
1644      + vShutDown(B, T -- 20, G, S)$(pGen(G, 'min_down', S) > 20)
1645      + vShutDown(B, T -- 21, G, S)$(pGen(G, 'min_down', S) > 21)
1646      + vShutDown(B, T -- 22, G, S)$(pGen(G, 'min_down', S) > 22)
1647      + vShutDown(B, T -- 23, G, S)$(pGen(G, 'min_down', S) > 23)
1648      + vShutDown(B, T -- 24, G, S)$(pGen(G, 'min_down', S) > 24)
1649      + vShutDown(B, T -- 25, G, S)$(pGen(G, 'min_down', S) > 25)
1650      + vShutDown(B, T -- 26, G, S)$(pGen(G, 'min_down', S) > 26)
1651      + vShutDown(B, T -- 27, G, S)$(pGen(G, 'min_down', S) > 27)
1652      + vShutDown(B, T -- 28, G, S)$(pGen(G, 'min_down', S) > 28)
1653      + vShutDown(B, T -- 29, G, S)$(pGen(G, 'min_down', S) > 29)
1654      + vShutDown(B, T -- 30, G, S)$(pGen(G, 'min_down', S) > 30)
1655      + vShutDown(B, T -- 31, G, S)$(pGen(G, 'min_down', S) > 31)
1656      + vShutDown(B, T -- 32, G, S)$(pGen(G, 'min_down', S) > 32)
1657      + vShutDown(B, T -- 33, G, S)$(pGen(G, 'min_down', S) > 33)
1658      + vShutDown(B, T -- 34, G, S)$(pGen(G, 'min_down', S) > 34)
1659      + vShutDown(B, T -- 35, G, S)$(pGen(G, 'min_down', S) > 35)
1660      + vShutDown(B, T -- 36, G, S)$(pGen(G, 'min_down', S) > 36)
1661      + vShutDown(B, T -- 37, G, S)$(pGen(G, 'min_down', S) > 37)
1662      + vShutDown(B, T -- 38, G, S)$(pGen(G, 'min_down', S) > 38)
1663      + vShutDown(B, T -- 39, G, S)$(pGen(G, 'min_down', S) > 39)
1664      + vShutDown(B, T -- 40, G, S)$(pGen(G, 'min_down', S) > 40)
1665      + vShutDown(B, T -- 41, G, S)$(pGen(G, 'min_down', S) > 41)
1666      + vShutDown(B, T -- 42, G, S)$(pGen(G, 'min_down', S) > 42)
1667      + vShutDown(B, T -- 43, G, S)$(pGen(G, 'min_down', S) > 43)
1668      + vShutDown(B, T -- 44, G, S)$(pGen(G, 'min_down', S) > 44)
1669      + vShutDown(B, T -- 45, G, S)$(pGen(G, 'min_down', S) > 45)
1670      + vShutDown(B, T -- 46, G, S)$(pGen(G, 'min_down', S) > 46)
1671      + vShutDown(B, T -- 47, G, S)$(pGen(G, 'min_down', S) > 47)
1672      + vShutDown(B, T -- 48, G, S)$(pGen(G, 'min_down', S) > 48)
1673      + vShutDown(B, T -- 49, G, S)$(pGen(G, 'min_down', S) > 49)
1674      ;
1675   
1676   
1677  * Include water limiting equations and associated parameters and variables
1678  $if set calc_water $include ../shared/WaterEquations
1679   
1680  * Disable influence of $ settings from sub-models
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 33
"Static Capacity Planning model"
C o m p i l a t i o n


1681  $offglobal
1682   
1683  *================================*
1684  *       The Actual Model         *
1685  *================================*
1686  *====== objective function and components
1687   
1688  * == Objective (eObjective)
1689  *
1690  * The standard objective is total cost (see below for alternative objective options). We use
1691  * our definition of this equation whenever we are the main model. Otherwise we expect our caller
1692  * to define a similar objective function.
1693  *
1694  $endif.we_are_main
1695   
1696  * == Operations Cost (eOpsCost)
1697  * In this equation, A number of terms are always included:
1698  *     -- fixed O&M cost
1699  *     -- variable O&M costs
1700  *     -- Fuel Costs
1701  *     -- Carbon Costs
1702  * In addition, other terms are added if needed based on command-line settings:
1703  *     -- Startup Costs
1704  *     -- Non served energy costs
1705  *     -- Water costs
1706  *     -- Maintenance costs
1707  *
1708  * Units:
1709  *  all M$ unless otherwise noted
1710  eOpsCost(S)    .. vOpsCost(S) =e= vFixedOMCost(S)
1711                                  + vVariableOMCost(S)
1712                                  + vFuelCost(S)
1713                                  + vCarbonCost(S)
1714                                  + vPenaltyCost(S)
1715  $endif
1716  $endif
1717  $endif
1718  $ifthen set maint
1719                                  + vMaintCost(S)
1720  $endif
1721                                  ;
1722   
1723   
1724  * == Fixed Operations and Maintenance Costs (eFixedOMCost)
1725  *
1726  * Units & Scaling:
1727  *   1x      c_fix_om        M$/GW-yr
1728  eFixedOMCost(S)  .. vFixedOMCost(S) =e= sum[(  G), pGen(G,'c_fix_om', S)*(vCapInUse(G, S))]
1729                                              * pFractionOfYear(S);
1730   
1731  * == Variable Operations and Maintenance Costs (eVarOMCost)
1732  *
1733  * Units & Scaling:          external    this eq.
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 34
"Static Capacity Planning model"
C o m p i l a t i o n


1734  *   1000x   vVarOMCost      M$          k$
1735  *   1x      c_var_om        $/MWh   to  k$/GWh
1736  *   1x      vPwrOut         GW
1737  *   1x      Demand(dur)     hr
1738  eVarOMCost(S)    .. vVariableOMCost(S)*1e3 =e= sum[(B_SIM, T, G), pGen(G,'c_var_om', S)*vPwrOut(B_SIM, T, G, S)*pDemand(B_SIM, T, 'dur', S)];
1739   
1740   
1741  * == Total Fuel Costs (eFuelCost)
1742  *
1743  * Units & Scaling:          external    this eq.
1744  *   1x      vFuelCost       M$      to  M$
1745  *   1x      Fuel(cost)      $/MMBTU to  M$/BTUe12
1746  *   1x      vFuelUse        BTUe12
1747  eFuelCost(S)     .. vFuelCost(S) =e= sum[(GEN_FUEL_MAP(G,F)), pFuel(F,'cost', S)*vFuelUse(F, G, S)];
1748   
1749   
1750  * == Carbon Emision Costs (eCarbonCost)
1751  *carbon cost =  carbon price * carbon emissions
1752  * Units & Scaling:          external    this eq.
1753  *   1x      vCarbonCost     M$
1754  *   1x      pCostCO2        $/t     to  M$/MT
1755  *   1x      vCarbonEmmit    kT
1756  eCarbonCost(S)   .. vCarbonCost(S) =e= pCostCO2(S) * sum[(G), vCarbonEmissions(G,S)];
1757   
1758   
1759  * == Startup Costs (eStartupCost)
1760  * Includes only fixed costs for startup. Costs associated with startup fuel use is captured
1761  * as part of the total fuel use by generator. Hence startup fuel and carbon costs are computed
1762  * as part of fuel and carbon costs respectively
1763  *
1764  * Units & Scaling:              external            this eq.
1765  *   1000x   vStartCost          Musd        to      Kusd
1766  *   1x      c_start_fix         Kusd/start
1767  $endif
1768   
1769  * == Total non-served energy costs (eNonServedCost)
1770  * Units & Scaling:             external    this eq.
1771  *   1x      vNonServedCost      M$
1772  *   1/1000x pPriceNonServe      $/MWh   to  M$/GWh
1773  *   1x      vNonServed          GWh
1774  $endif
1775   
1776  * == Penalty costs (ePenaltyCost)
1777  * Units & Scaling:             external         this eq.
1778  *   1x      vPenaltyCost        M$
1779  *   1x      vUnderPlanReserve   GW-firm
1780  *   1/1000x plan_margin_penalty   $/MW-firm   to  M$/GW-firm
1781  *   1x      vUnderRPS           GWh
1782  *   1/1000x vNonServed          $/MWh       to  M$/GWh
1783      ePenaltyCost(S) .. vPenaltyCost(S) =e= 0
1784  $endif
1785  $endif
1786                                  ;
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 35
"Static Capacity Planning model"
C o m p i l a t i o n


1787   
1788   
1789  *====== Intermediate Calculations
1790   
1791  * == Carbon Emissions (eCarbonEmissions) by generator
1792  * carbon emissions (Mt) = (fuel use - ccs) * carbon intensity + embedded carbon * new capacity
1793  *
1794  * Notes:
1795  *  -- we assume that the CCS system is operational during startup and apply ccs rate to
1796  *      all fuel usage
1797  *
1798  * Units & Scaling:      external        this eq.
1799  *   1x      pFuel(co2)      t/MMBTU     to  Mt/BTUe12
1800  *   1x      vCarbonEm       Mt
1801  *   1x      vFuelUse        BTUe12
1802  *   1x      vNewCapacity    GW
1803  *   1x      co2_embed       Mt/GW
1804  eCarbonEmissions(G, S)   .. vCarbonEmissions(G, S) =e=
1805                                  sum[(GEN_FUEL_MAP(G,F)),
1806                                      vFuelUse(F,G,S) *pFuel(F,'co2', S)*(1-pGen(G,'co2_ccs', S))
1807                                     ]
1808  $ifthen not set fix_cap
1809                                  + vNewCapacity(G, S)*pGen(G,'co2_embed', S)
1810  $endif
1811                              ;
1812   
1813   
1814  * == Fuel Consumption by generator for each period (eInstantFuelByGen)
1815  * This equation implements an afine approximation (linear + intercept) for fuel use as a
1816  * function of power output. This equation is suppressed and replaced with multiple heatrate
1817  * segments for generators with piece-wise linear fuel use.
1818  *
1819  * Units & Scaling:      external        this eq.
1820  *   1x  vInstantFuel    BTUe9/hr    to  BTUe9/hr
1821  *   1x  heatrate        MMBTU/MWh   to  BTUe9/GWh
1822  *   1x  p0_fuel         BTUe9/hr
1823  *   1x  vPwrOut         GW
1824  *   1x  vUnitCommit     integer (no units)
1825  eInstantFuelByGen(B, T, G, S)$( B_SIM(B)
1826                               and (pGen(G,'gen_size', S) > 0 and not G_PWL_COST(G)) ) ..
1827      vInstantFuel(B, T, G, S) =e= pGen(G,'heatrate', S)*vPwrOut(B, T,G,S)
1828                              + pGen(G, 'p0_fuel', S)*vUnitCommit(B, T,G,S)$G_UC(G)
1829  * For units not under unit commitment, divide up the p0 fuel usage such that it is fully
1830  * accounted for at the p0_recover output level (typically 85%).
1831                              + pGen(G, 'p0_fuel', S)/pGen(G,'gen_size', S)/0.85
1832                                  *vPwrOut(B, T,G,S)$(not G_UC(G))
1833                              ;
1834  $endif
1835   
1836  * == Total Fuel Consuption by Generator (eFuelUse)
1837  * Includes both startup and instantaneous use
1838  *
1839  * Units & Scaling:          external        this eq.
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 36
"Static Capacity Planning model"
C o m p i l a t i o n


1840  *   1000x   vFuelUse        BTUe12      to  BTUe9
1841  *   1x      vInstantFuel    BTUe9/hr
1842  *   1x      Demand(dur)     hr
1843  *   1x      fuel_start      BTUe9/start
1844  eFuelUse(F,G,S)$(GEN_FUEL_MAP(G,F)) .. vFuelUse(F,G,S)*1000 =e= sum[(B_SIM, T),
1845                                                  vInstantFuel(B_SIM, T, G, S)*pDemand(B_SIM, T, 'dur', S)
1846  $endif
1847                                              ];
1848   
1849   
1850  *====== Constraints
1851   
1852  * == Supply/Demand Balance (eDemand)
1853  * It is important to use equality here, since we are interested in effects of minimum output limits, etc.
1854  *
1855  * Note: reserves are enforced in separate equations below
1856  *
1857  * Units & Scaling:      external        this eq.
1858  *   all in GW
1859  eDemand (B, T,S)$B_SIM(B)    .. sum[(G), vPwrOut(B, T, G,S)]
1860  $endif
1861                      =e= pDemand(B, T,'power',S);
1862   
1863   
1864  $ifthen.no_rsrv NOT set rsrv
1865  *====== Generation output less than upper limit(s)
1866  * Here we only worry about non-reserve limits. With reserves these equations will be
1867  * replaced with expanded versions from the shared file AdvPwrReserves. Still there are
1868  * multiple cases of interest:
1869  *
1870  * 1) Simplest (ePwrMax) is power out < installed capacity, with adjustments described below
1871  * 2) For generation subject to unit commitment, things change slightly since we now only output
1872  *    power up to the number of units that are turned on (ePwrMaxUC)
1873  * Furthermore,  we might choose to derate the power output of the plant separately from
1874  * availability (typically for simple models), this can be done by taking the minimum of availability
1875  * and the derate factor. Since both are parameters, this is a valid (MI)LP formulation. Note that
1876  * this derating is already taken into account for in eUnitCommit for the UC equations.
1877   
1878  * == Output must be below the generator upper limits (ePwrMax)
1879  *Note: the $subset(setname) format only defines the equation for members of G that are also in G_UC
1880  *Note: Availability is handled in eState for unit commitment constrained generators
1881  *
1882  * Units & Scaling:
1883  *   vPwrOut & capacity      GW
1884  *   derate & pGenAvail      p.u.
1885  ePwrMax (B, T, G, S)$( B_SIM(B)
1886                      and (not G_UC(G)) ) ..
1887                  vPwrOut(B, T, G, S)  =l=  vCapOffMaint(B, T, G, S) *
1888  $else
1889                              (
1890  $endif
1891                                pGenAvail(B, T, G, S)
1892                              );
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 37
"Static Capacity Planning model"
C o m p i l a t i o n


1893   
1894   
1895  * == Output Upper Limit for UnitCommitment Gens (ePwrMaxUC)
1896  *
1897  * Units & Scaling:
1898  *   vPwrOut & gen_size      GW
1899  *   vUnitCommit             integer
1900  ePwrMaxUC (B, T, G, S)$( B_SIM(B)
1901                        and G_UC(G)
1902                        and pGen(G, 'gen_size', S) ) ..
1903                  vUnitCommit(B, T,G,S) * pGen(G, 'gen_size', S) =g= vPwrOut(B, T, G, S);
1904   
1905   
1906  *====== Generation output greater than lower limit(s)
1907  * Here we find a complementary situation to the PwrMax equations described above
1908  * (Still only included if no reserves defined)
1909   
1910  * == Power greater than lower limits (ePwrMin)
1911  * For simple models we might use a "technology minimum output" as a proxy for
1912  * baseload plants. This lower limit is applied to entire generator category and is ignored by
1913  * using p_min=0 or not defining p_min (unspecified parameters default to zero).
1914  *
1915  * Units & Scaling:
1916  *   vPwrOut & capacity      GW
1917  *   p_min                   p.u.
1918  ePwrMin (B, T, G, S)$B_SIM(B) ..   vPwrOut(B, T, G, S) =g= vCapOffMaint(B, T, G, S) * pGen(G,'p_min', S);
1919   
1920   
1921  * == Power greater than lower limits for Unit Commitment (ePwrMinUC)
1922  * Minimum power output for commitment generators under UC
1923  *Note: the $subset(setname) format only defines the equation for members of G that are also in G_UC
1924  *
1925  * Units & Scaling:
1926  *   vPwrOut & unit_min      GW
1927  *   vUnitCOmmit             #units
1928  ePwrMinUC (B, T, G, S)$( B_SIM(B)
1929                        and G_UC(G) )
1930                  .. vPwrOut(B, T, G, S) =g= vUnitCommit(B, T,G,S) * pGen(G, 'unit_min',S);
1931   
1932  $endif.no_rsrv
1933   
1934   
1935  *======  Additional Constraints
1936   
1937  * == Renewable Portfolio Standard (eRPS)
1938  * renewable energy / total energy > RPS
1939  *
1940  * Units & Scaling:
1941  *   vPwrOut         GW
1942  *   Demand(dur)     hr
1943  *   pRPS            p.u.
1944  eRPS(S)        ..  sum[(B_SIM, T, G_RPS), vPwrOut(B_SIM, T, G_RPS,S)*pDemand(B_SIM, T, 'dur',S)]
1945  $endif
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 38
"Static Capacity Planning model"
C o m p i l a t i o n


1946                     =g=
1947                     pRPS(S)*sum[(G, B_SIM, T), vPwrOut(B_SIM, T,G,S)*pDemand(B_SIM, T, 'dur', S)];
1948   
1949   
1950  * == Carbon Limit (eCarbonCap)
1951  * Units & Scaling:
1952  *   all in Mt CO2(e)
1953  eCarbonCap(S)  ..  sum[(G), vCarbonEmissions(G, S)] =l= pCarbonCap(S);
1954   
1955   
1956  * == Force use of renewables if required (eForceRenewables)
1957  *force the use of all renewable output (up to 100% of load)
1958  $endif.force_re
1959   
1960   
1961  *======  Unit Commitment Constraints
1962   
1963  * == Limit commitments to available capacity (eUnitCommit)
1964  *Note: the $subset(setname) format only defines the equation for members of G that are also in G_UC
1965  * Units & Scaling:
1966  *   vUnitCommit             #units (# of gens)
1967  *   gen_size                GW/unit
1968  *   capacity_G              GW
1969  *   pGenAvail, derate       p.u.
1970  eUnitCommit(B, T,G,S)$( B_SIM(B)
1971                       and G_UC(G) )
1972                  .. vUnitCommit(B, T,G,S)
1973                      =l=
1974                      vCapOffMaint(B, T, G, S) / pGen(G, 'gen_size',S) *
1975  $else
1976                      (
1977  $endif
1978                      pGenAvail(B, T, G, S)
1979                      );
1980   
1981  * == Integerization for required gens (eUnitCommitInteger)
1982  * This simple equation works since vUcInt is defined as an integer variable, and hence the
1983  * otherwise continuous vUnitCommit will take on integer values as well for all members of the
1984  * G_UC_INT subset. The redundant continuous variable should be removed during (MI)LP pre-solve
1985  $ifthen.not_uc_lp not set uc_lp
1986     eUnitCommitInteger(B, T,G,S)$(B_SIM(B) and G_UC_INT(G) ) .. vUnitCommit(B, T,G,S) =e= vUcInt(B, T,G,S);
1987     eStartUpInteger(B, T, G, S)$(B_SIM(B) and G_UC_INT(G) ) .. vStartUp(B,T,G,S) =e= vStartInt(B,T,G,S);
1988     eShutDownInteger(B, T, G, S)$(B_SIM(B) and G_UC_INT(G) ) .. vShutDown(B,T,G,S) =e= vShutInt(B,T,G,S);
1989  $endif.not_uc_lp
1990   
1991  * == If startup costs or restrictions in use, compute startup & shutdowns (eState)
1992  $ifthen set compute_state
1993  *Note: the $subset(setname) format only defines the equation for members of G that are also in G_UC
1994     eState  (B, T,G,S)$(B_SIM(B) and G_UC(G))  ..
1995                  vUnitCommit(B, T,G,S)
1996                  =e= vUnitCommit(B, T -- 1,G,S) + vStartUp(B, T,G,S) - vShutDown(B, T,G,S);
1997  $endif
1998   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 39
"Static Capacity Planning model"
C o m p i l a t i o n


1999  * == Limit the total number of startups per generator group (eMaxStart)
2000  * Note: pGen(max_start) already scaled from starts/yr to starts/model_timeframe by AdvPwrDataRead
2001  *
2002  * Units & Scaling:
2003  *   vStartUp        starts, summed over all demand periods.
2004  *   gen_size        GW/unit
2005  *   capacity_G      GW
2006  *   max_start       starts/unit/model_duration
2007  $endif
2008   
2009  *======  Ramping Constraints ======
2010  $ifthen.ramp_eq set ramp
2011   
2012  * ===== Ramping for Clusters
2013  * In this case, we restrict ramping to the limits of plants that are on-line for both this period
2014  * and last period + the unit minimums for any units that startup or shutdown. Using the unit
2015  * minimums is logical for startup, but conservative for shutdown because it forces units to ramp
2016  * down before shutting off. It is tempting to use gen_size of shutdowns for ramp down, but this
2017  * is likely incorrect because the plant is probably not running at full output power.
2018  *
2019  * Note: this constraint is made trickier by our use of lumped integer commitment since we don't know
2020  * output levels for individual units.
2021   
2022  * == Upward Ramp Limits with Unit Commitment (eRampUpLimitUC)
2023  * Use these integer based limits for technologies with integer unit_commitments
2024  * For UC ramp-up = ramp rate for committed units + startups
2025  *  with startups limited either by min_out or by ramp_rate for new units
2026  *
2027  * Note: We ignore demand block durations and impose this limit between blocks
2028  *
2029  * Units & Scaling:
2030  *   vPwrOut, unit_min       GW
2031  *   gen_size                GW/unit
2032  *   ramp_max                p.u./hr
2033  *   vUnitCommit, vStartup   #units
2034   
2035      eRampUpLimitUC(B, T,G,S)$( B_SIM(B)
2036                              and G_UC(G)
2037                              and G_RAMP(G) )
2038                      .. vPwrOut(B, T, G, S) - vPwrOut(B, T -- 1, G, S)
2039                          =l=
2040                          pGen(G, 'ramp_max', S)*pGen(G, 'gen_size', S)
2041                              * (vUnitCommit(B,T,G,S) - vStartup(B,T,G,S))
2042                          + min(pGen(G, 'gen_size', S),
2043                                max(pGen(G, 'unit_min', S),
2044                                    pGen(G, 'quick_start', S)*pGen(G, 'gen_size', S),
2045                                    pGen(G, 'ramp_max', S)*pGen(G, 'gen_size', S)
2046                                   )
2047                               )*vStartup(B,T,G,S)
2048                          - pGen(G, 'unit_min', S)*vShutdown(B,T,G,S);
2049   
2050   
2051  * == Downward Ramp Limits with Unit Commitment (eRampDownLimitUC)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 40
"Static Capacity Planning model"
C o m p i l a t i o n


2052  * For UC ramp-down = ramp rate for committed units + shutdowns
2053  *  with shutdowns limited either by min_out or by ramp_rate for new units
2054  *
2055  * Note: We ignore demand block durations and impose this limit between blocks
2056  *
2057  * Units & Scaling:
2058  *   vPwrOut, unit_min       GW
2059  *   gen_size                GW/unit
2060  *   ramp_max                p.u./hr
2061  *   vUnitCommit, vShutDown  #units
2062      eRampDownLimitUC(B, T,G,S)$( B_SIM(B)
2063                                and G_UC(G)
2064                                and G_RAMP(G))
2065                      ..
2066                      vPwrOut(B, T -- 1, G, S) - vPwrOut(B, T, G, S)
2067                      =l=
2068                      pGen(G, 'ramp_max', S)*pGen(G, 'gen_size', S)
2069                          * (vUnitCommit(B,T,G,S) - vStartup(B,T,G,S))
2070                      - pGen(G, 'unit_min', S)*vStartup(B,T,G,S)
2071                      + min(pGen(G, 'gen_size', S),
2072                            max(pGen(G, 'unit_min', S),
2073                                pGen(G, 'ramp_max', S)*pGen(G, 'gen_size', S)
2074                               )
2075                           )*vShutDown(B,T,G,S);
2076   
2077   
2078  * == Upward Ramp Limits for non-Unit-Commitment generators (eRampUpLimit)
2079  * Use total capacity based limits for everything else
2080  * Rather than using the De Jonghe, et al 2011 ramping formulation based on FlexUp and FlexDown
2081  * we use explicit ramping limit relations. We do this b/c FlexUp and FlexDown try to capture
2082  * flexibility _within_ the hour, rather than between hours as in ramping
2083  *
2084  * This equation replaces eq 14 in De Jonghe, et al 2011. Here we simply assume that
2085  * all capacity can contribute to ramping, since a given power out level could be from units
2086  * running under full capacity. This limit exactly matches the UC limit if we assume all non-UC
2087  * units are always running. It can over & under estimate with startup/shutdown.
2088  *
2089  * Note: We ignore demand block durations and impose this limit between blocks
2090  *
2091  * Units & Scaling:
2092  *   vPwrOut, capacity       GW
2093  *   ramp_max, quick_start   p.u./hr
2094  *   pGenAvail               p.u.
2095   
2096      eRampUpLimit(B, T,G,S)$( B_SIM(B)
2097                            and G_RAMP(G)
2098                            and not G_UC(G) ) ..
2099                      vPwrOut(B, T -- 1, G, S) - vPwrOut(B, T, G, S)
2100                      =l=
2101                      max(pGen(G, 'ramp_max', S), pGen(G, 'quick_start', S))
2102                        * ( vCapOffMaint(B, T, G, S) *pGenAvail(B, T, G, S));
2103   
2104  * == Downward Ramp Limits for non-Unit-Commitment generators (eRampDownLimit)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 41
"Static Capacity Planning model"
C o m p i l a t i o n


2105  * Likewise, this equation replaces eq 15 in De Jonghe, et al 2011. Here we simply assume that
2106  * all capacity can contribute to ramping, since a given power out level could be from units
2107  * running under full capacity. This limit exactly matches the UC limit if we assume all non-UC
2108  * units are always running. It can over & under estimate with startup/shutdown.
2109  *
2110  * Units & Scaling:
2111  *   vPwrOut, capacity       GW
2112  *   ramp_max                p.u./hr
2113  *   pGenAvail               p.u.
2114   
2115      eRampDownLimit(B, T,G,S)$( B_SIM(B)
2116                              and G_RAMP(G)
2117                              and not G_UC(G) ) ..
2118                      vPwrOut(B, T -- 1, G, S) - vPwrOut(B, T, G, S)
2119                      =l=
2120                      pGen(G, 'ramp_max', S) * (vCapOffMaint(B, T, G, S)*pGenAvail(B,T,G,S));
2121  $endif.ramp_eq
2122   
2123  *================================*
2124  *        Handle The Data         *
2125  *================================*
2126   
2127  * Read in standard data file set & handle command-line overrides. Including
2128  *  -- sys, gens, demand, fuel, & avail data
2129  *  -- update file
2130  *  -- command-line overrides including: demscale, rps, co2cost, co2cap
2131  *  -- additional options including: force_gen_size, min_gen_size, basic_pmin,
2132  *      uc_ignore_unit_min, avg_avail
2133  * Also computes sub-sets for G_UC, G_RPS, G_WIND, G_RAMP
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/AdvPwrDataRead.gms
2134  $include ../shared/AdvPwrDataRead
2135   
2136  *skip if data is already read (for sequential simulations)
2137  $if set data_has_been_read $goto label_skip_data_read
2138   
2139  *Supress listfile output for includes
14077  $onlisting
14078   
14079  * ===== Additional Command Line Parameters
14080  *override CO2 price with command line setting if provided
14081  $if set co2cost pCostCO2(S)=%co2cost%;
14082   
14083  *override Demand scaling with command line setting if provided
14084  pDemandScale(S)=.15;
14085   
14086  *override RPS level with command line setting if provided
14087  pRPS(S)=0.2;
14088   
14089  *override Carbon Cap (Kt) with command line setting if provided
14090  $if set co2cap pCarbonCap(S)=%co2cap%;
14091   
14092  *override planning margin value if provided a fraction < 100% (no spaces allowed)
14093  $if set plan_margin $if not "%plan_margin%"=="on" $if not "%plan_margin%"=="off" $ife %plan_margin%<1   pPlanReserve=%plan_margin%;
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 42
"Static Capacity Planning model"
C o m p i l a t i o n


14094   
14095  *allow user to specify a uniform gen_size
14096  $if set force_gen_size pGen(G,'gen_size', S) = %force_gen_size%;
14097  *and minimum plant size
14098  $if set min_gen_size pGen(G,'gen_size', S) = max(pGen(G,'gen_size', S), %min_gen_size%);
14099   
14100  *remove p_min value if not used
14101  pGen(G, 'p_min', S) = 0;
14102   
14103  *Zero out capital costs if not used
14104  $if set no_capital pGen(G, 'c_cap', S) = 0;
14105   
14106  *Set derating for maintenance only if requested
14107  $if set derate_to_maint pGen(G, 'derate', S) = 1-pGen(G, 'maint_wks', S)/52;
14108   
14109  *Zero out quickstart fraction of spin/flex reserves when disabled
14110  $if set no_quick_st pQuickStSpinSubFract = 0;
14111   
14112   
14113  *================================*
14114  *    Additional Calculations     *
14115  *================================*
14116  * ====== Calculate subsets
14117  *only include elements where the generator fuel name parameter matches the fuel name parameter
14118  GEN_FUEL_MAP(G, F)$(pGenData(G,'fuel') = pFuelData(F,'name')) = yes;
14119   
14120  *only solve unit commitment for plants with non-zero minimum outputs
14121  $setglobal uc_ignore_unit_min 0
14122  $setglobal uc_int_unit_min 0
14123   
14124  ** Assign gens to unit commitment sets
14125  *start by setting all to not included
14126  G_UC(G) = no;
14127  G_UC_INT(G) = no;
14128   
14129  *then add in if needed, note duplicate code b/c $ifthen doesn't like or
14130  $setglobal unit_commit 1
14131  $ifthen.uc_set set unit_commit
14132  $elseif.uc_on     1 == 1
14133      G_UC(G)$(pGenData(G,'unit_min') > 0) = yes;
14134      G_UC_INT(G)$(G_UC(G) and (pGenData(G,'unit_min') > 0)) = yes;
14135  $endif.uc_on
14136  $endif.uc_set
14137   
14138  *include all wind, solar, and geotherm plants in the RPS standard
14139  acronyms wind, solar, geotherm;
14140  G_RPS(G)$(pGenData(G,'fuel') = wind) = yes;
14141  G_RPS(G)$(pGenData(G,'fuel') = solar) = yes;
14142  G_RPS(G)$(pGenData(G,'fuel') = geotherm) = yes;
14143   
14144  *create set for wind generators (for increased reserve requirements)
14145  G_WIND(G)$(pGenData(G,'fuel') = wind) = yes;
14146   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 43
"Static Capacity Planning model"
C o m p i l a t i o n


14147  *Only worry about ramping for plants with ramp limits < 1
14148  G_RAMP(G)$(pGenData(G,'ramp_max') < 1) = yes;
14149   
14150  *Handle time/demand subsets
14151  * Note: for simple demand subsets to work, three control variables must be defined:
14152  *          d_subset: flag to use subsets, rather than all demand periods
14153  *          d_start:  first demand block to include (an integer)
14154  *          d_end:    last demand block to include (an integer)
14155  $else.d_subset
14156      B_SIM(B) = yes;
14157  $endif.d_subset
14158   
14159   
14160  * ====== Calculate parameters
14161  *Scale demand
14162  pDemand(B, T,'power', S) = pDemandScale(S) * pDemand(B, T,'power', S);
14163   
14164  *compute capital recovery factor (annualized payment for capital investment)
14165  $if declared pCRF
14166  pCRF(G)$(pGenData(G, 'cap_max')) = pWACC/(1-1/( (1 + pWACC)**pGenData(G,'life') ));
14167   
14168  *Remove Wind driven Flex Down constraints if we allow wind shedding. b/c rather than
14169  *ramping thermal down, we could simply shed wind
14170  $endif.rsrv
14171   
14172  * -- Use piecewise linear data for affine parameters if requested
14173  $endif
14174   
14175  *Assign +INF to the cost of non served energy if it is not allowed
14176  pPriceNonServed = +inf;
14177   
14178  display "Generator Data Table after AdvPwrDataRead...";
14179  display pGen;
14180   
14181  $endif.debug_avail
14182   
14183  * ====== Demand period based parameters
14184  parameters
14185  * Additional Parameters that may not have been defined
14186      pGenAvgAvail (G, S)            "average availability (max capacity factor)"
14187   
14188      pTotalDurationHr(S)            "the total time for the demand data in hrs"
14189      pFractionOfYear (S)            "fraction of year covered by the simulation"
14190      pDemandMax(S)                  "maximum demand for scenario [GW]"
14191      pDemandAvg(S)                  "average demand for scenario [GW]"
14192      pBlockDurWk(B, S)              "duration for each block in weeks"
14193  ;
14194   
14195  pTotalDurationHr(S) = sum[(B, T), pDemand(B, T, 'dur', S)];
14196  pFractionOfYear(S) = pTotalDurationHr(S)/8760;
14197  pBlockDurWk(B, S) = sum[(T), pDemand(B, T, 'dur', S)] / 168;
14198   
14199  $endif
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 44
"Static Capacity Planning model"
C o m p i l a t i o n


14200   
14201   
14202  *Find resulting max demand
14203  pDemandMax(S) = smax[(B, T), pDemand(B, T, 'power', S)];
14204  *And resulting average demand
14205  pDemandAvg(S) = sum[(B, T), pDemand(B, T, 'power', S)*pDemand(B, T, 'dur', S)] / pTotalDurationHr(S);
14206   
14207  *Compute average availability for each generator
14208  pGenAvgAvail(G, S) = sum[(B, T), pGenAvail(B, T, G, S)*pDemand(B, T, 'dur', S)] / pTotalDurationHr(S);
14209   
14210   
14211  *Convert time varying to average availabilities if desired
14212  $endif
14213   
14214  * -- Scale annual values based on total simulation time
14215  * max_num of startups
14216  $endif
14217   
14218  $setglobal data_has_been_read
14219  $label label_skip_data_read
14220   
14221   
14222  * ====== Additional Calculations...
14223   
14224  * == Identify generators for piecewise linear approximations
14225  * Start by excluding all generators, which also sets thing properly for the non-pwl_cost case
14226  G_PWL_COST(G) = no;
14227  * Then if pwl_cost is set, we include any generator's that have a non-zero slope or intercept
14228  * for the first segment, and include any segments with non-zero slope or intercepts
14229  $endif
14230   
14231  * == Compute max integers for unit_commitment states
14232  *Note: by default GAMS restricts to the range 0 to 100 so this provides two features:
14233  *  1) allowing for higher integer numbers for small plant types as required for a valid solution
14234  *  2) Restricting the integer search space for larger plants
14235  *Important: For capacity expansion problems, this parameter MUST be changed to account for new plants
14236   
14237  $endif.max_plants
14238   
14239  * ===== Take some initial guesses =====
14240  vNonServed.l(B_SIM, T, S) = 0;
14241   
14242  *================================*
14243  *   Additional Data Processing   *
14244  *================================*
14245   
14246  * Enable $ variables from included model(s) to propagate back to this master file
14247  $onglobal
14248   
14249  * Include water limiting equations and associated parameters and variables
14250  $if set calc_water $include ../shared/WaterDataSetup
14251   
14252  * Disable influence of $ settings from sub-models
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 45
"Static Capacity Planning model"
C o m p i l a t i o n


14253  $offglobal
14254   
14255  *================================*
14256  *       Solve & Related          *
14257  *================================*
14258  *Only run the rest of this file if we are the main function.
14259  $endif.we_are_main
14260   
14261  * Include Planning Margin if required
14262  $if set plan_margin $include ../shared/PlanMarginEquations
14263   
14264  * Water equations included in operations model
14265   
14266  * Disable influence of $ settings from include files
14267  $offglobal
14268   
14269  *================================*
14270  *       The Actual Model         *
14271  *================================*
14272  *====== objective function and components
14273  * == Objective (eObjective)
14274  *
14275  * The standard objective is total cost (see below for alternative objective options). We use
14276  * our definition of this equation whenever we are the main model. Otherwise we expect our caller
14277  * to define a similar objective function.
14278  *
14279  $ifthen.we_are_main   StaticCapPlan == StaticCapPlan
14280  $setglobal obj_var vTotalCost
14281   
14282  eObjective  ..  vObjective =e= sum[(S), pScenWeight(S) * vTotalCost(S)];
14283   
14284  * Allows uniform use of total cost for both operations and planning models
14285  eTotalCost (S)  ..  vTotalCost (S) =e= vOpsCost (S) + vCapitalCost (S);
14286   
14287  $endif.we_are_main
14288   
14289  * == Total Capital Costs (eCapitalCost)
14290  *capital cost = existing+new capacity*annualized cost of capital using capital recovery factor
14291  *
14292  *Note: We can't use %capacity_G% here because we still want to pay the capital costs on old
14293  * capacity even if it is not used.
14294  * Scaling:
14295  *  1x       pGen(c_cap)     M$/GW
14296  *  1x       vCapCost        M$
14297  eCapitalCost(S)  .. vCapitalCost(S) =e= sum[(G), pCRF(G)*(
14298  $ifthen not set fix_cap
14299                                              vNewCapacity(G, S)+
14300  $endif
14301                                              pGen(G,'cap_cur', S))*pGen(G,'c_cap', S)]
14302                                          * pFractionOfYear(S);
14303   
14304  *====== Intermediate Calculations
14305  $ifthen not set fix_cap
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 46
"Static Capacity Planning model"
C o m p i l a t i o n


14306  *introduce a slack variable so we don't get a credit for unused plants which will have negative net
14307  *capacities because vCapInUse < current capacity
14308      ePositiveNew(G, S)  .. vNewCapacity(G, S) =e= vCapInUse(G, S)-pGen(G,'cap_cur',S)
14309  *    + vCapSlack(G,S)
14310      ;
14311   
14312  *Constrain new capacity to integer numbers of plants
14313      eNewPlants(G,S) .. vNewCapacity(G,S) =e= vNumNewPlants(G,S) * pGen(G, 'gen_size',S);
14314  $endif
14315   
14316  $ifthen not set fix_cap
14317      eInstCap(G,S)    .. vCapInUse(G,S) =l= pGen(G,'cap_max',S);
14318  $endif
14319   
14320  *======  Additional Constraints
14321   
14322  *======  Integer Solution helpers (to speed up MIP searching)
14323  $ifthen.skip_lim not set skip_cap_limit
14324  $ifthen.fix_cap not set fix_cap
14325  $endif.plan_marg
14326  $endif.fix_cap
14327  $endif.skip_lim
14328   
14329  *Skip ahead to here on restart
14330  $label skip_redef
14331  *================================*
14332  *        Handle The Data         *
14333  *================================*
14334   
14335  * Data read in by operations model
14336   
14337  * ====== Additional Calculations...
14338   
14339  *Clear out existing capacity when building from scratch
14340  $endif
14341  $endif
14342   
14343  * ====== Compute max integer number of plants & unit_commitment states
14344  *Note: by default GAMS restricts to the range 0 to 100 so this provides two features:
14345  *  1) allowing for higher integer numbers for small plant types as required for a valid solution
14346  *  2) Restricting the integer search space for larger plants
14347  parameter
14348    pMaxNumPlants(G,S)
14349    ;
14350   
14351  * Only compute pMax for non-zero cap_max.
14352    pMaxNumPlants(G,S)$(pGen(G, 'cap_max', S)) =
14353          round((1+.2)
14354              *min(
14355  *bound by max capacity
14356                  floor( pGen(G, 'cap_max',S)/pGen(G, 'gen_size',S) ),
14357  *and use looser of
14358                  max(
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 47
"Static Capacity Planning model"
C o m p i l a t i o n


14359  *peak period cap credit
14360                      ceil(   (pDemandMax(S)
14361  $endif
14362                                  )/ (pGen(G, 'gen_size',S) * pGen(G, 'cap_credit',S) )
14363                          ),
14364  *and average availability vs peak demand
14365                      ceil(   pDemandMax(S)/ (pGen(G, 'gen_size',S) * min(pGenAvgAvail(G,S), pGen(G, 'derate',S) ) )
14366                          )
14367                      )
14368                  )
14369              );
14370   
14371  * Adjust max number of plants for variable renewables (assumed to apply to all renewables)
14372  * By default, assume renewables may compete on their own and supply power for economic reasons
14373  $ifthen.re_lim set renew_lim
14374  $ifthen.lim_type avg==avg
14375  * In this case, we limit new capacity to that capable of supplying the peak demand based on the greater of
14376  * capacity factor and average availability
14377      pMaxNumPlants(G,S)$G_RPS(G) =
14378                  round((1+.2)
14379                      * ceil(   pDemandMax(S)
14380                                  / ( pGen(G, 'gen_size',S) * max(pGen(G, 'cap_credit',S), pGenAvgAvail(G,S)) )
14381                            )
14382                  );
14383  $endif.lim_type
14384  $endif.re_lim
14385   
14386  *list max plant numbers in *.lst file
14387  display pMaxNumPlants;
14388   
14389  *Compute Max new plants by subtracting off existing capacity
14390   vNumNewPlants.up(G,S)$(pGen(G, 'cap_max',S)) = max[0, pMaxNumPlants(G,S) - floor(pGen(G, 'cap_cur',S)/pGen(G, 'gen_size',S))];
14391  *For units that the current capacity is greater than max, no new plants (prevent negatives)
14392   vNumNewPlants.fx(G,S)$(pGen(G, 'cap_cur',S)-pGen(G, 'cap_max',S)>=0) = 0;
14393   
14394  $ifthen set unit_commit
14395      vUcInt.up(B_SIM, T, G_UC, S) = pMaxNumPlants(G_UC, S);
14396  $endif
14397   
14398  $ifthen not set uc_lp
14399      vStartInt.up(B_SIM, T, G_UC, S) = pMaxNumPlants(G_UC, S);
14400      vShutInt.up(B_SIM, T, G_UC, S) = pMaxNumPlants(G_UC, S);
14401  $endif
14402   
14403  $ifthen set maint
14404      vOnMaint.up(B, G, S)$(pGen(G, 'maint_wks', S) > 0) = ceil(0.15 * pMaxNumPlants(G, S));
14405      vMaintBegin.up(B, G, S)$(pGen(G, 'maint_wks', S) > 0) = ceil(0.15 * pMaxNumPlants(G, S));
14406      vMaintEnd.up(B, G, S)$(pGen(G, 'maint_wks', S) > 0) = ceil(0.15 * pMaxNumPlants(G, S));
14407  *Fix maintenance at zero if maintenance not required
14408          vOnMaint.fx(B, G, S)$(pGen(G, 'maint_wks', S) = 0) = 0;
14409      vMaintBegin.fx(B, G, S)$(pGen(G, 'maint_wks', S) = 0) = 0;
14410      vMaintEnd.fx(B, G, S)$(pGen(G, 'maint_wks', S) = 0) = 0;
14411  $endif
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 48
"Static Capacity Planning model"
C o m p i l a t i o n


14412   
14413  * ===== Take some initial guesses =====
14414  if (sum(G_RPS,1) > 0) then
14415      vNewCapacity.l('wind',S) = sum[(B_SIM, T), pDemand(B_SIM, T, 'power',S)*pDemand(B_SIM, T, 'dur',S)]*pRPS(S) - pGen('wind','cap_cur',S);
14416  endif;
14417  * ===== Fix any values we can
14418  $endif
14419   
14420  *================================*
14421  *   Additional Data Processing   *
14422  *================================*
14423   
14424  * Enable $ variables from included model(s) to propagate back to this master file
14425  $onglobal
14426   
14427  * Include water limiting equations and associated parameters and variables
14428  $if set calc_water $include ../shared/WaterDataSetup
14429   
14430  * Disable influence of $ settings from sub-models
14431  $offglobal
14432   
14433  *================================*
14434  *       Solve & Related          *
14435  *================================*
14436  *Only run the rest of this file if we are the main function.
14437  $ifthen.we_are_main StaticCapPlan == StaticCapPlan
14438   
14439  * ======  Setup the model
14440  * Skip this definition if we are doing a restart
14441  $ifthen.scp_model not defined StaticCapPlan
14442      model StaticCapPlan  /all/;
14443   
14444  * ======  Adjust Solver parameters
14445  * Enable/Disable Parallel processing
14446  *By default, use only one thread, since this is often faster for small problems
14447  $setglobal par_threads 1
14448  *Default to barrier b/c typically faster
14449  $setglobal lp_method 4
14450  *Use default probing
14451  $setglobal probe 0
14452   
14453  *Create a solver option file
14454  $onecho > cplex.opt
       * Note: the number of threads can either be specified explicitly or using "0" for use all cores
       threads 1
        
       *Parallel mode. Options:
       * 1=deterministic & repeatable, 0=automatic, -1=opportunistic & non-repeatable 
       parallelmode 1
        
       * Conserve memory when possible... hopefully avoid crashes b/c of memory
       memoryemphasis 1
        
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 49
"Static Capacity Planning model"
C o m p i l a t i o n


       * Declare solution method for pure LP, RMIP, and final MIP solve. 
       *   Options: 0=automatic, 2=Dual Simplex, 4=barrier, 6=concurrent (a race between
       * dual simplex and barrier in parallel)
       *
       * Sometimes barrier is notably faster for operations problems, but more often dual simplex wins
       * Barrier is often better for planning problems
       LPmethod 4
       * Solution method for solving the root MIP node. See description and options for LPmethod above
       startalg 4
       * Solution method for solving sub MIP nodes. See description and options for LPmethod above
       * For some reason, the default (usually dual simplex) is typically better here. 
       *subalg 4
        
       * Tighten LP tolerance (default 1e-6). For problems with objective values close to 1, this 
       * may be necessary to find the true optimal. In particular, with MILP, using the default can 
       * cause the final LP solve to stop short of finding the best node from the MILP branch-and-cut
       * Surprisingly, a tighter tolerance can also achieve FASTER run times for MILP, presumably
       * because the nodes can be compared more carefully.
       epopt 1e-9
        
       * Stay with barrier until the optimal solution is found rather than crossing over to simplex
       * This can run much faster for these problems, because the final simplex iterations can be 
       * slow and b/c the cross-over itself takes a good bit of time. However, the approach is not
       * robust and can fail or be slower than the default behavior. Not recommended with barrier 
       * alone (LPmethod = 4) b/c may not converge. Consider for concurrent optimization.
       *barcrossalg -1
        
       * Ignore small (dual) infeasibilities in the final LP solve. Without this setting, occasionally
       * CPLEX will get unhappy with an infeasibility on the order of 1e-6
       relaxfixedinfeas 1
        
       * Probing: a technique to more fully examine a MIP problem before starting branch-and-cut. Can
       * sometimes dramatically reduce run times. Options: 0=automatic, 1=limited, 2=more, 3=full,
       * -1=off.
       probe 0
       * Limit the probe time to 5min, experience shows the default is typically <=1 sec, so this
       * Will seldom be a big driver
       probetime 300
        
       *enable relative epsilon optimal (cheat) parameter
       *This value is not used if cheat is defined
       relobjdif 0
        
14508  $offecho
14509   
14510  *Tell GAMS to use this option file
14511  StaticCapPlan.optfile = 1;
14512   
14513  * ======  Tune performance with some initial guesses and settings to speed up the solution
14514  $endif.prior_set
14515   
14516  *Note: the following endif is for the $ifthen not the $if
14517  $endif.scp_model
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 50
"Static Capacity Planning model"
C o m p i l a t i o n


14518   
14519  * ====== Check command line options
14520  * Check spelling of command line -- options
14521  * Notes:
14522  *  - all command line options have to have either been used already or be listed
14523  * here to avoid an error. We place it here right before the solve statment such that
14524  * if there is an error, we don't wait till post solution to report the problem
14525  $setddlist ignore_integer summary_only summary_and_power_only memo gdx out_gen_params out_gen_avail out_gen_simple debug_off_maint
14526   
14527  * ======  Actually solve the model
14528  $else
14529       solve StaticCapPlan using MIP minimizing vObjective;
14530  $endif
14531   
14532  *================================*
14533  *         Postprocessing         *
14534  *================================*
14535   
14536  *-- Suppress CSV output if no_csv flag is set
14537  $if "no_csv = 1" $ontext
14538   
14539  * ======  Post processing computations
14540  * Most of these calculations are standardized in ../shared/calcSummary.gms
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/calcSummary.gms
14541  $include ../shared/calcSummary.gms
14542   
14543  $ontext
       ----------------------------------------------------
        Helper script to compute standardized powt-processing summary information for Advanced Power models  
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-07-15  22:00  bpalmintier   extracted from OpsLp.gms
         2  2011-07-20  15:00  bpalmintier   Corrected Renewable shedding calculations
         3  2011-09-22  16:22  bpalmintier   Added mip gap computation
         4  2011-09-28  04:15  bpalmintier   Corrected $if for pMipGap
         5  2011-10-09  12:15  bpalmintier   Added pUcIntEnabled
         6  2012-01-26  15:35  bpalmintier   Added scenario support for stochastic UC, multi-period planning, etc.
         7  2012-02-03  00:15  bpalmintier   Adjusted for carbon emissions by generator
         8  2012-02-18  22:45  bpalmintier   Corrected divide by zero error for startups of unbuilt gens
         9  2012-05-02  10:45  bpalmintier   Separate demand (D) into blocks (B) and time sub-periods (T)
       -----------------------------------------------------
14564  $offtext
14565   
14566  PARAMETERS
14567  pEnergyGen   (G, S)    "Electricity Generation by plant [TWh]"
14568  pEnergyTotal    (S)    "Total electricity Generation for the system [TWh]"
14569  pRenewableShed (B, T, G, S)    "Average Renewable energy shed during period [GWh/hr]"
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 51
"Static Capacity Planning model"
C o m p i l a t i o n


14570  pTotalRenewableShedByGen(G, S)    "Total Renewable energy shed for each generator [GWh]"
14571  pTotalCarbonEmissions(S)        "Total carbon emissions [Kt CO2e]"
14572   
14573  pCapTotal (G, S)       "Total installed capacity [GW]"
14574  pRenewPercent(S)       "Percent of total energy from renewables"
14575  pUcIntEnabled(G)   "Unit Commitment Integer enabled (1), disabled (0), or not unit_commit (na)"
14576  pMipGap "relative Mixed-Integer duality gap"
14577  ;
14578   
14579  $ifthen defined vNewCapacity
14580          pCapTotal(G, S) = vNewCapacity.l(G, S)+pGen(G,'cap_cur', S);
14581  $endif
14582   
14583  *Scale pEnergyGen from GWh to TWh
14584  pEnergyGen(G, S) = sum[(B, T), vPwrOut.l(B, T, G, S)*pDemand(B, T, 'dur', S)]/1e3;
14585  pEnergyTotal(S) = sum[(G), pEnergyGen(G, S)];
14586  pRenewableShed(B, T,G,S)$(G_RPS(G)) = (pCapTotal(G, S)*pGenAvail(B, T, G, S) - vPwrOut.l(B, T, G, S));
14587  pTotalRenewableShedByGen(G, S)$(G_RPS(G)) = sum[(B, T), pRenewableShed(B, T,G,S)*pDemand(B, T, 'dur',S)];
14588  pTotalCarbonEmissions(S) = sum[(G), vCarbonEmissions.l(G, S)];
14589   
14590  pRenewPercent(S) = sum[(G_RPS), pEnergyGen(G_RPS,S)] / pEnergyTotal(S);
14591   
14592  pMipGap = abs((StaticCapPlan.Objval - StaticCapPlan.Objest)/StaticCapPlan.Objval);
14593   
14594  $ifthen set unit_commit
14595  *Identify Unit Commitment State for each generator
14596  * Default to na (not under unit commitment)
14597      pUcIntEnabled(G) = na;
14598  * Set to zero for all gens under unit commitment (including continuous)
14599      pUcIntEnabled(G)$G_UC(G) = 0;
14600  * Finally mark those under integer unit commitment with a 1
14601      pUcIntEnabled(G)$G_UC_INT(G) = 1;
14602  $endif
14603   
14604  $endif
14605   
14606   
14607  * ======  Write Standard Results to CSV files
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/writeResults.gms
14608  $include ../shared/writeResults.gms
14609   
14610  $ontext
       ----------------------------------------------------
         Helper include to write most standard output files for Advanced Power models
         
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          January 2012
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 52
"Static Capacity Planning model"
C o m p i l a t i o n


         1  2012-01-28  02:00 bpalmintier    Extracted from UnitCommit v26
         2  2012-01-28  22:00 bpalmintier    Added gen_simple table
         3  2012-03-07  15:45 bpalmintier    Remove any possible old output files before writting
         4  2012-05-02  10:45  bpalmintier   Separate demand (D) into blocks (B) and time sub-periods (T)
         5  2012-05-04  23:05  bpalmintier   Added maintenance support
         6  2012-08-22  00:15  bpalmintier   Shortened file names, including no more "out_" or "_table"
         7  2012-09-02  12:57  bpalmintier   Added off maintenance debug table
         8  2012-09-06  09:58  bpalmintier   No QuickStart processing with no_quick_st
         8  2012-09-14  15:30  bpalmintier   Added net load down reserves
       -----------------------------------------------------
14632  $offtext
14633   
14634  *Don't display line number and memory use to the logfile/screen for subsequent includes
14635  $offlog
14636   
14637  * ======  Write Results to CSV files
14638  * WARNING: the structure of these output files matters for us with the CapPlanDP code... take
14639  * care when changing
14640   
14641  execute "=rm -f out_sep_14wk_noRsv/SCP_summary.csv"
14642  execute "=rm -f out_sep_14wk_noRsv/SCP_power.csv"
14643  execute "=rm -f out_sep_14wk_noRsv/SCP_uc.csv"
14644  execute "=rm -f out_sep_14wk_noRsv/SCP_spin.csv"
14645  execute "=rm -f out_sep_14wk_noRsv/SCP_reg_up.csv"
14646  execute "=rm -f out_sep_14wk_noRsv/SCP_reg_down.csv"
14647  execute "=rm -f out_sep_14wk_noRsv/SCP_quick_st.csv"
14648  execute "=rm -f out_sep_14wk_noRsv/SCP_flex_up.csv"
14649  execute "=rm -f out_sep_14wk_noRsv/SCP_flex_down.csv"
14650  execute "=rm -f out_sep_14wk_noRsv/SCP_gen_params.csv"
14651  execute "=rm -f out_sep_14wk_noRsv/SCP_gen_type.csv"
14652  execute "=rm -f out_sep_14wk_noRsv/SCP_gen_type_ext.csv"
14653  execute "=rm -f out_sep_14wk_noRsv/SCP_gen_avail.csv"
14654  execute "=rm -f out_sep_14wk_noRsv/SCP_gen_simple.csv"
14655  execute "=rm -f out_sep_14wk_noRsv/SCP_maint.csv"
14656  execute "=rm -f out_sep_14wk_noRsv/SCP_tot_cap.csv"
14657  execute "=rm -f out_sep_14wk_noRsv/SCP_new_plants.csv"
14658  execute "=rm -f out_sep_14wk_noRsv/SCP_new_cap.csv"
14659  execute "=rm -f out_sep_14wk_noRsv/SCP_off_maint.csv"
14660  execute "=rm -f out_sep_14wk_noRsv/SCP_net_lf_down.csv"
14661   
14662  *-- [1] Output solution summary
14663  * file setup
14664  * file has 2 columns: name, data
14665  file fListOut /"out_sep_14wk_noRsv/SCP_summary.csv"/
14666  put fListOut;
14667   
14668  *Set output precision to have 5 places right of the decimal (except for large numbers in scientific format)
14669  fListOut.nd=5;
14670   
14671  *Allow maximum page width to prevent truncation
14672  fListOut.pw=32767;
14673   
14674   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 53
"Static Capacity Planning model"
C o m p i l a t i o n


14675  *Write out summary in standard form
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/writeSummary.gms
14676  $include ../shared/writeSummary.gms
14677   
14678  $ontext
       ----------------------------------------------------
         Helper include to write the standardized output summary put file for Advanced Power models
         
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-07-15  00:45  bpalmintier   Extracted from OpsLp v4
         2  2011-07-15  10:15  bpalmintier   moved solution result (run_*) to caller
         3  2011-08-02  16:05  bpalmintier   Added complete command line option results using writeFlagState
         4  2011-08-07  16:05  bpalmintier   Always write non-served energy
         5  2011-08-17  15:55  bpalmintier   Added water cost
         6  2011-09-22  16:26  bpalmintier   Added Generic solution timing and status information
         7  2011-09-28  04:15  bpalmintier   Corrected $if for pMipGap
         8  2011-10-06  21:55  bpalmintier   Output total duration in hours
         9  2011-10-08  13:55  bpalmintier   New flags: p0_recover, rel_cheat, pwl2afine
        10  2011-10-09  12:15  bpalmintier   Added pUcIntEnabled
        11  2011-10-09  16:15  bpalmintier   Added model size statistics
        12  2011-10-11  14:15  bpalmintier   Renamed plant_size to gen_size (also related flags)
        13  2011-10-14  03:15  bpalmintier   Added gparams include file output
        14  2011-11-10  13:45  bpalmintier   Added no_capital
        15  2012-01-26  15:35  bpalmintier   Updated for scenario (S) support used with stochastic UC, multi-period planning, etc.
        16  2012-01-28  23:05  bpalmintier   Added model_name, scenario weights, and scen_val file information
        17  2012-02-03  00:15  bpalmintier   Adjusted for carbon emissions by generator
        18  2012-02-03  13:35  bpalmintier   Added skip_cap_limit and overbuild
        19  2012-05-02  10:45  bpalmintier   Separate demand (D) into blocks (B) and time sub-periods (T)
        20  2012-05-04  23:05  bpalmintier   Added maintenance support
        21  2012-06-14  15:05  bpalmintier   Added rps & planning margin penalties
        22  2012-08-21  17:15  bpalmintier   Convert plan_margin to value flag
        23  2012-08-21  23:05  bpalmintier   Added maintenance cost
        24  2012-08-21  23:55  bpalmintier   Added retirement
         25 2012-08-22  15:05  bpalmintier   Added priority (B&B tree) option
         26 2012-08-23  13:05  bpalmintier   Added maint_lp to ignore maintenance integers
         27 2012-08-23  14:05  bpalmintier   Added uc_lp
         28 2012-08-24  14:25  bpalmintier   BUGFIX: summary scaling of non-served cost
         29 2012-08-24  15:25  bpalmintier   Rearrange to move energy non-served up
         30 2012-08-31  01:05  bpalmintier   Add rsrv_use_tot_demand
         31 2012-08-31  07:25  bpalmintier   Use adj_rsrv_for_nse instead of rsrv_use_tot_demand
         32 2012-09-02  17:08  bpalmintier   Replace all $set with $setglobal (to prevent scope errors)
         33 2012-09-03  07:08  bpalmintier   Add derate_to_maint
         34 2012-09-06  09:58  bpalmintier   Add no_quick_st, non_uc_rsrv_down_offline and non_uc_rsrv_up_offline
       -----------------------------------------------------
14725  $offtext
14726   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 54
"Static Capacity Planning model"
C o m p i l a t i o n


14727  * file has 2 columns: name, data
14728  * name should include units and be in a MATLAB & MySQL identifier friendly format. That is
14729  * beginning with a letter and only containing alphanumeric characters and underscores (MATLAB)
14730  * format is:
14731  *     name_with_underscore_unit, value
14732   
14733  *========== Model run Summary Data ==========
14734  *- Model Run and Objective Function Information -
14735  $if set model_name
14736      put  "run_model_name,StaticCapPlan" /
14737  $if set obj_var
14738      put  "run_obj_var,vTotalCost" /
14739  $if declared vObjective
14740      put  "run_obj_value," vObjective.l /
14741   
14742  $ifthen set model_name
14743  * Note: this section is only able to be included if we have defined the model_name as a
14744  * control variable, since otherwise we don't know what model was used in the solve statement
14745      put  "run_modstat,"    StaticCapPlan.Tmodstat /
14746      put  "run_solstat,"    StaticCapPlan.Tsolstat /
14747  put  "run_mip_gap,"         pMipGap:0:6 /
14748   
14749  * Solver only time (does not include GAMS generation time, reading solution, and reporting)
14750  * Use this for algorithmic/formulation time comparisons
14751      put  "run_solver_time_sec,"    StaticCapPlan.ETSolver /
14752      put  "run_mip_nodes,"          StaticCapPlan.nodusd /
14753   
14754  $endif
14755   
14756  * print total solution time
14757  put  "run_time_sec," system.elapsed /
14758   
14759  *========== Scenario Dependent Data ==========
14760  * -- Setup our scenario prefix for each scenario dependent output line
14761  $else
14762  * Otherwise leave it blank
14763  $setglobal scen_prefix ''
14764  *Work around for the fact that GAMS does strip outer quotes if the entire string is quoted
14765  $setglobal quote '"'
14766  $endif
14767   
14768  * -- Loop over all scenarios
14769  loop (S) do
14770  * When we have more than one scenario, print it along with explanatory text
14771      if card(S) > 1 then
14772          put "SCENARIO_":0 ord(S):0:0 "," S.te(S):0 " (" S.tl:0 ": weight=" pScenWeight(S):0 ")"/
14773      endif;
14774   
14775  * ---- Cost Data ----
14776  * total cost
14777      put  "cost_total_Musd,"         vTotalCost.l(S)/
14778   
14779  * write cost breakdown
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 55
"Static Capacity Planning model"
C o m p i l a t i o n


14780  $ifthen declared vCapitalCost
14781          put  "cost_capital_Musd,"     vCapitalCost.l(S)/
14782  $endif
14783      put  "cost_ops_Musd,"         vOpsCost.l(S)/
14784      put  "cost_fixedOM_Musd,"     vFixedOMCost.l(S)/
14785      put  "cost_varOM_Musd,"       vVariableOMCost.l(S)/
14786      put  "cost_fuel_Musd,"        vFuelCost.l(S)/
14787      put  "cost_carbon_Musd,"      vCarbonCost.l(S)/
14788  $endif
14789      put  "cost_penalty_Musd,"     vPenaltyCost.l(S)/
14790  $endif
14791  $ifthen set maint
14792      put  "cost_maint_Musd,"       vMaintCost.l(S)/
14793  $endif
14794  $endif
14795   
14796  * ---- Energy/Emissions data ----
14797  * total emissions
14798      put  "CO2e_total_Mt," pTotalCarbonEmissions(S) /
14799   
14800  * carbon_price (use either the value set or the carbon cap constraint dual variable)
14801      put  "CO2e_price_usd_t," (max(-eCarbonCap.m(S), pCostCO2(S)))/
14802   
14803  * total energy
14804      put  "energy_total_TWh,"  pEnergyTotal(S) /
14805   
14806  * average electricity price
14807      put  "avg_price_usd_MWh,"  (vTotalCost.l(S)/pEnergyTotal(S)) /
14808   
14809  * non-served Energy
14810  $else
14811      put  "energy_non_served_GWh, 0"/
14812  $endif
14813   
14814  * energy by plant type
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
14815  $batinclude ../util/put2csv "" "list" pEnergyGen(G,S) G "'energy_TWh_'"
14816   
14987  $onlisting
14988   
14989  $endif
14990  $endif
14991      put  "RPS_target_fraction," pRPS(S) /
14992      put  "renew_fraction," pRenewPercent(S) /
14993   
14994  * report renewable shedding
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
14995  $batinclude ../util/put2csv "" "list" pTotalRenewableShedByGen(G_RPS,S) G_RPS "'shed_GWh_'"
14996   
15167  $onlisting
15168   
15169  * report avg number of starts per plant
15170  $endif
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 56
"Static Capacity Planning model"
C o m p i l a t i o n


15171   
15172  * ---- Additional data ----
15173  * peak demand
15174      put  "demand_max_GW," pDemandMax(S)/
15175      put  "data_dur_hr," pTotalDurationHr(S) /
15176   
15177  $ifthen defined vNewCapacity
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
15178  $batinclude ../util/put2csv "" "list" vNewCapacity.l(G,S) G "'cap_new_GW_'"
15179   
15350  $onlisting
15351  $endif
15352   
15353  * capacity by type
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
15354  $batinclude ../util/put2csv "" "list" pCapTotal(G,S) G "'cap_total_GW_'"
15355   
15526  $onlisting
15527   
15528  * input data
15529      put  "in_CO2e_cost_usd_ton, " pCostCO2(S) /
15530      put  "in_CO2e_cap_Kt, " pCarbonCap(S) /
15531      put  "demand_scale," pDemandScale(S) /
15532   
15533  *End loop over scenarios
15534  endloop;
15535   
15536  *========== Scenario Independent Data ==========
15537  * -- System wide data
15538  put "WACC," pWACC /
15539  put "in_non_served_price_usd_MWh, " pPriceNonServed /
15540  $if declared pPlanReserve
15541   
15542  * -- Data files
15543  put "data_dir, " "../data/" /
15544  put "data_sys, "  "miniE_sys.inc" /
15545  put "data_demand, " "ercot2007_dem_yr_as_14wk.inc" /
15546  put "data_fuel, "   "thesis_fuel.inc" /
15547  put "data_gens, "   "miniE_units_sep.inc" /
15548  put "data_gparams, "   "eia_aeo2011_gen_params.inc" /
15549  put "data_avail, "  "ercot2007_avail.inc" /
15550  $if set scen   put "data_scen, "  "%scen%" /
15551  $if set scen_val   put "data_scen_val, "  "%scen_val%" /
15552  $if set update put "data_update, " "%update%" /
15553   
15554  * -- Additional Generator Data
15555  * ID unit commitment integer state (integer=1, continuous=0, no_uc=na)
15556  $ifthen set unit_commit
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
15557  $batinclude ../util/put2csv "" "list" pUcIntEnabled(G) G "'uc_integer_'"
15558   
15729  $onlisting
15730  $endif
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 57
"Static Capacity Planning model"
C o m p i l a t i o n


15731   
15732  * -- Model Flags
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15733  $batinclude ../shared/writeFlagState startup
15734   
15735  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15769  $offtext
15770   
15771  * Check if we have two parameters
15772  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15773  $if "" == "onoff" $goto onoff_flag
15774  $if "" == "value" $goto value_flag
15775   
15776  * ---- Set/Unset branch
15777  * An set/unset branch is either set of not set
15778  $else.check_set
15779          put "flag_" "startup" ", 0" /
15780  $endif.check_set
15781  *end of set/unset branch
15782  $label end_writeFlagStatus
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 58
"Static Capacity Planning model"
C o m p i l a t i o n


BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15783  $batinclude ../shared/writeFlagState unit_commit "onoff" 1
15784   
15785  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15819  $offtext
15820   
15821  * Check if we have two parameters
15822  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15823  $label onoff_flag
15824  * An on/off branch can be either on or off or set/unset
15825  $ifthen.check_set2 set unit_commit
15826  $elseif.onoff 1==1
15827          put "flag_" "unit_commit" ", 1" /
15828  $endif.onoff
15829  $endif.check_set2
15830  *end of no value branch
15831  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15832  $batinclude ../shared/writeFlagState ramp "onoff" 1
15833   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 59
"Static Capacity Planning model"
C o m p i l a t i o n


15834  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15868  $offtext
15869   
15870  * Check if we have two parameters
15871  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15872  $label onoff_flag
15873  * An on/off branch can be either on or off or set/unset
15874  $ifthen.check_set2 set ramp
15875  $elseif.onoff 1==1
15876          put "flag_" "ramp" ", 1" /
15877  $endif.onoff
15878  $endif.check_set2
15879  *end of no value branch
15880  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15881  $batinclude ../shared/writeFlagState ignore_integer
15882   
15883  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 60
"Static Capacity Planning model"
C o m p i l a t i o n


         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15917  $offtext
15918   
15919  * Check if we have two parameters
15920  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15921  $if "" == "onoff" $goto onoff_flag
15922  $if "" == "value" $goto value_flag
15923   
15924  * ---- Set/Unset branch
15925  * An set/unset branch is either set of not set
15926  $else.check_set
15927          put "flag_" "ignore_integer" ", 0" /
15928  $endif.check_set
15929  *end of set/unset branch
15930  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15931  $batinclude ../shared/writeFlagState uc_lp
15932   
15933  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 61
"Static Capacity Planning model"
C o m p i l a t i o n


        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15967  $offtext
15968   
15969  * Check if we have two parameters
15970  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15971  $if "" == "onoff" $goto onoff_flag
15972  $if "" == "value" $goto value_flag
15973   
15974  * ---- Set/Unset branch
15975  * An set/unset branch is either set of not set
15976  $else.check_set
15977          put "flag_" "uc_lp" ", 0" /
15978  $endif.check_set
15979  *end of set/unset branch
15980  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15981  $batinclude ../shared/writeFlagState avg_avail
15982   
15983  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 62
"Static Capacity Planning model"
C o m p i l a t i o n


         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16017  $offtext
16018   
16019  * Check if we have two parameters
16020  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16021  $if "" == "onoff" $goto onoff_flag
16022  $if "" == "value" $goto value_flag
16023   
16024  * ---- Set/Unset branch
16025  * An set/unset branch is either set of not set
16026  $else.check_set
16027          put "flag_" "avg_avail" ", 0" /
16028  $endif.check_set
16029  *end of set/unset branch
16030  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16031  $batinclude ../shared/writeFlagState ignore_cap_credit
16032   
16033  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 63
"Static Capacity Planning model"
C o m p i l a t i o n


           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16067  $offtext
16068   
16069  * Check if we have two parameters
16070  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16071  $if "" == "onoff" $goto onoff_flag
16072  $if "" == "value" $goto value_flag
16073   
16074  * ---- Set/Unset branch
16075  * An set/unset branch is either set of not set
16076  $else.check_set
16077          put "flag_" "ignore_cap_credit" ", 0" /
16078  $endif.check_set
16079  *end of set/unset branch
16080  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16081  $batinclude ../shared/writeFlagState no_capital "onoff" %no_capital%
16082   
16083  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 64
"Static Capacity Planning model"
C o m p i l a t i o n


         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16117  $offtext
16118   
16119  * Check if we have two parameters
16120  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16121  $label onoff_flag
16122  * An on/off branch can be either on or off or set/unset
16123  $else.check_set2
16124              put "flag_" "no_capital" ", 0" /
16125  $endif.check_set2
16126  *end of no value branch
16127  $label end_writeFlagStatus
16128   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16129  $batinclude ../shared/writeFlagState uc_ignore_unit_min "value" 0
16130   
16131  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 65
"Static Capacity Planning model"
C o m p i l a t i o n


         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16165  $offtext
16166   
16167  * Check if we have two parameters
16168  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16169  $if "value" == "onoff" $goto onoff_flag
16170  $label value_flag
16171  $ifthen set uc_ignore_unit_min
16172  $if "0" == ""
16173  $if not "0" == ""
16174          put "valflag_" "uc_ignore_unit_min" ", 0"  /
16175  $endif
16176   
16177   
16178  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16179  $batinclude ../shared/writeFlagState uc_int_unit_min "value" 0
16180   
16181  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 66
"Static Capacity Planning model"
C o m p i l a t i o n


         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16215  $offtext
16216   
16217  * Check if we have two parameters
16218  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16219  $if "value" == "onoff" $goto onoff_flag
16220  $label value_flag
16221  $ifthen set uc_int_unit_min
16222  $if "0" == ""
16223  $if not "0" == ""
16224          put "valflag_" "uc_int_unit_min" ", 0"  /
16225  $endif
16226   
16227   
16228  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16229  $batinclude ../shared/writeFlagState uc_lp
16230   
16231  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 67
"Static Capacity Planning model"
C o m p i l a t i o n


       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16265  $offtext
16266   
16267  * Check if we have two parameters
16268  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16269  $if "" == "onoff" $goto onoff_flag
16270  $if "" == "value" $goto value_flag
16271   
16272  * ---- Set/Unset branch
16273  * An set/unset branch is either set of not set
16274  $else.check_set
16275          put "flag_" "uc_lp" ", 0" /
16276  $endif.check_set
16277  *end of set/unset branch
16278  $label end_writeFlagStatus
16279   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16280  $batinclude ../shared/writeFlagState rsrv "value" %rsrv%
16281   
16282  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 68
"Static Capacity Planning model"
C o m p i l a t i o n


         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16316  $offtext
16317   
16318  * Check if we have two parameters
16319  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16320  $if "value" == "onoff" $goto onoff_flag
16321  $label value_flag
16322  $else
16323          put "valflag_" "rsrv" ", off" /
16324  $endif
16325   
16326   
16327  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16328  $batinclude ../shared/writeFlagState separate_rsrv
16329   
16330  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 69
"Static Capacity Planning model"
C o m p i l a t i o n


         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16364  $offtext
16365   
16366  * Check if we have two parameters
16367  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16368  $if "" == "onoff" $goto onoff_flag
16369  $if "" == "value" $goto value_flag
16370   
16371  * ---- Set/Unset branch
16372  * An set/unset branch is either set of not set
16373  $else.check_set
16374          put "flag_" "separate_rsrv" ", 0" /
16375  $endif.check_set
16376  *end of set/unset branch
16377  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16378  $batinclude ../shared/writeFlagState flex_rsrv "onoff" %flex_rsrv%
16379   
16380  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 70
"Static Capacity Planning model"
C o m p i l a t i o n


          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16414  $offtext
16415   
16416  * Check if we have two parameters
16417  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16418  $label onoff_flag
16419  * An on/off branch can be either on or off or set/unset
16420  $else.check_set2
16421              put "flag_" "flex_rsrv" ", 0" /
16422  $endif.check_set2
16423  *end of no value branch
16424  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16425  $batinclude ../shared/writeFlagState no_quick_st
16426   
16427  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 71
"Static Capacity Planning model"
C o m p i l a t i o n


         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16461  $offtext
16462   
16463  * Check if we have two parameters
16464  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16465  $if "" == "onoff" $goto onoff_flag
16466  $if "" == "value" $goto value_flag
16467   
16468  * ---- Set/Unset branch
16469  * An set/unset branch is either set of not set
16470  $else.check_set
16471          put "flag_" "no_quick_st" ", 0" /
16472  $endif.check_set
16473  *end of set/unset branch
16474  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16475  $batinclude ../shared/writeFlagState non_uc_rsrv_up_offline "value" %non_uc_rsrv_up_offline%
16476   
16477  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 72
"Static Capacity Planning model"
C o m p i l a t i o n


       -----------------------------------------------------
16511  $offtext
16512   
16513  * Check if we have two parameters
16514  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16515  $if "value" == "onoff" $goto onoff_flag
16516  $label value_flag
16517  $else
16518          put "valflag_" "non_uc_rsrv_up_offline" ", off" /
16519  $endif
16520   
16521   
16522  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16523  $batinclude ../shared/writeFlagState non_uc_rsrv_down_offline "value" %non_uc_rsrv_down_offline%
16524   
16525  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16559  $offtext
16560   
16561  * Check if we have two parameters
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 73
"Static Capacity Planning model"
C o m p i l a t i o n


16562  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16563  $if "value" == "onoff" $goto onoff_flag
16564  $label value_flag
16565  $else
16566          put "valflag_" "non_uc_rsrv_down_offline" ", off" /
16567  $endif
16568   
16569   
16570  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16571  $batinclude ../shared/writeFlagState adj_rsrv_for_nse "onoff" %adj_rsrv_for_nse%
16572   
16573  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16607  $offtext
16608   
16609  * Check if we have two parameters
16610  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16611  $label onoff_flag
16612  * An on/off branch can be either on or off or set/unset
16613  $else.check_set2
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 74
"Static Capacity Planning model"
C o m p i l a t i o n


16614              put "flag_" "adj_rsrv_for_nse" ", 0" /
16615  $endif.check_set2
16616  *end of no value branch
16617  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16618  $batinclude ../shared/writeFlagState rps_penalty "value" %rps_penalty%
16619   
16620  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16654  $offtext
16655   
16656  * Check if we have two parameters
16657  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16658  $if "value" == "onoff" $goto onoff_flag
16659  $label value_flag
16660  $else
16661          put "valflag_" "rps_penalty" ", off" /
16662  $endif
16663   
16664   
16665  $label end_writeFlagStatus
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 75
"Static Capacity Planning model"
C o m p i l a t i o n


BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16666  $batinclude ../shared/writeFlagState force_renewables
16667   
16668  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16702  $offtext
16703   
16704  * Check if we have two parameters
16705  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16706  $if "" == "onoff" $goto onoff_flag
16707  $if "" == "value" $goto value_flag
16708   
16709  * ---- Set/Unset branch
16710  * An set/unset branch is either set of not set
16711  $else.check_set
16712          put "flag_" "force_renewables" ", 0" /
16713  $endif.check_set
16714  *end of set/unset branch
16715  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16716  $batinclude ../shared/writeFlagState fix_cap
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 76
"Static Capacity Planning model"
C o m p i l a t i o n


16717   
16718  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16752  $offtext
16753   
16754  * Check if we have two parameters
16755  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16756  $if "" == "onoff" $goto onoff_flag
16757  $if "" == "value" $goto value_flag
16758   
16759  * ---- Set/Unset branch
16760  * An set/unset branch is either set of not set
16761  $else.check_set
16762          put "flag_" "fix_cap" ", 0" /
16763  $endif.check_set
16764  *end of set/unset branch
16765  $label end_writeFlagStatus
16766   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16767  $batinclude ../shared/writeFlagState max_start
16768   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 77
"Static Capacity Planning model"
C o m p i l a t i o n


16769  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16803  $offtext
16804   
16805  * Check if we have two parameters
16806  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16807  $if "" == "onoff" $goto onoff_flag
16808  $if "" == "value" $goto value_flag
16809   
16810  * ---- Set/Unset branch
16811  * An set/unset branch is either set of not set
16812  $else.check_set
16813          put "flag_" "max_start" ", 0" /
16814  $endif.check_set
16815  *end of set/unset branch
16816  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16817  $batinclude ../shared/writeFlagState min_up_down
16818   
16819  $ontext
       ----------------------------------------------------
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 78
"Static Capacity Planning model"
C o m p i l a t i o n


         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16853  $offtext
16854   
16855  * Check if we have two parameters
16856  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16857  $if "" == "onoff" $goto onoff_flag
16858  $if "" == "value" $goto value_flag
16859   
16860  * ---- Set/Unset branch
16861  * An set/unset branch is either set of not set
16862  $ifthen.check_set set min_up_down
16863          put "flag_" "min_up_down" ", 1" /
16864  $endif.check_set
16865  *end of set/unset branch
16866  $label end_writeFlagStatus
16867   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16868  $batinclude ../shared/writeFlagState pwl_cost
16869   
16870  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 79
"Static Capacity Planning model"
C o m p i l a t i o n


         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16904  $offtext
16905   
16906  * Check if we have two parameters
16907  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16908  $if "" == "onoff" $goto onoff_flag
16909  $if "" == "value" $goto value_flag
16910   
16911  * ---- Set/Unset branch
16912  * An set/unset branch is either set of not set
16913  $else.check_set
16914          put "flag_" "pwl_cost" ", 0" /
16915  $endif.check_set
16916  *end of set/unset branch
16917  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16918  $batinclude ../shared/writeFlagState p0_recover "value" 0.85
16919   
16920  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 80
"Static Capacity Planning model"
C o m p i l a t i o n


        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16954  $offtext
16955   
16956  * Check if we have two parameters
16957  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16958  $if "value" == "onoff" $goto onoff_flag
16959  $label value_flag
16960  $ifthen set p0_recover
16961  $if "0.85" == ""
16962  $if not "0.85" == ""
16963          put "valflag_" "p0_recover" ", 0.85"  /
16964  $endif
16965   
16966   
16967  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16968  $batinclude ../shared/writeFlagState pwl2afine
16969   
16970  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 81
"Static Capacity Planning model"
C o m p i l a t i o n


         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17004  $offtext
17005   
17006  * Check if we have two parameters
17007  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17008  $if "" == "onoff" $goto onoff_flag
17009  $if "" == "value" $goto value_flag
17010   
17011  * ---- Set/Unset branch
17012  * An set/unset branch is either set of not set
17013  $else.check_set
17014          put "flag_" "pwl2afine" ", 0" /
17015  $endif.check_set
17016  *end of set/unset branch
17017  $label end_writeFlagStatus
17018   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17019  $batinclude ../shared/writeFlagState force_gen_size "value" %force_gen_size%
17020   
17021  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 82
"Static Capacity Planning model"
C o m p i l a t i o n


         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17055  $offtext
17056   
17057  * Check if we have two parameters
17058  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17059  $if "value" == "onoff" $goto onoff_flag
17060  $label value_flag
17061  $else
17062          put "valflag_" "force_gen_size" ", off" /
17063  $endif
17064   
17065   
17066  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17067  $batinclude ../shared/writeFlagState min_gen_size "value" %min_gen_size%
17068   
17069  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 83
"Static Capacity Planning model"
C o m p i l a t i o n


       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17103  $offtext
17104   
17105  * Check if we have two parameters
17106  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17107  $if "value" == "onoff" $goto onoff_flag
17108  $label value_flag
17109  $else
17110          put "valflag_" "min_gen_size" ", off" /
17111  $endif
17112   
17113   
17114  $label end_writeFlagStatus
17115   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17116  $batinclude ../shared/writeFlagState derate
17117   
17118  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 84
"Static Capacity Planning model"
C o m p i l a t i o n


         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17152  $offtext
17153   
17154  * Check if we have two parameters
17155  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17156  $if "" == "onoff" $goto onoff_flag
17157  $if "" == "value" $goto value_flag
17158   
17159  * ---- Set/Unset branch
17160  * An set/unset branch is either set of not set
17161  $else.check_set
17162          put "flag_" "derate" ", 0" /
17163  $endif.check_set
17164  *end of set/unset branch
17165  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17166  $batinclude ../shared/writeFlagState derate_to_maint
17167   
17168  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 85
"Static Capacity Planning model"
C o m p i l a t i o n


         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17202  $offtext
17203   
17204  * Check if we have two parameters
17205  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17206  $if "" == "onoff" $goto onoff_flag
17207  $if "" == "value" $goto value_flag
17208   
17209  * ---- Set/Unset branch
17210  * An set/unset branch is either set of not set
17211  $else.check_set
17212          put "flag_" "derate_to_maint" ", 0" /
17213  $endif.check_set
17214  *end of set/unset branch
17215  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17216  $batinclude ../shared/writeFlagState from_scratch
17217   
17218  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 86
"Static Capacity Planning model"
C o m p i l a t i o n


       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17252  $offtext
17253   
17254  * Check if we have two parameters
17255  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17256  $if "" == "onoff" $goto onoff_flag
17257  $if "" == "value" $goto value_flag
17258   
17259  * ---- Set/Unset branch
17260  * An set/unset branch is either set of not set
17261  $else.check_set
17262          put "flag_" "from_scratch" ", 0" /
17263  $endif.check_set
17264  *end of set/unset branch
17265  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17266  $batinclude ../shared/writeFlagState basic_pmin
17267   
17268  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 87
"Static Capacity Planning model"
C o m p i l a t i o n


         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17302  $offtext
17303   
17304  * Check if we have two parameters
17305  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17306  $if "" == "onoff" $goto onoff_flag
17307  $if "" == "value" $goto value_flag
17308   
17309  * ---- Set/Unset branch
17310  * An set/unset branch is either set of not set
17311  $else.check_set
17312          put "flag_" "basic_pmin" ", 0" /
17313  $endif.check_set
17314  *end of set/unset branch
17315  $label end_writeFlagStatus
17316   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17317  $batinclude ../shared/writeFlagState plan_margin "value" %plan_margin%
17318   
17319  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 88
"Static Capacity Planning model"
C o m p i l a t i o n


             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17353  $offtext
17354   
17355  * Check if we have two parameters
17356  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17357  $if "value" == "onoff" $goto onoff_flag
17358  $label value_flag
17359  $else
17360          put "valflag_" "plan_margin" ", off" /
17361  $endif
17362   
17363   
17364  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17365  $batinclude ../shared/writeFlagState plan_margin_penalty "value" %plan_margin_penalty%
17366   
17367  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 89
"Static Capacity Planning model"
C o m p i l a t i o n


          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17401  $offtext
17402   
17403  * Check if we have two parameters
17404  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17405  $if "value" == "onoff" $goto onoff_flag
17406  $label value_flag
17407  $else
17408          put "valflag_" "plan_margin_penalty" ", off" /
17409  $endif
17410   
17411   
17412  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17413  $batinclude ../shared/writeFlagState overbuild
17414   
17415  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 90
"Static Capacity Planning model"
C o m p i l a t i o n


       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17449  $offtext
17450   
17451  * Check if we have two parameters
17452  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17453  $if "" == "onoff" $goto onoff_flag
17454  $if "" == "value" $goto value_flag
17455   
17456  * ---- Set/Unset branch
17457  * An set/unset branch is either set of not set
17458  $ifthen.check_set set overbuild
17459          put "flag_" "overbuild" ", 1" /
17460  $endif.check_set
17461  *end of set/unset branch
17462  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17463  $batinclude ../shared/writeFlagState skip_cap_limit
17464   
17465  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 91
"Static Capacity Planning model"
C o m p i l a t i o n


         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17499  $offtext
17500   
17501  * Check if we have two parameters
17502  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17503  $if "" == "onoff" $goto onoff_flag
17504  $if "" == "value" $goto value_flag
17505   
17506  * ---- Set/Unset branch
17507  * An set/unset branch is either set of not set
17508  $else.check_set
17509          put "flag_" "skip_cap_limit" ", 0" /
17510  $endif.check_set
17511  *end of set/unset branch
17512  $label end_writeFlagStatus
17513   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17514  $batinclude ../shared/writeFlagState maint
17515   
17516  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 92
"Static Capacity Planning model"
C o m p i l a t i o n


       -----------------------------------------------------
17550  $offtext
17551   
17552  * Check if we have two parameters
17553  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17554  $if "" == "onoff" $goto onoff_flag
17555  $if "" == "value" $goto value_flag
17556   
17557  * ---- Set/Unset branch
17558  * An set/unset branch is either set of not set
17559  $ifthen.check_set set maint
17560          put "flag_" "maint" ", 1" /
17561  $endif.check_set
17562  *end of set/unset branch
17563  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17564  $batinclude ../shared/writeFlagState max_maint "value" 0.15
17565   
17566  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17600  $offtext
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 93
"Static Capacity Planning model"
C o m p i l a t i o n


17601   
17602  * Check if we have two parameters
17603  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17604  $if "value" == "onoff" $goto onoff_flag
17605  $label value_flag
17606  $ifthen set max_maint
17607  $if "0.15" == ""
17608  $if not "0.15" == ""
17609          put "valflag_" "max_maint" ", 0.15"  /
17610  $endif
17611   
17612   
17613  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17614  $batinclude ../shared/writeFlagState retire "value" %retire%
17615   
17616  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17650  $offtext
17651   
17652  * Check if we have two parameters
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 94
"Static Capacity Planning model"
C o m p i l a t i o n


17653  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17654  $if "value" == "onoff" $goto onoff_flag
17655  $label value_flag
17656  $else
17657          put "valflag_" "retire" ", off" /
17658  $endif
17659   
17660   
17661  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17662  $batinclude ../shared/writeFlagState maint_lp
17663   
17664  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17698  $offtext
17699   
17700  * Check if we have two parameters
17701  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17702  $if "" == "onoff" $goto onoff_flag
17703  $if "" == "value" $goto value_flag
17704   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 95
"Static Capacity Planning model"
C o m p i l a t i o n


17705  * ---- Set/Unset branch
17706  * An set/unset branch is either set of not set
17707  $else.check_set
17708          put "flag_" "maint_lp" ", 0" /
17709  $endif.check_set
17710  *end of set/unset branch
17711  $label end_writeFlagStatus
17712   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17713  $batinclude ../shared/writeFlagState max_solve_time "value" 10800
17714   
17715  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17749  $offtext
17750   
17751  * Check if we have two parameters
17752  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17753  $if "value" == "onoff" $goto onoff_flag
17754  $label value_flag
17755  $ifthen set max_solve_time
17756  $if "10800" == ""
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 96
"Static Capacity Planning model"
C o m p i l a t i o n


17757  $if not "10800" == ""
17758          put "valflag_" "max_solve_time" ", 10800"  /
17759  $endif
17760   
17761   
17762  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17763  $batinclude ../shared/writeFlagState mip_gap "value" 0.001
17764   
17765  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17799  $offtext
17800   
17801  * Check if we have two parameters
17802  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17803  $if "value" == "onoff" $goto onoff_flag
17804  $label value_flag
17805  $ifthen set mip_gap
17806  $if "0.001" == ""
17807  $if not "0.001" == ""
17808          put "valflag_" "mip_gap" ", 0.001"  /
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 97
"Static Capacity Planning model"
C o m p i l a t i o n


17809  $endif
17810   
17811   
17812  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17813  $batinclude ../shared/writeFlagState par_threads "value" 1
17814   
17815  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17849  $offtext
17850   
17851  * Check if we have two parameters
17852  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17853  $if "value" == "onoff" $goto onoff_flag
17854  $label value_flag
17855  $ifthen set par_threads
17856  $if "1" == ""
17857  $if not "1" == ""
17858          put "valflag_" "par_threads" ", 1"  /
17859  $endif
17860   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 98
"Static Capacity Planning model"
C o m p i l a t i o n


17861   
17862  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17863  $batinclude ../shared/writeFlagState priority "onoff" %priority%
17864   
17865  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17899  $offtext
17900   
17901  * Check if we have two parameters
17902  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17903  $label onoff_flag
17904  * An on/off branch can be either on or off or set/unset
17905  $else.check_set2
17906              put "flag_" "priority" ", 0" /
17907  $endif.check_set2
17908  *end of no value branch
17909  $label end_writeFlagStatus
17910   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17911  $batinclude ../shared/writeFlagState cheat "value" %cheat%
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 23:47:32 Page 99
"Static Capacity Planning model"
C o m p i l a t i o n


17912   
17913  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17947  $offtext
17948   
17949  * Check if we have two parameters
17950  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17951  $if "value" == "onoff" $goto onoff_flag
17952  $label value_flag
17953  $else
17954          put "valflag_" "cheat" ", off" /
17955  $endif
17956   
17957   
17958  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
17959  $batinclude ../shared/writeFlagState rel_cheat "value" 0
17960   
17961  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 100
"Static Capacity Planning model"
C o m p i l a t i o n


         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
17995  $offtext
17996   
17997  * Check if we have two parameters
17998  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
17999  $if "value" == "onoff" $goto onoff_flag
18000  $label value_flag
18001  $ifthen set rel_cheat
18002  $if "0" == ""
18003  $if not "0" == ""
18004          put "valflag_" "rel_cheat" ", 0"  /
18005  $endif
18006   
18007   
18008  $label end_writeFlagStatus
18009   
18010  *========== Model Extras ==========
18011  $if set calc_water $include ../shared/writeWaterSummary
18012   
18013  *========== Final Notes ==========
18014  * -- Model statistics
18015  $ifthen set model_name
18016      put  "model_num_eq,"    StaticCapPlan.numequ:0:0 /
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 101
"Static Capacity Planning model"
C o m p i l a t i o n


18017      put  "model_num_var,"   StaticCapPlan.numvar:0:0 /
18018      put  "model_num_discrete_var,"   StaticCapPlan.numdvar:0:0 /
18019      put  "model_num_nonzero,"   StaticCapPlan.numnz:0:0 /
18020  $endif
18021   
18022  * -- Memo field if provided
18023  $if set memo put "memo, "  "%memo%" /
18024   
18025  *And include any additional model dependant variables
18026  *  -- None --
18027   
18028  *close our file
18029  putclose
18030   
18031  $if set summary_only $goto skip_non_summary
18032  *-- [2] Output Power Out (dispatch) data as a 2-D table
18033  *One scenario case
18034  $ifthen.one_scen not set scen
18035      parameter
18036          pPwrOut(B, T,G)
18037          ;
18038  *Use smax to extract single set element
18039          pPwrOut(B, T,G) = smax[S, vPwrOut.l(B, T,G,S)];
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
18040  $batinclude ../util/put2csv "out_sep_14wk_noRsv/SCP_power.csv" "table" pPwrOut(B,T,G) B.T G
18041   
18247  $onlisting
18248  *Multiple scenario case
18249  $endif.one_scen
18250   
18251  $if set summary_and_power_only $goto skip_non_summary
18252  *-- [4] Output Unit Commitment States data as a 2-D table
18253  *One scenario case
18254  $ifthen.one_scen not set scen
18255      parameter
18256          pUnitCommit(B, T,G)
18257          ;
18258  *Use smax to extract single set element
18259          pUnitCommit(B, T,G) = smax[S, vUnitCommit.l(B, T,G,S)];
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
18260  $batinclude ../util/put2csv "out_sep_14wk_noRsv/SCP_uc.csv" "table" pUnitCommit(B,T,G) B.T G
18261   
18467  $onlisting
18468  *Multiple scenario case
18469  $endif.one_scen
18470   
18471  *-- [5] If using operating reserves, output set of files with associated data
18472  $endif.sep_r
18473   
18474  *-- [6] Output files with flexibility reserve data
18475  $endif
18476   
18477  *-- [7] Output files with generator input parameters
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 102
"Static Capacity Planning model"
C o m p i l a t i o n


18478  *= Output Generator Parameter Table
18479  $endif.gen_param
18480   
18481   
18482  *-- [8] Output files with generator input parameters
18483  *= Output Generator Availability Table
18484  $endif
18485   
18486  *-- [9] Output simplified generator parameter table
18487  *= Output Generator Fix & Var Cost Table
18488  $endif.g_simple
18489   
18490  *-- [10] Output Maintenance plan as a 2-D table
18491  *One scenario case
18492  $ifthen.maint set maint
18493  $ifthen.one_scen not set scen
18494      parameter
18495          pMaint(B, G)
18496          ;
18497  *Use smax to extract single set element
18498          pMaint(B, G) = smax[S, vOnMaint.l(B, G,S)];
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
18499  $batinclude ../util/put2csv "out_sep_14wk_noRsv/SCP_maint.csv" "table" pMaint(B,G) B G
18500   
18706  $onlisting
18707  *Multiple scenario case
18708  $endif.one_scen
18709   
18710  *-- [11] Capacity off maintenance debug
18711  *One scenario case
18712  $endif.off_maint
18713   
18714  $endif.maint
18715   
18716  $label skip_non_summary
18717   
18718  $if set summary_and_power_only $goto skip_non_summary
18719  *-- [3] Output List of Total installed generation by type
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
18720  $batinclude ../util/put2csv "out_sep_14wk_noRsv/SCP_tot_cap.csv" "table" pCapTotal(G,S) G S
18721   
18927  $onlisting
18928   
18929  *-- [4] Output List of New plants by type
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
18930  $batinclude ../util/put2csv "out_sep_14wk_noRsv/SCP_new_plants.csv" "table" vNumNewPlants.l(G,S) G S
18931   
19137  $onlisting
19138   
19139  *-- [5] Output List of New capacity by type
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
19140  $batinclude ../util/put2csv "out_sep_14wk_noRsv/SCP_new_cap.csv" "table" vNewCapacity.l(G,S) G S
19141   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 103
"Static Capacity Planning model"
C o m p i l a t i o n


19347  $onlisting
19348   
19349   
19350  $label skip_non_summary
19351  *-- end of output suppression when no_csv flag is set
19352  $if "no_csv = 1" $offtext
19353   
19354  $if set gdx execute_unload 'out_sep_14wk_noRsv/SCP_solve.gdx'
19355   
19356  * Write value of all control variables to the list file (search for Environment Report)
---- Begin of Environment Report
LEVEL TYPE         LINE  FILE NAME
----------------------------------
    0 INPUT         960  /Users/bpalmint/repos/advpower/models/capplan/StaticCapPlan.gms

Level SetVal                          Type       Text
-----------------------------------------------------
    0 sys                             SCOPED     miniE_sys.inc
    0 demscale                        SCOPED     .15
    0 unit_commit                     SCOPED     1
    0 ramp                            SCOPED     1
    0 maint                           SCOPED     1
    0 rps                             SCOPED     0.2
    0 min_up_down                     SCOPED     1
    0 no_nse                          SCOPED     1
    0 gens                            SCOPED     miniE_units_sep.inc
    0 demand                          SCOPED     ercot2007_dem_yr_as_14wk.inc
    0 out_dir                         SCOPED     out_sep_14wk_noRsv/
    0 filesep                         GLOBAL     /
    0 shared_dir                      GLOBAL     ../shared/
    0 mip_gap                         GLOBAL     0.001
    0 max_solve_time                  GLOBAL     10800
    0 rel_cheat                       GLOBAL     0
    0 par_mode                        GLOBAL     1
    0 no_csv                          GLOBAL     0
    0 data_dir                        GLOBAL     ../data/
    0 util_dir                        GLOBAL     ../util/
    0 setup_complete                  GLOBAL     
    0 model_name                      GLOBAL     StaticCapPlan
    0 use_mip                         GLOBAL     yes
    0 ops_model                       GLOBAL     UnitCommit
    0 out_prefix                      GLOBAL     SCP_
    0 overbuild                       GLOBAL     .2
    0 renew_overbuild                 GLOBAL     .2
    0 renew_lim                       GLOBAL     avg
    0 capacity_G                      GLOBAL     vCapOffMaint(B, T, G, S)
    0 cap_for_plan_margin             GLOBAL     vCapInUse(G, S)
    0 max_cap_G                       GLOBAL     vCapInUse(G, S)
    0 compute_state                   GLOBAL     1
    0 p0_recover                      GLOBAL     0.85
    0 max_maint                       GLOBAL     0.15
    0 fuel                            GLOBAL     thesis_fuel.inc
    0 gparams                         GLOBAL     eia_aeo2011_gen_params.inc
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 104
"Static Capacity Planning model"
C o m p i l a t i o n


    0 avail                           GLOBAL     ercot2007_avail.inc
    0 gen_type_data_defined           GLOBAL     
    0 maint_om_fract                  GLOBAL     0.5
    0 uc_ignore_unit_min              GLOBAL     0
    0 uc_int_unit_min                 GLOBAL     0
    0 unit_commit                     GLOBAL     1
    0 data_has_been_read              GLOBAL     
    0 obj_var                         GLOBAL     vTotalCost
    0 par_threads                     GLOBAL     1
    0 lp_method                       GLOBAL     4
    0 probe                           GLOBAL     0
    0 scen_prefix                     GLOBAL     
    0 quote                           GLOBAL     "
---- macro definitions
$macro mDemShift(d_set,shift)  d_set -- shift
$macro mDelFile(fname)  execute "=rm -f &&fname"
---- End of Environment Report
19357  $show
19358   
19359  $endif.we_are_main
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 105
"Static Capacity Planning model"
Symbol Listing


SETS      

AVAIL_MAP     
B             Demand blocks (e.g. weeks or ldc)
B_SIM         demand blocks used in simulation
DEM_PARAMS    demand block table parameters from load duration curve
D_AVAIL       time blocks for wind data... assumed to be a superset of the demand timeseries
F             fuel types
FUEL_PARAMS   fuel table parameters
G             generation types (or generator list)
GEN_FUEL_MAP  map for generator fuel types
GEN_PARAMS    generation table parameters
GEN_TYPE      generation type
G_OM_Maint    Subset of gens to divide fixed O&M costs among maint_wks
G_PWL_COST    Generators for which to use multi-segment piecewise linear fuel use
G_RAMP        Generators for which to enforce ramping limits
G_RPS         Generators included in the Renewable Portfolio Standard
G_UC          Generators to compute continuous or discrete unit commitment state and constraints
G_UC_INT      Generators with integer on/off values for unit commitment
G_WIND        Wind generators (for reserve requirements)
HR_SEG        piece-wise linear fuel use segments (slope=heatrate)
PWL_COEF      Coefficients for piecewise linear representation
PWL_COST_SEG  Valid piece-wise linear segments
S             scenarios for multi-period and stochastic problems
SameAs        Set Element Comparison Without Checking
T             Demand time sub-periods (e.g. hours or ldc sub-blocks)

ACRONYMS  

coal          
coal_bit      
coal_igcc     
coal_igcc_ccs 
coal_lig      
coal_lig_st   
coal_sub      
coal_sub_st   
coal_sub_st_ccs 
geotherm      
ng            
ng_cc         
ng_cc_ccs     
ng_gt         
ng_gt_aero    
ng_st         
pv_dist       
pv_util       
solar         
u235          
u235_st       
water         
wind          
wind_off      
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 106
"Static Capacity Planning model"
Symbol Listing


PARAMETERS

pBlockDurWk   duration for each block in weeks
pCapTotal     Total installed capacity [GW]
pCarbonCap    max annual CO2 emissions                                            [Mt CO2e]
pCostCO2      cost of carbon (in terms of CO2 equivalent)                         [$/t-CO2eq = M$/Mt]
pCRF          capital recovery factors      [/yr]
pDemand       table of demand data
pDemandAvg    average demand for scenario [GW]
pDemandData   Demand data
pDemandMax    Maximum demand level          [GW]
pDemandScale  factor by which to scale demand
pEnergyGen    Electricity Generation by plant [TWh]
pEnergyTotal  Total electricity Generation for the system [TWh]
pFractionOfYear fraction of year covered by the simulation
pFuel         table of fuel data
pFuelData     Fuels Data Table
pGen          table of generator data
pGenAvail     table of time dependent generator availability
pGenAvailData Complete long-term availability data
pGenAvgAvail  average availability (max capacity factor)
pGenData      Generation Data Table
pGenDefaults  Generation Defaults Data Table
pMaint        
pMaxNumPlants upper bound on number of plants for unit commitment
pMipGap       relative Mixed-Integer duality gap
pPriceNonServed Cost of non-served energy                                           [$/MWh]
pPwrOut       
pRenewableShed Average Renewable energy shed during period [GWh/hr]
pRenewPercent Percent of total energy from renewables
pRPS          fraction of energy from wind                                        [p.u.]
pScenWeight   Scenario weighting for cost calcs. Use for probability or time discounting
pTotalCarbonEmissions Total carbon emissions [Kt CO2e]
pTotalDurationHr the total time for the demand data in hrs
pTotalRenewableShedByGen Total Renewable energy shed for each generator [GWh]
pUcIntEnabled Unit Commitment Integer enabled (1), disabled (0), or not unit_commit (na)
pUnitCommit   
pWACC         weighted average cost of capital (utility investment discount rate) [p.u.]

VARIABLES 

vCapInUse     total installed capacity that is used [GW]
vCapitalCost  annualized capital costs of new capacity     [M$]
vCapOffMaint  Quantity of capacity available off maintenance [GW]
vCarbonCost   cost of all carbon emissions                 [M$]
vCarbonEmissions carbon from operations + fraction embedded   [Mt-CO2e]
vFixedOMCost  fixed O&M costs in target year               [M$]
vFuelCost     total fuel costs in target year              [M$]
vFuelUse      fuel usage by generator & type           [BTUe12]
vInstantFuel  instantaneous fuel use by gen per period [BTUe9/hr]
vMaintBegin   Number of units starting maintenance during the block [integer]
vMaintCost    Total maintenance cost for scenario
vMaintEnd     Number of units finishing maintenance during the block [integer]
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 107
"Static Capacity Planning model"
Symbol Listing


VARIABLES 

vNewCapacity  new capacity constructed              [GW]
vNonServed    non-served demand                        [GW]
vNumNewPlants number of discrete new plants to construct         [integer]
vObjective    Objective: scenario weighted average (EV or discounted ops cost)  [M$]
vOnMaint      Number of units on maintenance in a block
vOpsCost      system operations cost in target year        [M$]
vPenaltyCost  rps and plan_margin penalty costs            [M$]
vPwrOut       production of the unit                   [GW]
vShutDown     number of units of each type that shuts down during each period  [continuous]
vShutInt      integer match to vShutDown for members of G_INT_UC [integer]
vStartInt     integer match to vStartUp for members of G_INT_UC [integer]
vStartUp      number of units of each type that starts up during each period  [continuous]
vTotalCost    total system cost for scenario               [M$]
vUCInt        integer match to vUnitCommit for members of G_INT_UC [integer]
vUnitCommit   number of units of each gen type on-line during period     [continuous]
vVariableOMCost variable O&M costs in target year            [M$]

EQUATIONS 

eCapitalCost  annualized capital cost of new capacity      [M$]
eCapOffMaint  Compute resulting capacity available for dispatch
eCarbonCap    Limit total emissions                                    [Mt-CO2e]
eCarbonCost   cost of all carbon emissions                 [M$]
eCarbonEmissions carbon from operations + fraction embedded   [Mt-CO2e]
eDemand       output must equal demand                           [GW]
eFixedOMCost  system fixed O&Mcosts for one year           [M$]
eFuelCost     system fuel costs for one year               [M$]
eFuelUse      fuel usage by type                           [quad = BTUe15]
eInstantFuelByGen fuel use by gen and demand period       [BTUe9/hr]
eInstCap      installed capacity                    [GW]
eMaintCost    Compute total maintenance cost for scenario
eMaintMax     Limit quantity of each gen type on maintenance simultaneously
eMaintState   Compute maintenance begin and end
eMaintTime    Sum total maintenance over the time horizon
eMinDownTime  
eMinUpTime    
eNewPlants    integer constraints on new capacity investment
eObjective    Objective function: scenario weighted average (EV or discounted ops cost)  [M$]
eOpsCost      system operations cost for one year of operation  [M$]
ePenaltyCost  rps and plan_margin penalty costs                   [M$]
ePositiveNew  prevent negative net new capacities w slack variable.
ePwrMax       output w/o reserves lower than available max       [GW]
ePwrMaxUC     output w/o reserves lower than committed max       [GW]
ePwrMin       output w/o reserves greater than installed min     [GW]
ePwrMinUC     output w/o reserves greater than committed min     [GW]
eRampDownLimit Limit period to period ramp down rates
eRampDownLimitUC Limit period to period ramp down for integer commited plants
eRampUpLimit  Limit period to period ramp up rates
eRampUpLimitUC Limit period to period ramp up rates for integer commited plants
eRPS          RPS Standard: minimum energy percent from renewables     [p.u.]
eShutDownInteger Integerization for unit shutdown
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 108
"Static Capacity Planning model"
Symbol Listing


EQUATIONS 

eStartUpInteger Integerization for unit startup
eState        compute unit commitment startup and shutdowns           [integer]
eTotalCost    total cost = ops + capital cos            [M$]
eTotalMaint   Sum total maintenance over the time horizon
eUnitCommit   can only commit up to the installed number of units     [continous]
eUnitCommitInteger Integerization for unit commitment
eVarOMCost    system variable O&M costs for one year       [M$]

MODELS    

StaticCapPlan 

FILES     

fListOut      
SCP_maint     
SCP_new_cap   
SCP_new_plants 
SCP_power     
SCP_tot_cap   
SCP_uc        

MACROS    

mDelFile      
mDemShift     
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 109
"Static Capacity Planning model"
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  /Users/bpalmint/repos/advpower/models/capplan/StaticCapPlan.gms
     2      423 INCLUDE        1     426  ./Users/bpalmint/repos/advpower/models/shared/AdvPwrSetup.gms
     3      710 INCLUDE        1     589  ./Users/bpalmint/repos/advpower/models/ops/UnitCommit.gms
     4     1074 INCLUDE        3     367  ../Users/bpalmint/repos/advpower/models/shared/AdvPwrSetup.gms
     5     1337 INCLUDE        3     672  ../Users/bpalmint/repos/advpower/models/shared/MaintenanceEquations.gms
     6     1493 INCLUDE        3     682  ../Users/bpalmint/repos/advpower/models/shared/MinUpDownEquations.gms
     7     2134 INCLUDE        3    1219  ../Users/bpalmint/repos/advpower/models/shared/AdvPwrDataRead.gms
     8     2298 INCLUDE        7     167  .../Users/bpalmint/repos/advpower/models/data/miniE_sys.inc
     9     2408 INCLUDE        7     172  .../Users/bpalmint/repos/advpower/models/data/thesis_fuel.inc
    10     2466 INCLUDE        7     173  .../Users/bpalmint/repos/advpower/models/data/ercot2007_dem_yr_as_14wk.inc
    11     4878 INCLUDE        7     175  .../Users/bpalmint/repos/advpower/models/data/miniE_units_sep.inc
    12     5033 INCLUDE        7     180  .../Users/bpalmint/repos/advpower/models/data/eia_aeo2011_gen_params.inc
    13     5231 INCLUDE        7     227  .../Users/bpalmint/repos/advpower/models/data/ercot2007_avail.inc
    14    14541 INCLUDE        1     937  ./Users/bpalmint/repos/advpower/models/shared/calcSummary.gms
    15    14608 INCLUDE        1     940  ./Users/bpalmint/repos/advpower/models/shared/writeResults.gms
    16    14676 INCLUDE       15      68  ../Users/bpalmint/repos/advpower/models/shared/writeSummary.gms
    17    14815 BATINCLUDE    16     154  .../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    18    14995 BATINCLUDE    16     166  .../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    19    15178 BATINCLUDE    16     179  .../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    20    15354 BATINCLUDE    16     183  .../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    21    15557 BATINCLUDE    16     215  .../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    22    15733 BATINCLUDE    16     219  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    23    15783 BATINCLUDE    16     220  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    24    15832 BATINCLUDE    16     221  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    25    15881 BATINCLUDE    16     222  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    26    15931 BATINCLUDE    16     223  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    27    15981 BATINCLUDE    16     224  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    28    16031 BATINCLUDE    16     225  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    29    16081 BATINCLUDE    16     226  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    30    16129 BATINCLUDE    16     228  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    31    16179 BATINCLUDE    16     229  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    32    16229 BATINCLUDE    16     230  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    33    16280 BATINCLUDE    16     232  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    34    16328 BATINCLUDE    16     233  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    35    16378 BATINCLUDE    16     234  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    36    16425 BATINCLUDE    16     235  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    37    16475 BATINCLUDE    16     236  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    38    16523 BATINCLUDE    16     237  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    39    16571 BATINCLUDE    16     238  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    40    16618 BATINCLUDE    16     239  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    41    16666 BATINCLUDE    16     240  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    42    16716 BATINCLUDE    16     241  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    43    16767 BATINCLUDE    16     243  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    44    16817 BATINCLUDE    16     244  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    45    16868 BATINCLUDE    16     246  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    46    16918 BATINCLUDE    16     247  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    47    16968 BATINCLUDE    16     248  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    48    17019 BATINCLUDE    16     250  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    49    17067 BATINCLUDE    16     251  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    50    17116 BATINCLUDE    16     253  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    51    17166 BATINCLUDE    16     254  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 110
"Static Capacity Planning model"
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

    52    17216 BATINCLUDE    16     255  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    53    17266 BATINCLUDE    16     256  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    54    17317 BATINCLUDE    16     258  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    55    17365 BATINCLUDE    16     259  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    56    17413 BATINCLUDE    16     260  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    57    17463 BATINCLUDE    16     261  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    58    17514 BATINCLUDE    16     263  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    59    17564 BATINCLUDE    16     264  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    60    17614 BATINCLUDE    16     265  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    61    17662 BATINCLUDE    16     266  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    62    17713 BATINCLUDE    16     268  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    63    17763 BATINCLUDE    16     269  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    64    17813 BATINCLUDE    16     270  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    65    17863 BATINCLUDE    16     271  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    66    17911 BATINCLUDE    16     273  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    67    17959 BATINCLUDE    16     274  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    68    18040 BATINCLUDE    15      85  ../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    69    18260 BATINCLUDE    15     100  ../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    70    18499 BATINCLUDE    15     315  ../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    71    18720 BATINCLUDE     1     944  ./Users/bpalmint/repos/advpower/models/util/put2csv.gms
    72    18930 BATINCLUDE     1     947  ./Users/bpalmint/repos/advpower/models/util/put2csv.gms
    73    19140 BATINCLUDE     1     950  ./Users/bpalmint/repos/advpower/models/util/put2csv.gms


COMPILATION TIME     =        0.061 SECONDS      5 MB  24.4.6 r52609 DEX-DEG
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 111
"Static Capacity Planning model"
E x e c u t i o n


----  14178 Generator Data Table after AdvPwrDataRead...

----  14179 PARAMETER pGen  table of generator data

                                                            onlyS

wind                                   .cap_credit          0.105
wind                                   .c_cap            2438.000
wind                                   .life               20.000
wind                                   .cap_cur             0.400
wind                                   .cap_max             5.000
wind                                   .lead_time           4.500
wind                                   .gen_size            0.200
wind                                   .derate              1.000
wind                                   .c_fix_om           28.070
wind                                   .heatrate            1.000
wind                                   .fuel                 wind
wind                                   .ramp_max            1.000
wind                                   .max_start            +INF
wind                                   .max_cap_fact        1.000
wind                                   .type                 wind
wind                                   .extended_type        wind
Arthur_Von_Rosenberg_Combined          .cap_credit          1.000
Arthur_Von_Rosenberg_Combined          .c_cap            1003.000
Arthur_Von_Rosenberg_Combined          .life               30.000
Arthur_Von_Rosenberg_Combined          .cap_cur             0.550
Arthur_Von_Rosenberg_Combined          .cap_max             0.550
Arthur_Von_Rosenberg_Combined          .lead_time           4.500
Arthur_Von_Rosenberg_Combined          .gen_size            0.550
Arthur_Von_Rosenberg_Combined          .derate              0.890
Arthur_Von_Rosenberg_Combined          .c_var_om            3.110
Arthur_Von_Rosenberg_Combined          .c_fix_om            7.310
Arthur_Von_Rosenberg_Combined          .heatrate            7.499
Arthur_Von_Rosenberg_Combined          .fuel                   ng
Arthur_Von_Rosenberg_Combined          .ramp_max            1.000
Arthur_Von_Rosenberg_Combined          .unit_min            0.165
Arthur_Von_Rosenberg_Combined          .c_start_fix         9.251
Arthur_Von_Rosenberg_Combined          .fuel_start          0.589
Arthur_Von_Rosenberg_Combined          .reg_up              0.008
Arthur_Von_Rosenberg_Combined          .reg_down            0.008
Arthur_Von_Rosenberg_Combined          .spin_rsv            0.170
Arthur_Von_Rosenberg_Combined          .max_start         365.000
Arthur_Von_Rosenberg_Combined          .max_cap_fact        0.890
Arthur_Von_Rosenberg_Combined          .maint_wks           3.000
Arthur_Von_Rosenberg_Combined          .c_maint_wk          2.437
Arthur_Von_Rosenberg_Combined          .min_up              6.000
Arthur_Von_Rosenberg_Combined          .min_down           12.000
Arthur_Von_Rosenberg_Combined          .type                ng_cc
Arthur_Von_Rosenberg_Combined          .extended_type       ng_cc
Arthur_Von_Rosenberg_Combined          .unit_min_pu         0.300
Arthur_Von_Rosenberg_Combined          .efor                0.060
Arthur_Von_Rosenberg_Combined          .repair_hr          32.000
Bastrop_Combined                       .cap_credit          1.000
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 112
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

Bastrop_Combined                       .c_cap            1003.000
Bastrop_Combined                       .life               30.000
Bastrop_Combined                       .cap_cur             0.728
Bastrop_Combined                       .cap_max             0.728
Bastrop_Combined                       .lead_time           4.500
Bastrop_Combined                       .gen_size            0.728
Bastrop_Combined                       .derate              0.890
Bastrop_Combined                       .c_var_om            3.110
Bastrop_Combined                       .c_fix_om            7.310
Bastrop_Combined                       .heatrate            7.845
Bastrop_Combined                       .fuel                   ng
Bastrop_Combined                       .ramp_max            1.000
Bastrop_Combined                       .unit_min            0.218
Bastrop_Combined                       .c_start_fix         9.251
Bastrop_Combined                       .fuel_start          0.589
Bastrop_Combined                       .reg_up              0.008
Bastrop_Combined                       .reg_down            0.008
Bastrop_Combined                       .spin_rsv            0.170
Bastrop_Combined                       .max_start         365.000
Bastrop_Combined                       .max_cap_fact        0.890
Bastrop_Combined                       .maint_wks           3.000
Bastrop_Combined                       .c_maint_wk          2.437
Bastrop_Combined                       .min_up              6.000
Bastrop_Combined                       .min_down           12.000
Bastrop_Combined                       .type                ng_cc
Bastrop_Combined                       .extended_type       ng_cc
Bastrop_Combined                       .unit_min_pu         0.300
Bastrop_Combined                       .efor                0.060
Bastrop_Combined                       .repair_hr          32.000
Bosque_County_Peaking_GT_1             .cap_credit          0.950
Bosque_County_Peaking_GT_1             .c_cap             665.000
Bosque_County_Peaking_GT_1             .life               30.000
Bosque_County_Peaking_GT_1             .cap_cur             0.154
Bosque_County_Peaking_GT_1             .cap_max             0.154
Bosque_County_Peaking_GT_1             .lead_time           2.750
Bosque_County_Peaking_GT_1             .gen_size            0.154
Bosque_County_Peaking_GT_1             .derate              0.910
Bosque_County_Peaking_GT_1             .c_var_om            9.870
Bosque_County_Peaking_GT_1             .c_fix_om            3.350
Bosque_County_Peaking_GT_1             .heatrate            7.639
Bosque_County_Peaking_GT_1             .fuel                   ng
Bosque_County_Peaking_GT_1             .ramp_max            6.000
Bosque_County_Peaking_GT_1             .unit_min            0.039
Bosque_County_Peaking_GT_1             .c_start_fix         7.811
Bosque_County_Peaking_GT_1             .fuel_start          0.188
Bosque_County_Peaking_GT_1             .reg_up              0.050
Bosque_County_Peaking_GT_1             .reg_down            0.050
Bosque_County_Peaking_GT_1             .spin_rsv            1.000
Bosque_County_Peaking_GT_1             .max_start            +INF
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 113
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

Bosque_County_Peaking_GT_1             .max_cap_fact        0.910
Bosque_County_Peaking_GT_1             .maint_wks           2.000
Bosque_County_Peaking_GT_1             .c_maint_wk          1.675
Bosque_County_Peaking_GT_1             .type                ng_gt
Bosque_County_Peaking_GT_1             .extended_type       ng_gt
Bosque_County_Peaking_GT_1             .unit_min_pu         0.250
Bosque_County_Peaking_GT_1             .efor                0.050
Bosque_County_Peaking_GT_1             .repair_hr          88.000
Bosque_County_Peaking_GT_2             .cap_credit          0.950
Bosque_County_Peaking_GT_2             .c_cap             665.000
Bosque_County_Peaking_GT_2             .life               30.000
Bosque_County_Peaking_GT_2             .cap_cur             0.154
Bosque_County_Peaking_GT_2             .cap_max             0.154
Bosque_County_Peaking_GT_2             .lead_time           2.750
Bosque_County_Peaking_GT_2             .gen_size            0.154
Bosque_County_Peaking_GT_2             .derate              0.910
Bosque_County_Peaking_GT_2             .c_var_om            9.870
Bosque_County_Peaking_GT_2             .c_fix_om            3.350
Bosque_County_Peaking_GT_2             .heatrate            7.639
Bosque_County_Peaking_GT_2             .fuel                   ng
Bosque_County_Peaking_GT_2             .ramp_max            6.000
Bosque_County_Peaking_GT_2             .unit_min            0.039
Bosque_County_Peaking_GT_2             .c_start_fix         7.811
Bosque_County_Peaking_GT_2             .fuel_start          0.188
Bosque_County_Peaking_GT_2             .reg_up              0.050
Bosque_County_Peaking_GT_2             .reg_down            0.050
Bosque_County_Peaking_GT_2             .spin_rsv            1.000
Bosque_County_Peaking_GT_2             .max_start            +INF
Bosque_County_Peaking_GT_2             .max_cap_fact        0.910
Bosque_County_Peaking_GT_2             .maint_wks           2.000
Bosque_County_Peaking_GT_2             .c_maint_wk          1.675
Bosque_County_Peaking_GT_2             .type                ng_gt
Bosque_County_Peaking_GT_2             .extended_type       ng_gt
Bosque_County_Peaking_GT_2             .unit_min_pu         0.250
Bosque_County_Peaking_GT_2             .efor                0.050
Bosque_County_Peaking_GT_2             .repair_hr          88.000
Bosque_County_Peaking_Units3to5_Combo  .cap_credit          1.000
Bosque_County_Peaking_Units3to5_Combo  .c_cap            1003.000
Bosque_County_Peaking_Units3to5_Combo  .life               30.000
Bosque_County_Peaking_Units3to5_Combo  .cap_cur             0.499
Bosque_County_Peaking_Units3to5_Combo  .cap_max             0.499
Bosque_County_Peaking_Units3to5_Combo  .lead_time           4.500
Bosque_County_Peaking_Units3to5_Combo  .gen_size            0.499
Bosque_County_Peaking_Units3to5_Combo  .derate              0.890
Bosque_County_Peaking_Units3to5_Combo  .c_var_om            3.110
Bosque_County_Peaking_Units3to5_Combo  .c_fix_om            7.310
Bosque_County_Peaking_Units3to5_Combo  .heatrate            7.639
Bosque_County_Peaking_Units3to5_Combo  .fuel                   ng
Bosque_County_Peaking_Units3to5_Combo  .ramp_max            1.000
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 114
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

Bosque_County_Peaking_Units3to5_Combo  .unit_min            0.150
Bosque_County_Peaking_Units3to5_Combo  .c_start_fix         9.251
Bosque_County_Peaking_Units3to5_Combo  .fuel_start          0.589
Bosque_County_Peaking_Units3to5_Combo  .reg_up              0.008
Bosque_County_Peaking_Units3to5_Combo  .reg_down            0.008
Bosque_County_Peaking_Units3to5_Combo  .spin_rsv            0.170
Bosque_County_Peaking_Units3to5_Combo  .max_start         365.000
Bosque_County_Peaking_Units3to5_Combo  .max_cap_fact        0.890
Bosque_County_Peaking_Units3to5_Combo  .maint_wks           3.000
Bosque_County_Peaking_Units3to5_Combo  .c_maint_wk          2.437
Bosque_County_Peaking_Units3to5_Combo  .min_up              6.000
Bosque_County_Peaking_Units3to5_Combo  .min_down           12.000
Bosque_County_Peaking_Units3to5_Combo  .type                ng_cc
Bosque_County_Peaking_Units3to5_Combo  .extended_type       ng_cc
Bosque_County_Peaking_Units3to5_Combo  .unit_min_pu         0.300
Bosque_County_Peaking_Units3to5_Combo  .efor                0.060
Bosque_County_Peaking_Units3to5_Combo  .repair_hr          32.000
Brazoz_Valley_Generating_Facility_Combo.cap_credit          1.000
Brazoz_Valley_Generating_Facility_Combo.c_cap            1003.000
Brazoz_Valley_Generating_Facility_Combo.life               30.000
Brazoz_Valley_Generating_Facility_Combo.cap_cur             0.676
Brazoz_Valley_Generating_Facility_Combo.cap_max             0.676
Brazoz_Valley_Generating_Facility_Combo.lead_time           4.500
Brazoz_Valley_Generating_Facility_Combo.gen_size            0.676
Brazoz_Valley_Generating_Facility_Combo.derate              0.890
Brazoz_Valley_Generating_Facility_Combo.c_var_om            3.110
Brazoz_Valley_Generating_Facility_Combo.c_fix_om            7.310
Brazoz_Valley_Generating_Facility_Combo.heatrate            7.462
Brazoz_Valley_Generating_Facility_Combo.fuel                   ng
Brazoz_Valley_Generating_Facility_Combo.ramp_max            1.000
Brazoz_Valley_Generating_Facility_Combo.unit_min            0.203
Brazoz_Valley_Generating_Facility_Combo.c_start_fix         9.251
Brazoz_Valley_Generating_Facility_Combo.fuel_start          0.589
Brazoz_Valley_Generating_Facility_Combo.reg_up              0.008
Brazoz_Valley_Generating_Facility_Combo.reg_down            0.008
Brazoz_Valley_Generating_Facility_Combo.spin_rsv            0.170
Brazoz_Valley_Generating_Facility_Combo.max_start         365.000
Brazoz_Valley_Generating_Facility_Combo.max_cap_fact        0.890
Brazoz_Valley_Generating_Facility_Combo.maint_wks           3.000
Brazoz_Valley_Generating_Facility_Combo.c_maint_wk          2.437
Brazoz_Valley_Generating_Facility_Combo.min_up              6.000
Brazoz_Valley_Generating_Facility_Combo.min_down           12.000
Brazoz_Valley_Generating_Facility_Combo.type                ng_cc
Brazoz_Valley_Generating_Facility_Combo.extended_type       ng_cc
Brazoz_Valley_Generating_Facility_Combo.unit_min_pu         0.300
Brazoz_Valley_Generating_Facility_Combo.efor                0.060
Brazoz_Valley_Generating_Facility_Combo.repair_hr          32.000
Coleto_Creek_1                         .cap_credit          0.930
Coleto_Creek_1                         .c_cap            2844.000
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 115
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

Coleto_Creek_1                         .life               30.000
Coleto_Creek_1                         .cap_cur             0.600
Coleto_Creek_1                         .cap_max             0.600
Coleto_Creek_1                         .lead_time           7.000
Coleto_Creek_1                         .gen_size            0.600
Coleto_Creek_1                         .derate              0.850
Coleto_Creek_1                         .c_var_om            4.250
Coleto_Creek_1                         .c_fix_om           14.835
Coleto_Creek_1                         .heatrate           10.133
Coleto_Creek_1                         .fuel             coal_sub
Coleto_Creek_1                         .ramp_max            0.300
Coleto_Creek_1                         .unit_min            0.300
Coleto_Creek_1                         .c_start_fix         3.581
Coleto_Creek_1                         .fuel_start          2.602
Coleto_Creek_1                         .reg_up              0.003
Coleto_Creek_1                         .reg_down            0.003
Coleto_Creek_1                         .spin_rsv            0.050
Coleto_Creek_1                         .max_start         104.000
Coleto_Creek_1                         .max_cap_fact        0.850
Coleto_Creek_1                         .maint_wks           5.000
Coleto_Creek_1                         .c_maint_wk          2.967
Coleto_Creek_1                         .min_up             24.000
Coleto_Creek_1                         .min_down           12.000
Coleto_Creek_1                         .type          coal_sub_st
Coleto_Creek_1                         .extended_type coal_sub_st
Coleto_Creek_1                         .unit_min_pu         0.500
Coleto_Creek_1                         .efor                0.070
Coleto_Creek_1                         .repair_hr          40.000
Colorado_Bend_Energy_Center_Combined_1 .cap_credit          1.000
Colorado_Bend_Energy_Center_Combined_1 .c_cap            1003.000
Colorado_Bend_Energy_Center_Combined_1 .life               30.000
Colorado_Bend_Energy_Center_Combined_1 .cap_cur             0.278
Colorado_Bend_Energy_Center_Combined_1 .cap_max             0.278
Colorado_Bend_Energy_Center_Combined_1 .lead_time           4.500
Colorado_Bend_Energy_Center_Combined_1 .gen_size            0.278
Colorado_Bend_Energy_Center_Combined_1 .derate              0.890
Colorado_Bend_Energy_Center_Combined_1 .c_var_om            3.110
Colorado_Bend_Energy_Center_Combined_1 .c_fix_om            7.310
Colorado_Bend_Energy_Center_Combined_1 .heatrate            7.386
Colorado_Bend_Energy_Center_Combined_1 .fuel                   ng
Colorado_Bend_Energy_Center_Combined_1 .ramp_max            1.000
Colorado_Bend_Energy_Center_Combined_1 .unit_min            0.083
Colorado_Bend_Energy_Center_Combined_1 .c_start_fix         9.251
Colorado_Bend_Energy_Center_Combined_1 .fuel_start          0.589
Colorado_Bend_Energy_Center_Combined_1 .reg_up              0.008
Colorado_Bend_Energy_Center_Combined_1 .reg_down            0.008
Colorado_Bend_Energy_Center_Combined_1 .spin_rsv            0.170
Colorado_Bend_Energy_Center_Combined_1 .max_start         365.000
Colorado_Bend_Energy_Center_Combined_1 .max_cap_fact        0.890
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 116
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

Colorado_Bend_Energy_Center_Combined_1 .maint_wks           3.000
Colorado_Bend_Energy_Center_Combined_1 .c_maint_wk          2.437
Colorado_Bend_Energy_Center_Combined_1 .min_up              6.000
Colorado_Bend_Energy_Center_Combined_1 .min_down           12.000
Colorado_Bend_Energy_Center_Combined_1 .type                ng_cc
Colorado_Bend_Energy_Center_Combined_1 .extended_type       ng_cc
Colorado_Bend_Energy_Center_Combined_1 .unit_min_pu         0.300
Colorado_Bend_Energy_Center_Combined_1 .efor                0.060
Colorado_Bend_Energy_Center_Combined_1 .repair_hr          32.000
Colorado_Bend_Energy_Center_Combined_2 .cap_credit          1.000
Colorado_Bend_Energy_Center_Combined_2 .c_cap            1003.000
Colorado_Bend_Energy_Center_Combined_2 .life               30.000
Colorado_Bend_Energy_Center_Combined_2 .cap_cur             0.278
Colorado_Bend_Energy_Center_Combined_2 .cap_max             0.278
Colorado_Bend_Energy_Center_Combined_2 .lead_time           4.500
Colorado_Bend_Energy_Center_Combined_2 .gen_size            0.278
Colorado_Bend_Energy_Center_Combined_2 .derate              0.890
Colorado_Bend_Energy_Center_Combined_2 .c_var_om            3.110
Colorado_Bend_Energy_Center_Combined_2 .c_fix_om            7.310
Colorado_Bend_Energy_Center_Combined_2 .heatrate            7.386
Colorado_Bend_Energy_Center_Combined_2 .fuel                   ng
Colorado_Bend_Energy_Center_Combined_2 .ramp_max            1.000
Colorado_Bend_Energy_Center_Combined_2 .unit_min            0.083
Colorado_Bend_Energy_Center_Combined_2 .c_start_fix         9.251
Colorado_Bend_Energy_Center_Combined_2 .fuel_start          0.589
Colorado_Bend_Energy_Center_Combined_2 .reg_up              0.008
Colorado_Bend_Energy_Center_Combined_2 .reg_down            0.008
Colorado_Bend_Energy_Center_Combined_2 .spin_rsv            0.170
Colorado_Bend_Energy_Center_Combined_2 .max_start         365.000
Colorado_Bend_Energy_Center_Combined_2 .max_cap_fact        0.890
Colorado_Bend_Energy_Center_Combined_2 .maint_wks           3.000
Colorado_Bend_Energy_Center_Combined_2 .c_maint_wk          2.437
Colorado_Bend_Energy_Center_Combined_2 .min_up              6.000
Colorado_Bend_Energy_Center_Combined_2 .min_down           12.000
Colorado_Bend_Energy_Center_Combined_2 .type                ng_cc
Colorado_Bend_Energy_Center_Combined_2 .extended_type       ng_cc
Colorado_Bend_Energy_Center_Combined_2 .unit_min_pu         0.300
Colorado_Bend_Energy_Center_Combined_2 .efor                0.060
Colorado_Bend_Energy_Center_Combined_2 .repair_hr          32.000
DeCordova_Steam_Electric_Station_CT4   .cap_credit          0.950
DeCordova_Steam_Electric_Station_CT4   .c_cap             665.000
DeCordova_Steam_Electric_Station_CT4   .life               30.000
DeCordova_Steam_Electric_Station_CT4   .cap_cur             0.089
DeCordova_Steam_Electric_Station_CT4   .cap_max             0.089
DeCordova_Steam_Electric_Station_CT4   .lead_time           2.750
DeCordova_Steam_Electric_Station_CT4   .gen_size            0.089
DeCordova_Steam_Electric_Station_CT4   .derate              0.910
DeCordova_Steam_Electric_Station_CT4   .c_var_om            9.870
DeCordova_Steam_Electric_Station_CT4   .c_fix_om            3.350
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 117
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

DeCordova_Steam_Electric_Station_CT4   .heatrate           12.147
DeCordova_Steam_Electric_Station_CT4   .fuel                   ng
DeCordova_Steam_Electric_Station_CT4   .ramp_max            6.000
DeCordova_Steam_Electric_Station_CT4   .unit_min            0.022
DeCordova_Steam_Electric_Station_CT4   .c_start_fix         7.811
DeCordova_Steam_Electric_Station_CT4   .fuel_start          0.188
DeCordova_Steam_Electric_Station_CT4   .reg_up              0.050
DeCordova_Steam_Electric_Station_CT4   .reg_down            0.050
DeCordova_Steam_Electric_Station_CT4   .spin_rsv            1.000
DeCordova_Steam_Electric_Station_CT4   .max_start            +INF
DeCordova_Steam_Electric_Station_CT4   .max_cap_fact        0.910
DeCordova_Steam_Electric_Station_CT4   .maint_wks           2.000
DeCordova_Steam_Electric_Station_CT4   .c_maint_wk          1.675
DeCordova_Steam_Electric_Station_CT4   .type                ng_gt
DeCordova_Steam_Electric_Station_CT4   .extended_type       ng_gt
DeCordova_Steam_Electric_Station_CT4   .unit_min_pu         0.250
DeCordova_Steam_Electric_Station_CT4   .efor                0.050
DeCordova_Steam_Electric_Station_CT4   .repair_hr          88.000
Ennis_Power_Company_Combined           .cap_credit          1.000
Ennis_Power_Company_Combined           .c_cap            1003.000
Ennis_Power_Company_Combined           .life               30.000
Ennis_Power_Company_Combined           .cap_cur             0.418
Ennis_Power_Company_Combined           .cap_max             0.418
Ennis_Power_Company_Combined           .lead_time           4.500
Ennis_Power_Company_Combined           .gen_size            0.418
Ennis_Power_Company_Combined           .derate              0.890
Ennis_Power_Company_Combined           .c_var_om            3.110
Ennis_Power_Company_Combined           .c_fix_om            7.310
Ennis_Power_Company_Combined           .heatrate            7.361
Ennis_Power_Company_Combined           .fuel                   ng
Ennis_Power_Company_Combined           .ramp_max            1.000
Ennis_Power_Company_Combined           .unit_min            0.125
Ennis_Power_Company_Combined           .c_start_fix         9.251
Ennis_Power_Company_Combined           .fuel_start          0.589
Ennis_Power_Company_Combined           .reg_up              0.008
Ennis_Power_Company_Combined           .reg_down            0.008
Ennis_Power_Company_Combined           .spin_rsv            0.170
Ennis_Power_Company_Combined           .max_start         365.000
Ennis_Power_Company_Combined           .max_cap_fact        0.890
Ennis_Power_Company_Combined           .maint_wks           3.000
Ennis_Power_Company_Combined           .c_maint_wk          2.437
Ennis_Power_Company_Combined           .min_up              6.000
Ennis_Power_Company_Combined           .min_down           12.000
Ennis_Power_Company_Combined           .type                ng_cc
Ennis_Power_Company_Combined           .extended_type       ng_cc
Ennis_Power_Company_Combined           .unit_min_pu         0.300
Ennis_Power_Company_Combined           .efor                0.060
Ennis_Power_Company_Combined           .repair_hr          32.000
Fayette_Power_Project_1                .cap_credit          0.930
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 118
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

Fayette_Power_Project_1                .c_cap            2844.000
Fayette_Power_Project_1                .life               30.000
Fayette_Power_Project_1                .cap_cur             0.615
Fayette_Power_Project_1                .cap_max             0.615
Fayette_Power_Project_1                .lead_time           7.000
Fayette_Power_Project_1                .gen_size            0.615
Fayette_Power_Project_1                .derate              0.850
Fayette_Power_Project_1                .c_var_om            4.250
Fayette_Power_Project_1                .c_fix_om           14.835
Fayette_Power_Project_1                .heatrate           10.679
Fayette_Power_Project_1                .fuel             coal_sub
Fayette_Power_Project_1                .ramp_max            0.300
Fayette_Power_Project_1                .unit_min            0.308
Fayette_Power_Project_1                .c_start_fix         3.581
Fayette_Power_Project_1                .fuel_start          2.602
Fayette_Power_Project_1                .reg_up              0.003
Fayette_Power_Project_1                .reg_down            0.003
Fayette_Power_Project_1                .spin_rsv            0.050
Fayette_Power_Project_1                .max_start         104.000
Fayette_Power_Project_1                .max_cap_fact        0.850
Fayette_Power_Project_1                .maint_wks           5.000
Fayette_Power_Project_1                .c_maint_wk          2.967
Fayette_Power_Project_1                .min_up             24.000
Fayette_Power_Project_1                .min_down           12.000
Fayette_Power_Project_1                .type          coal_sub_st
Fayette_Power_Project_1                .extended_type coal_sub_st
Fayette_Power_Project_1                .unit_min_pu         0.500
Fayette_Power_Project_1                .efor                0.070
Fayette_Power_Project_1                .repair_hr          40.000
Fayette_Power_Project_2                .cap_credit          0.930
Fayette_Power_Project_2                .c_cap            2844.000
Fayette_Power_Project_2                .life               30.000
Fayette_Power_Project_2                .cap_cur             0.615
Fayette_Power_Project_2                .cap_max             0.615
Fayette_Power_Project_2                .lead_time           7.000
Fayette_Power_Project_2                .gen_size            0.615
Fayette_Power_Project_2                .derate              0.850
Fayette_Power_Project_2                .c_var_om            4.250
Fayette_Power_Project_2                .c_fix_om           14.835
Fayette_Power_Project_2                .heatrate           10.679
Fayette_Power_Project_2                .fuel             coal_sub
Fayette_Power_Project_2                .ramp_max            0.300
Fayette_Power_Project_2                .unit_min            0.308
Fayette_Power_Project_2                .c_start_fix         3.581
Fayette_Power_Project_2                .fuel_start          2.602
Fayette_Power_Project_2                .reg_up              0.003
Fayette_Power_Project_2                .reg_down            0.003
Fayette_Power_Project_2                .spin_rsv            0.050
Fayette_Power_Project_2                .max_start         104.000
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 119
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

Fayette_Power_Project_2                .max_cap_fact        0.850
Fayette_Power_Project_2                .maint_wks           5.000
Fayette_Power_Project_2                .c_maint_wk          2.967
Fayette_Power_Project_2                .min_up             24.000
Fayette_Power_Project_2                .min_down           12.000
Fayette_Power_Project_2                .type          coal_sub_st
Fayette_Power_Project_2                .extended_type coal_sub_st
Fayette_Power_Project_2                .unit_min_pu         0.500
Fayette_Power_Project_2                .efor                0.070
Fayette_Power_Project_2                .repair_hr          40.000
Fayette_Power_Project_3                .cap_credit          0.930
Fayette_Power_Project_3                .c_cap            2844.000
Fayette_Power_Project_3                .life               30.000
Fayette_Power_Project_3                .cap_cur             0.460
Fayette_Power_Project_3                .cap_max             0.460
Fayette_Power_Project_3                .lead_time           7.000
Fayette_Power_Project_3                .gen_size            0.460
Fayette_Power_Project_3                .derate              0.850
Fayette_Power_Project_3                .c_var_om            4.250
Fayette_Power_Project_3                .c_fix_om           14.835
Fayette_Power_Project_3                .heatrate           10.679
Fayette_Power_Project_3                .fuel             coal_sub
Fayette_Power_Project_3                .ramp_max            0.300
Fayette_Power_Project_3                .unit_min            0.230
Fayette_Power_Project_3                .c_start_fix         3.581
Fayette_Power_Project_3                .fuel_start          2.602
Fayette_Power_Project_3                .reg_up              0.003
Fayette_Power_Project_3                .reg_down            0.003
Fayette_Power_Project_3                .spin_rsv            0.050
Fayette_Power_Project_3                .max_start         104.000
Fayette_Power_Project_3                .max_cap_fact        0.850
Fayette_Power_Project_3                .maint_wks           5.000
Fayette_Power_Project_3                .c_maint_wk          2.967
Fayette_Power_Project_3                .min_up             24.000
Fayette_Power_Project_3                .min_down           12.000
Fayette_Power_Project_3                .type          coal_sub_st
Fayette_Power_Project_3                .extended_type coal_sub_st
Fayette_Power_Project_3                .unit_min_pu         0.500
Fayette_Power_Project_3                .efor                0.070
Fayette_Power_Project_3                .repair_hr          40.000
Permian_Basin_CT2                      .cap_credit          0.950
Permian_Basin_CT2                      .c_cap             665.000
Permian_Basin_CT2                      .life               30.000
Permian_Basin_CT2                      .cap_cur             0.089
Permian_Basin_CT2                      .cap_max             0.089
Permian_Basin_CT2                      .lead_time           2.750
Permian_Basin_CT2                      .gen_size            0.089
Permian_Basin_CT2                      .derate              0.910
Permian_Basin_CT2                      .c_var_om            9.870
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 120
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

Permian_Basin_CT2                      .c_fix_om            3.350
Permian_Basin_CT2                      .heatrate           13.750
Permian_Basin_CT2                      .fuel                   ng
Permian_Basin_CT2                      .ramp_max            6.000
Permian_Basin_CT2                      .unit_min            0.022
Permian_Basin_CT2                      .c_start_fix         7.811
Permian_Basin_CT2                      .fuel_start          0.188
Permian_Basin_CT2                      .reg_up              0.050
Permian_Basin_CT2                      .reg_down            0.050
Permian_Basin_CT2                      .spin_rsv            1.000
Permian_Basin_CT2                      .max_start            +INF
Permian_Basin_CT2                      .max_cap_fact        0.910
Permian_Basin_CT2                      .maint_wks           2.000
Permian_Basin_CT2                      .c_maint_wk          1.675
Permian_Basin_CT2                      .type                ng_gt
Permian_Basin_CT2                      .extended_type       ng_gt
Permian_Basin_CT2                      .unit_min_pu         0.250
Permian_Basin_CT2                      .efor                0.050
Permian_Basin_CT2                      .repair_hr          88.000
Permian_Basin_CT3                      .cap_credit          0.950
Permian_Basin_CT3                      .c_cap             665.000
Permian_Basin_CT3                      .life               30.000
Permian_Basin_CT3                      .cap_cur             0.089
Permian_Basin_CT3                      .cap_max             0.089
Permian_Basin_CT3                      .lead_time           2.750
Permian_Basin_CT3                      .gen_size            0.089
Permian_Basin_CT3                      .derate              0.910
Permian_Basin_CT3                      .c_var_om            9.870
Permian_Basin_CT3                      .c_fix_om            3.350
Permian_Basin_CT3                      .heatrate           13.750
Permian_Basin_CT3                      .fuel                   ng
Permian_Basin_CT3                      .ramp_max            6.000
Permian_Basin_CT3                      .unit_min            0.022
Permian_Basin_CT3                      .c_start_fix         7.811
Permian_Basin_CT3                      .fuel_start          0.188
Permian_Basin_CT3                      .reg_up              0.050
Permian_Basin_CT3                      .reg_down            0.050
Permian_Basin_CT3                      .spin_rsv            1.000
Permian_Basin_CT3                      .max_start            +INF
Permian_Basin_CT3                      .max_cap_fact        0.910
Permian_Basin_CT3                      .maint_wks           2.000
Permian_Basin_CT3                      .c_maint_wk          1.675
Permian_Basin_CT3                      .type                ng_gt
Permian_Basin_CT3                      .extended_type       ng_gt
Permian_Basin_CT3                      .unit_min_pu         0.250
Permian_Basin_CT3                      .efor                0.050
Permian_Basin_CT3                      .repair_hr          88.000
R_W_Miller_4                           .cap_credit          0.950
R_W_Miller_4                           .c_cap             665.000
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 121
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

R_W_Miller_4                           .life               30.000
R_W_Miller_4                           .cap_cur             0.119
R_W_Miller_4                           .cap_max             0.119
R_W_Miller_4                           .lead_time           2.750
R_W_Miller_4                           .gen_size            0.119
R_W_Miller_4                           .derate              0.910
R_W_Miller_4                           .c_var_om            9.870
R_W_Miller_4                           .c_fix_om            3.350
R_W_Miller_4                           .heatrate           12.666
R_W_Miller_4                           .fuel                   ng
R_W_Miller_4                           .ramp_max            6.000
R_W_Miller_4                           .unit_min            0.030
R_W_Miller_4                           .c_start_fix         7.811
R_W_Miller_4                           .fuel_start          0.188
R_W_Miller_4                           .reg_up              0.050
R_W_Miller_4                           .reg_down            0.050
R_W_Miller_4                           .spin_rsv            1.000
R_W_Miller_4                           .max_start            +INF
R_W_Miller_4                           .max_cap_fact        0.910
R_W_Miller_4                           .maint_wks           2.000
R_W_Miller_4                           .c_maint_wk          1.675
R_W_Miller_4                           .type                ng_gt
R_W_Miller_4                           .extended_type       ng_gt
R_W_Miller_4                           .unit_min_pu         0.250
R_W_Miller_4                           .efor                0.050
R_W_Miller_4                           .repair_hr          88.000
R_W_Miller_5                           .cap_credit          0.950
R_W_Miller_5                           .c_cap             665.000
R_W_Miller_5                           .life               30.000
R_W_Miller_5                           .cap_cur             0.119
R_W_Miller_5                           .cap_max             0.119
R_W_Miller_5                           .lead_time           2.750
R_W_Miller_5                           .gen_size            0.119
R_W_Miller_5                           .derate              0.910
R_W_Miller_5                           .c_var_om            9.870
R_W_Miller_5                           .c_fix_om            3.350
R_W_Miller_5                           .heatrate           12.666
R_W_Miller_5                           .fuel                   ng
R_W_Miller_5                           .ramp_max            6.000
R_W_Miller_5                           .unit_min            0.030
R_W_Miller_5                           .c_start_fix         7.811
R_W_Miller_5                           .fuel_start          0.188
R_W_Miller_5                           .reg_up              0.050
R_W_Miller_5                           .reg_down            0.050
R_W_Miller_5                           .spin_rsv            1.000
R_W_Miller_5                           .max_start            +INF
R_W_Miller_5                           .max_cap_fact        0.910
R_W_Miller_5                           .maint_wks           2.000
R_W_Miller_5                           .c_maint_wk          1.675
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 122
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

R_W_Miller_5                           .type                ng_gt
R_W_Miller_5                           .extended_type       ng_gt
R_W_Miller_5                           .unit_min_pu         0.250
R_W_Miller_5                           .efor                0.050
R_W_Miller_5                           .repair_hr          88.000
San_Jacinto_Steam_Electric_Station_1   .cap_credit          0.950
San_Jacinto_Steam_Electric_Station_1   .c_cap             665.000
San_Jacinto_Steam_Electric_Station_1   .life               30.000
San_Jacinto_Steam_Electric_Station_1   .cap_cur             0.088
San_Jacinto_Steam_Electric_Station_1   .cap_max             0.088
San_Jacinto_Steam_Electric_Station_1   .lead_time           2.750
San_Jacinto_Steam_Electric_Station_1   .gen_size            0.088
San_Jacinto_Steam_Electric_Station_1   .derate              0.910
San_Jacinto_Steam_Electric_Station_1   .c_var_om            9.870
San_Jacinto_Steam_Electric_Station_1   .c_fix_om            3.350
San_Jacinto_Steam_Electric_Station_1   .heatrate           13.516
San_Jacinto_Steam_Electric_Station_1   .fuel                   ng
San_Jacinto_Steam_Electric_Station_1   .ramp_max            6.000
San_Jacinto_Steam_Electric_Station_1   .unit_min            0.022
San_Jacinto_Steam_Electric_Station_1   .c_start_fix         7.811
San_Jacinto_Steam_Electric_Station_1   .fuel_start          0.188
San_Jacinto_Steam_Electric_Station_1   .reg_up              0.050
San_Jacinto_Steam_Electric_Station_1   .reg_down            0.050
San_Jacinto_Steam_Electric_Station_1   .spin_rsv            1.000
San_Jacinto_Steam_Electric_Station_1   .max_start            +INF
San_Jacinto_Steam_Electric_Station_1   .max_cap_fact        0.910
San_Jacinto_Steam_Electric_Station_1   .maint_wks           2.000
San_Jacinto_Steam_Electric_Station_1   .c_maint_wk          1.675
San_Jacinto_Steam_Electric_Station_1   .type                ng_gt
San_Jacinto_Steam_Electric_Station_1   .extended_type       ng_gt
San_Jacinto_Steam_Electric_Station_1   .unit_min_pu         0.250
San_Jacinto_Steam_Electric_Station_1   .efor                0.050
San_Jacinto_Steam_Electric_Station_1   .repair_hr          88.000
San_Jacinto_Steam_Electric_Station_2   .cap_credit          0.950
San_Jacinto_Steam_Electric_Station_2   .c_cap             665.000
San_Jacinto_Steam_Electric_Station_2   .life               30.000
San_Jacinto_Steam_Electric_Station_2   .cap_cur             0.088
San_Jacinto_Steam_Electric_Station_2   .cap_max             0.088
San_Jacinto_Steam_Electric_Station_2   .lead_time           2.750
San_Jacinto_Steam_Electric_Station_2   .gen_size            0.088
San_Jacinto_Steam_Electric_Station_2   .derate              0.910
San_Jacinto_Steam_Electric_Station_2   .c_var_om            9.870
San_Jacinto_Steam_Electric_Station_2   .c_fix_om            3.350
San_Jacinto_Steam_Electric_Station_2   .heatrate           13.516
San_Jacinto_Steam_Electric_Station_2   .fuel                   ng
San_Jacinto_Steam_Electric_Station_2   .ramp_max            6.000
San_Jacinto_Steam_Electric_Station_2   .unit_min            0.022
San_Jacinto_Steam_Electric_Station_2   .c_start_fix         7.811
San_Jacinto_Steam_Electric_Station_2   .fuel_start          0.188
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 123
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

San_Jacinto_Steam_Electric_Station_2   .reg_up              0.050
San_Jacinto_Steam_Electric_Station_2   .reg_down            0.050
San_Jacinto_Steam_Electric_Station_2   .spin_rsv            1.000
San_Jacinto_Steam_Electric_Station_2   .max_start            +INF
San_Jacinto_Steam_Electric_Station_2   .max_cap_fact        0.910
San_Jacinto_Steam_Electric_Station_2   .maint_wks           2.000
San_Jacinto_Steam_Electric_Station_2   .c_maint_wk          1.675
San_Jacinto_Steam_Electric_Station_2   .type                ng_gt
San_Jacinto_Steam_Electric_Station_2   .extended_type       ng_gt
San_Jacinto_Steam_Electric_Station_2   .unit_min_pu         0.250
San_Jacinto_Steam_Electric_Station_2   .efor                0.050
San_Jacinto_Steam_Electric_Station_2   .repair_hr          88.000
new_coal_st_1                          .cap_credit          0.930
new_coal_st_1                          .c_cap            2844.000
new_coal_st_1                          .life               30.000
new_coal_st_1                          .cap_max             0.650
new_coal_st_1                          .lead_time           7.000
new_coal_st_1                          .gen_size            0.650
new_coal_st_1                          .derate              0.850
new_coal_st_1                          .c_var_om            4.250
new_coal_st_1                          .c_fix_om           14.835
new_coal_st_1                          .heatrate            8.800
new_coal_st_1                          .fuel             coal_sub
new_coal_st_1                          .ramp_max            0.300
new_coal_st_1                          .unit_min            0.325
new_coal_st_1                          .c_start_fix         3.581
new_coal_st_1                          .fuel_start          2.602
new_coal_st_1                          .reg_up              0.003
new_coal_st_1                          .reg_down            0.003
new_coal_st_1                          .spin_rsv            0.050
new_coal_st_1                          .max_start         104.000
new_coal_st_1                          .max_cap_fact        0.850
new_coal_st_1                          .maint_wks           5.000
new_coal_st_1                          .c_maint_wk          2.967
new_coal_st_1                          .min_up             24.000
new_coal_st_1                          .min_down           12.000
new_coal_st_1                          .type          coal_sub_st
new_coal_st_1                          .extended_type coal_sub_st
new_coal_st_1                          .unit_min_pu         0.500
new_coal_st_1                          .efor                0.070
new_coal_st_1                          .repair_hr          40.000
new_coal_st_2                          .cap_credit          0.930
new_coal_st_2                          .c_cap            2844.000
new_coal_st_2                          .life               30.000
new_coal_st_2                          .cap_max             0.650
new_coal_st_2                          .lead_time           7.000
new_coal_st_2                          .gen_size            0.650
new_coal_st_2                          .derate              0.850
new_coal_st_2                          .c_var_om            4.250
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 124
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

new_coal_st_2                          .c_fix_om           14.835
new_coal_st_2                          .heatrate            8.800
new_coal_st_2                          .fuel             coal_sub
new_coal_st_2                          .ramp_max            0.300
new_coal_st_2                          .unit_min            0.325
new_coal_st_2                          .c_start_fix         3.581
new_coal_st_2                          .fuel_start          2.602
new_coal_st_2                          .reg_up              0.003
new_coal_st_2                          .reg_down            0.003
new_coal_st_2                          .spin_rsv            0.050
new_coal_st_2                          .max_start         104.000
new_coal_st_2                          .max_cap_fact        0.850
new_coal_st_2                          .maint_wks           5.000
new_coal_st_2                          .c_maint_wk          2.967
new_coal_st_2                          .min_up             24.000
new_coal_st_2                          .min_down           12.000
new_coal_st_2                          .type          coal_sub_st
new_coal_st_2                          .extended_type coal_sub_st
new_coal_st_2                          .unit_min_pu         0.500
new_coal_st_2                          .efor                0.070
new_coal_st_2                          .repair_hr          40.000
new_ng_cc_1                            .cap_credit          1.000
new_ng_cc_1                            .c_cap            1003.000
new_ng_cc_1                            .life               30.000
new_ng_cc_1                            .cap_max             0.400
new_ng_cc_1                            .lead_time           4.500
new_ng_cc_1                            .gen_size            0.400
new_ng_cc_1                            .derate              0.890
new_ng_cc_1                            .c_var_om            3.110
new_ng_cc_1                            .c_fix_om            7.310
new_ng_cc_1                            .heatrate            6.430
new_ng_cc_1                            .fuel                   ng
new_ng_cc_1                            .ramp_max            1.000
new_ng_cc_1                            .unit_min            0.120
new_ng_cc_1                            .c_start_fix         9.251
new_ng_cc_1                            .fuel_start          0.589
new_ng_cc_1                            .reg_up              0.008
new_ng_cc_1                            .reg_down            0.008
new_ng_cc_1                            .spin_rsv            0.170
new_ng_cc_1                            .max_start         365.000
new_ng_cc_1                            .max_cap_fact        0.890
new_ng_cc_1                            .maint_wks           3.000
new_ng_cc_1                            .c_maint_wk          2.437
new_ng_cc_1                            .min_up              6.000
new_ng_cc_1                            .min_down           12.000
new_ng_cc_1                            .type                ng_cc
new_ng_cc_1                            .extended_type       ng_cc
new_ng_cc_1                            .unit_min_pu         0.300
new_ng_cc_1                            .efor                0.060
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 125
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

new_ng_cc_1                            .repair_hr          32.000
new_ng_cc_2                            .cap_credit          1.000
new_ng_cc_2                            .c_cap            1003.000
new_ng_cc_2                            .life               30.000
new_ng_cc_2                            .cap_max             0.400
new_ng_cc_2                            .lead_time           4.500
new_ng_cc_2                            .gen_size            0.400
new_ng_cc_2                            .derate              0.890
new_ng_cc_2                            .c_var_om            3.110
new_ng_cc_2                            .c_fix_om            7.310
new_ng_cc_2                            .heatrate            6.430
new_ng_cc_2                            .fuel                   ng
new_ng_cc_2                            .ramp_max            1.000
new_ng_cc_2                            .unit_min            0.120
new_ng_cc_2                            .c_start_fix         9.251
new_ng_cc_2                            .fuel_start          0.589
new_ng_cc_2                            .reg_up              0.008
new_ng_cc_2                            .reg_down            0.008
new_ng_cc_2                            .spin_rsv            0.170
new_ng_cc_2                            .max_start         365.000
new_ng_cc_2                            .max_cap_fact        0.890
new_ng_cc_2                            .maint_wks           3.000
new_ng_cc_2                            .c_maint_wk          2.437
new_ng_cc_2                            .min_up              6.000
new_ng_cc_2                            .min_down           12.000
new_ng_cc_2                            .type                ng_cc
new_ng_cc_2                            .extended_type       ng_cc
new_ng_cc_2                            .unit_min_pu         0.300
new_ng_cc_2                            .efor                0.060
new_ng_cc_2                            .repair_hr          32.000
new_ng_cc_3                            .cap_credit          1.000
new_ng_cc_3                            .c_cap            1003.000
new_ng_cc_3                            .life               30.000
new_ng_cc_3                            .cap_max             0.400
new_ng_cc_3                            .lead_time           4.500
new_ng_cc_3                            .gen_size            0.400
new_ng_cc_3                            .derate              0.890
new_ng_cc_3                            .c_var_om            3.110
new_ng_cc_3                            .c_fix_om            7.310
new_ng_cc_3                            .heatrate            6.430
new_ng_cc_3                            .fuel                   ng
new_ng_cc_3                            .ramp_max            1.000
new_ng_cc_3                            .unit_min            0.120
new_ng_cc_3                            .c_start_fix         9.251
new_ng_cc_3                            .fuel_start          0.589
new_ng_cc_3                            .reg_up              0.008
new_ng_cc_3                            .reg_down            0.008
new_ng_cc_3                            .spin_rsv            0.170
new_ng_cc_3                            .max_start         365.000
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 126
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

new_ng_cc_3                            .max_cap_fact        0.890
new_ng_cc_3                            .maint_wks           3.000
new_ng_cc_3                            .c_maint_wk          2.437
new_ng_cc_3                            .min_up              6.000
new_ng_cc_3                            .min_down           12.000
new_ng_cc_3                            .type                ng_cc
new_ng_cc_3                            .extended_type       ng_cc
new_ng_cc_3                            .unit_min_pu         0.300
new_ng_cc_3                            .efor                0.060
new_ng_cc_3                            .repair_hr          32.000
new_ng_cc_4                            .cap_credit          1.000
new_ng_cc_4                            .c_cap            1003.000
new_ng_cc_4                            .life               30.000
new_ng_cc_4                            .cap_max             0.400
new_ng_cc_4                            .lead_time           4.500
new_ng_cc_4                            .gen_size            0.400
new_ng_cc_4                            .derate              0.890
new_ng_cc_4                            .c_var_om            3.110
new_ng_cc_4                            .c_fix_om            7.310
new_ng_cc_4                            .heatrate            6.430
new_ng_cc_4                            .fuel                   ng
new_ng_cc_4                            .ramp_max            1.000
new_ng_cc_4                            .unit_min            0.120
new_ng_cc_4                            .c_start_fix         9.251
new_ng_cc_4                            .fuel_start          0.589
new_ng_cc_4                            .reg_up              0.008
new_ng_cc_4                            .reg_down            0.008
new_ng_cc_4                            .spin_rsv            0.170
new_ng_cc_4                            .max_start         365.000
new_ng_cc_4                            .max_cap_fact        0.890
new_ng_cc_4                            .maint_wks           3.000
new_ng_cc_4                            .c_maint_wk          2.437
new_ng_cc_4                            .min_up              6.000
new_ng_cc_4                            .min_down           12.000
new_ng_cc_4                            .type                ng_cc
new_ng_cc_4                            .extended_type       ng_cc
new_ng_cc_4                            .unit_min_pu         0.300
new_ng_cc_4                            .efor                0.060
new_ng_cc_4                            .repair_hr          32.000
new_ng_gt_aero_1                       .cap_credit          0.950
new_ng_gt_aero_1                       .c_cap             665.000
new_ng_gt_aero_1                       .life               30.000
new_ng_gt_aero_1                       .cap_max             0.210
new_ng_gt_aero_1                       .lead_time           2.750
new_ng_gt_aero_1                       .gen_size            0.210
new_ng_gt_aero_1                       .derate              0.910
new_ng_gt_aero_1                       .c_var_om            9.870
new_ng_gt_aero_1                       .c_fix_om            3.350
new_ng_gt_aero_1                       .heatrate            9.750
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 127
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

new_ng_gt_aero_1                       .fuel                   ng
new_ng_gt_aero_1                       .ramp_max            6.000
new_ng_gt_aero_1                       .unit_min            0.053
new_ng_gt_aero_1                       .c_start_fix         1.000
new_ng_gt_aero_1                       .quick_start         1.000
new_ng_gt_aero_1                       .reg_up              0.050
new_ng_gt_aero_1                       .reg_down            0.050
new_ng_gt_aero_1                       .spin_rsv            1.000
new_ng_gt_aero_1                       .max_start            +INF
new_ng_gt_aero_1                       .max_cap_fact        0.910
new_ng_gt_aero_1                       .maint_wks           2.000
new_ng_gt_aero_1                       .c_maint_wk          1.675
new_ng_gt_aero_1                       .type           ng_gt_aero
new_ng_gt_aero_1                       .extended_type  ng_gt_aero
new_ng_gt_aero_1                       .unit_min_pu         0.250
new_ng_gt_aero_1                       .efor                0.050
new_ng_gt_aero_1                       .repair_hr          88.000
new_ng_gt_aero_2                       .cap_credit          0.950
new_ng_gt_aero_2                       .c_cap             665.000
new_ng_gt_aero_2                       .life               30.000
new_ng_gt_aero_2                       .cap_max             0.210
new_ng_gt_aero_2                       .lead_time           2.750
new_ng_gt_aero_2                       .gen_size            0.210
new_ng_gt_aero_2                       .derate              0.910
new_ng_gt_aero_2                       .c_var_om            9.870
new_ng_gt_aero_2                       .c_fix_om            3.350
new_ng_gt_aero_2                       .heatrate            9.750
new_ng_gt_aero_2                       .fuel                   ng
new_ng_gt_aero_2                       .ramp_max            6.000
new_ng_gt_aero_2                       .unit_min            0.053
new_ng_gt_aero_2                       .c_start_fix         1.000
new_ng_gt_aero_2                       .quick_start         1.000
new_ng_gt_aero_2                       .reg_up              0.050
new_ng_gt_aero_2                       .reg_down            0.050
new_ng_gt_aero_2                       .spin_rsv            1.000
new_ng_gt_aero_2                       .max_start            +INF
new_ng_gt_aero_2                       .max_cap_fact        0.910
new_ng_gt_aero_2                       .maint_wks           2.000
new_ng_gt_aero_2                       .c_maint_wk          1.675
new_ng_gt_aero_2                       .type           ng_gt_aero
new_ng_gt_aero_2                       .extended_type  ng_gt_aero
new_ng_gt_aero_2                       .unit_min_pu         0.250
new_ng_gt_aero_2                       .efor                0.050
new_ng_gt_aero_2                       .repair_hr          88.000
new_ng_gt_aero_3                       .cap_credit          0.950
new_ng_gt_aero_3                       .c_cap             665.000
new_ng_gt_aero_3                       .life               30.000
new_ng_gt_aero_3                       .cap_max             0.210
new_ng_gt_aero_3                       .lead_time           2.750
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 128
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

new_ng_gt_aero_3                       .gen_size            0.210
new_ng_gt_aero_3                       .derate              0.910
new_ng_gt_aero_3                       .c_var_om            9.870
new_ng_gt_aero_3                       .c_fix_om            3.350
new_ng_gt_aero_3                       .heatrate            9.750
new_ng_gt_aero_3                       .fuel                   ng
new_ng_gt_aero_3                       .ramp_max            6.000
new_ng_gt_aero_3                       .unit_min            0.053
new_ng_gt_aero_3                       .c_start_fix         1.000
new_ng_gt_aero_3                       .quick_start         1.000
new_ng_gt_aero_3                       .reg_up              0.050
new_ng_gt_aero_3                       .reg_down            0.050
new_ng_gt_aero_3                       .spin_rsv            1.000
new_ng_gt_aero_3                       .max_start            +INF
new_ng_gt_aero_3                       .max_cap_fact        0.910
new_ng_gt_aero_3                       .maint_wks           2.000
new_ng_gt_aero_3                       .c_maint_wk          1.675
new_ng_gt_aero_3                       .type           ng_gt_aero
new_ng_gt_aero_3                       .extended_type  ng_gt_aero
new_ng_gt_aero_3                       .unit_min_pu         0.250
new_ng_gt_aero_3                       .efor                0.050
new_ng_gt_aero_3                       .repair_hr          88.000
new_ng_gt_aero_4                       .cap_credit          0.950
new_ng_gt_aero_4                       .c_cap             665.000
new_ng_gt_aero_4                       .life               30.000
new_ng_gt_aero_4                       .cap_max             0.210
new_ng_gt_aero_4                       .lead_time           2.750
new_ng_gt_aero_4                       .gen_size            0.210
new_ng_gt_aero_4                       .derate              0.910
new_ng_gt_aero_4                       .c_var_om            9.870
new_ng_gt_aero_4                       .c_fix_om            3.350
new_ng_gt_aero_4                       .heatrate            9.750
new_ng_gt_aero_4                       .fuel                   ng
new_ng_gt_aero_4                       .ramp_max            6.000
new_ng_gt_aero_4                       .unit_min            0.053
new_ng_gt_aero_4                       .c_start_fix         1.000
new_ng_gt_aero_4                       .quick_start         1.000
new_ng_gt_aero_4                       .reg_up              0.050
new_ng_gt_aero_4                       .reg_down            0.050
new_ng_gt_aero_4                       .spin_rsv            1.000
new_ng_gt_aero_4                       .max_start            +INF
new_ng_gt_aero_4                       .max_cap_fact        0.910
new_ng_gt_aero_4                       .maint_wks           2.000
new_ng_gt_aero_4                       .c_maint_wk          1.675
new_ng_gt_aero_4                       .type           ng_gt_aero
new_ng_gt_aero_4                       .extended_type  ng_gt_aero
new_ng_gt_aero_4                       .unit_min_pu         0.250
new_ng_gt_aero_4                       .efor                0.050
new_ng_gt_aero_4                       .repair_hr          88.000
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 129
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

new_ng_gt_aero_5                       .cap_credit          0.950
new_ng_gt_aero_5                       .c_cap             665.000
new_ng_gt_aero_5                       .life               30.000
new_ng_gt_aero_5                       .cap_max             0.210
new_ng_gt_aero_5                       .lead_time           2.750
new_ng_gt_aero_5                       .gen_size            0.210
new_ng_gt_aero_5                       .derate              0.910
new_ng_gt_aero_5                       .c_var_om            9.870
new_ng_gt_aero_5                       .c_fix_om            3.350
new_ng_gt_aero_5                       .heatrate            9.750
new_ng_gt_aero_5                       .fuel                   ng
new_ng_gt_aero_5                       .ramp_max            6.000
new_ng_gt_aero_5                       .unit_min            0.053
new_ng_gt_aero_5                       .c_start_fix         1.000
new_ng_gt_aero_5                       .quick_start         1.000
new_ng_gt_aero_5                       .reg_up              0.050
new_ng_gt_aero_5                       .reg_down            0.050
new_ng_gt_aero_5                       .spin_rsv            1.000
new_ng_gt_aero_5                       .max_start            +INF
new_ng_gt_aero_5                       .max_cap_fact        0.910
new_ng_gt_aero_5                       .maint_wks           2.000
new_ng_gt_aero_5                       .c_maint_wk          1.675
new_ng_gt_aero_5                       .type           ng_gt_aero
new_ng_gt_aero_5                       .extended_type  ng_gt_aero
new_ng_gt_aero_5                       .unit_min_pu         0.250
new_ng_gt_aero_5                       .efor                0.050
new_ng_gt_aero_5                       .repair_hr          88.000
new_nuke_st                            .cap_credit          0.960
new_nuke_st                            .c_cap            5335.000
new_nuke_st                            .life               30.000
new_nuke_st                            .cap_max             1.118
new_nuke_st                            .lead_time          10.000
new_nuke_st                            .gen_size            1.118
new_nuke_st                            .derate              0.900
new_nuke_st                            .c_var_om            2.040
new_nuke_st                            .c_fix_om           44.375
new_nuke_st                            .heatrate           10.400
new_nuke_st                            .fuel                 u235
new_nuke_st                            .ramp_max            0.100
new_nuke_st                            .unit_min            0.894
new_nuke_st                            .c_start_fix       100.000
new_nuke_st                            .max_start           1.000
new_nuke_st                            .max_cap_fact        0.900
new_nuke_st                            .maint_wks           4.000
new_nuke_st                            .c_maint_wk         11.094
new_nuke_st                            .min_up             48.000
new_nuke_st                            .min_down           24.000
new_nuke_st                            .type              u235_st
new_nuke_st                            .extended_type     u235_st
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 130
"Static Capacity Planning model"
E x e c u t i o n


      14179 PARAMETER pGen  table of generator data

                                                            onlyS

new_nuke_st                            .unit_min_pu         0.800
new_nuke_st                            .efor                0.042
new_nuke_st                            .repair_hr         112.000


----  14387 PARAMETER pMaxNumPlants  upper bound on number of plants for unit commitment

                                              onlyS

wind                                        211.000
Arthur_Von_Rosenberg_Combined                 1.000
Bastrop_Combined                              1.000
Bosque_County_Peaking_GT_1                    1.000
Bosque_County_Peaking_GT_2                    1.000
Bosque_County_Peaking_Units3to5_Combo         1.000
Brazoz_Valley_Generating_Facility_Combo       1.000
Coleto_Creek_1                                1.000
Colorado_Bend_Energy_Center_Combined_1        1.000
Colorado_Bend_Energy_Center_Combined_2        1.000
DeCordova_Steam_Electric_Station_CT4          1.000
Ennis_Power_Company_Combined                  1.000
Fayette_Power_Project_1                       1.000
Fayette_Power_Project_2                       1.000
Fayette_Power_Project_3                       1.000
Permian_Basin_CT2                             1.000
Permian_Basin_CT3                             1.000
R_W_Miller_4                                  1.000
R_W_Miller_5                                  1.000
San_Jacinto_Steam_Electric_Station_1          1.000
San_Jacinto_Steam_Electric_Station_2          1.000
new_coal_st_1                                 1.000
new_coal_st_2                                 1.000
new_ng_cc_1                                   1.000
new_ng_cc_2                                   1.000
new_ng_cc_3                                   1.000
new_ng_cc_4                                   1.000
new_ng_gt_aero_1                              1.000
new_ng_gt_aero_2                              1.000
new_ng_gt_aero_3                              1.000
new_ng_gt_aero_4                              1.000
new_ng_gt_aero_5                              1.000
new_nuke_st                                   1.000

GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 131
"Static Capacity Planning model"
Model Statistics    SOLVE StaticCapPlan Using MIP From line 14529


MODEL STATISTICS

BLOCKS OF EQUATIONS          39     SINGLE EQUATIONS      883,553
BLOCKS OF VARIABLES          27     SINGLE VARIABLES      685,965
NON ZERO ELEMENTS     3,422,480     DISCRETE VARIABLES    227,149


GENERATION TIME      =        3.862 SECONDS    368 MB  24.4.6 r52609 DEX-DEG


EXECUTION TIME       =        4.747 SECONDS    368 MB  24.4.6 r52609 DEX-DEG
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 132
"Static Capacity Planning model"
Solution Report     SOLVE StaticCapPlan Using MIP From line 14529


               S O L V E      S U M M A R Y

     MODEL   StaticCapPlan       OBJECTIVE  vObjective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  14529

**** SOLVER STATUS     3 Resource Interrupt        
**** MODEL STATUS      8 Integer Solution          
**** OBJECTIVE VALUE             4265.1804

 RESOURCE USAGE, LIMIT      10807.831     10800.000
 ITERATION COUNT, LIMIT    419561    2000000000

IBM ILOG CPLEX   24.4.6 r52609 Released Jun 26, 2015 DEG x86 64bit/MacOS X    
--- GAMS/Cplex licensed for continuous and discrete problems.
Cplex 12.6.2.0

Reading parameter(s) from "/Users/bpalmint/repos/advpower/models/capplan/cplex.opt"
>>  * Note: the number of threads can either be specified explicitly or using "0" for use all cores
>>  threads 1
>> 
>>  *Parallel mode. Options:
>>  * 1=deterministic & repeatable, 0=automatic, -1=opportunistic & non-repeatable 
>>  parallelmode 1
>> 
>>  * Conserve memory when possible... hopefully avoid crashes b/c of memory
>>  memoryemphasis 1
>> 
>>  * Declare solution method for pure LP, RMIP, and final MIP solve. 
>>  *   Options: 0=automatic, 2=Dual Simplex, 4=barrier, 6=concurrent (a race between
>>  * dual simplex and barrier in parallel)
>>  *
>>  * Sometimes barrier is notably faster for operations problems, but more often dual simplex wins
>>  * Barrier is often better for planning problems
>>  LPmethod 4
>>  * Solution method for solving the root MIP node. See description and options for LPmethod above
>>  startalg 4
>>  * Solution method for solving sub MIP nodes. See description and options for LPmethod above
>>  * For some reason, the default (usually dual simplex) is typically better here. 
>>  *subalg 4
>> 
>>  * Tighten LP tolerance (default 1e-6). For problems with objective values close to 1, this 
>>  * may be necessary to find the true optimal. In particular, with MILP, using the default can 
>>  * cause the final LP solve to stop short of finding the best node from the MILP branch-and-cut
>>  * Surprisingly, a tighter tolerance can also achieve FASTER run times for MILP, presumably
>>  * because the nodes can be compared more carefully.
>>  epopt 1e-9
>> 
>>  * Stay with barrier until the optimal solution is found rather than crossing over to simplex
>>  * This can run much faster for these problems, because the final simplex iterations can be 
>>  * slow and b/c the cross-over itself takes a good bit of time. However, the approach is not
>>  * robust and can fail or be slower than the default behavior. Not recommended with barrier 
>>  * alone (LPmethod = 4) b/c may not converge. Consider for concurrent optimization.
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 133
"Static Capacity Planning model"
Solution Report     SOLVE StaticCapPlan Using MIP From line 14529


>>  *barcrossalg -1
>> 
>>  * Ignore small (dual) infeasibilities in the final LP solve. Without this setting, occasionally
>>  * CPLEX will get unhappy with an infeasibility on the order of 1e-6
>>  relaxfixedinfeas 1
>> 
>>  * Probing: a technique to more fully examine a MIP problem before starting branch-and-cut. Can
>>  * sometimes dramatically reduce run times. Options: 0=automatic, 1=limited, 2=more, 3=full,
>>  * -1=off.
>>  probe 0
>>  * Limit the probe time to 5min, experience shows the default is typically <=1 sec, so this
>>  * Will seldom be a big driver
>>  probetime 300
>> 
>>  *enable relative epsilon optimal (cheat) parameter
>>  *This value is not used if cheat is defined
>>  relobjdif 0
>> 
Finished reading from "/Users/bpalmint/repos/advpower/models/capplan/cplex.opt"
The following cheat parameter (objective difference) will be used:
    cheat: 0
rel cheat: 0
Space for names approximately 88.15 Mb
Use option 'names no' to turn use of names off
MIP status(107): time limit exceeded
Cplex Time: 10800.39sec (det. 4276474.22 ticks)
Fixing integer variables, and solving final LP...
Fixed MIP status(1): optimal
Cplex Time: 5.57sec (det. 4026.79 ticks)
Resource limit exceeded.

MIP Solution:         4265.180415    (419561 iterations, 501 nodes)
Final Solve:          4265.180416    (0 iterations)

Best possible:        4172.917620
Absolute gap:           92.262796
Relative gap:            0.021632



**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 134
"Static Capacity Planning model"
E x e c u t i o n


**** PUT ERROR AT LINE 14992: FILE CANNOT BE OPENED - NEW NAME INVENTED

**** Open Error for PUTFILE RC=2 FN=/Users/bpalmint/repos/advpower/models/capplan/out_sep_14wk_noRsv/SCP_summary.csv
**** Msg=No such file or directory
**** New file name used is /Users/bpalmint/repos/advpower/models/capplan/gams1.put

**** PUT ERROR AT LINE 18236: FILE CANNOT BE OPENED - NEW NAME INVENTED

**** Open Error for PUTFILE RC=2 FN=/Users/bpalmint/repos/advpower/models/capplan/out_sep_14wk_noRsv/SCP_power.csv
**** Msg=No such file or directory
**** New file name used is /Users/bpalmint/repos/advpower/models/capplan/gams2.put

**** PUT ERROR AT LINE 18456: FILE CANNOT BE OPENED - NEW NAME INVENTED

**** Open Error for PUTFILE RC=2 FN=/Users/bpalmint/repos/advpower/models/capplan/out_sep_14wk_noRsv/SCP_uc.csv
**** Msg=No such file or directory
**** New file name used is /Users/bpalmint/repos/advpower/models/capplan/gams3.put

**** PUT ERROR AT LINE 18703: FILE CANNOT BE OPENED - NEW NAME INVENTED

**** Open Error for PUTFILE RC=2 FN=/Users/bpalmint/repos/advpower/models/capplan/out_sep_14wk_noRsv/SCP_maint.csv
**** Msg=No such file or directory
**** New file name used is /Users/bpalmint/repos/advpower/models/capplan/gams4.put

**** PUT ERROR AT LINE 18924: FILE CANNOT BE OPENED - NEW NAME INVENTED

**** Open Error for PUTFILE RC=2 FN=/Users/bpalmint/repos/advpower/models/capplan/out_sep_14wk_noRsv/SCP_tot_cap.csv
**** Msg=No such file or directory
**** New file name used is /Users/bpalmint/repos/advpower/models/capplan/gams5.put

**** PUT ERROR AT LINE 19134: FILE CANNOT BE OPENED - NEW NAME INVENTED

**** Open Error for PUTFILE RC=2 FN=/Users/bpalmint/repos/advpower/models/capplan/out_sep_14wk_noRsv/SCP_new_plants.csv
**** Msg=No such file or directory
**** New file name used is /Users/bpalmint/repos/advpower/models/capplan/gams6.put

**** PUT ERROR AT LINE 19344: FILE CANNOT BE OPENED - NEW NAME INVENTED

**** Open Error for PUTFILE RC=2 FN=/Users/bpalmint/repos/advpower/models/capplan/out_sep_14wk_noRsv/SCP_new_cap.csv
**** Msg=No such file or directory
**** New file name used is /Users/bpalmint/repos/advpower/models/capplan/gams7.put

**** REPORT FILE SUMMARY

fListOut /Users/bpalmint/repos/advpower/models/capplan/gams1.put
SCP_power /Users/bpalmint/repos/advpower/models/capplan/gams2.put
SCP_uc /Users/bpalmint/repos/advpower/models/capplan/gams3.put
SCP_maint /Users/bpalmint/repos/advpower/models/capplan/gams4.put
SCP_tot_cap /Users/bpalmint/repos/advpower/models/capplan/gams5.put
SCP_new_plants /Users/bpalmint/repos/advpower/models/capplan/gams6.put
SCP_new_cap /Users/bpalmint/repos/advpower/models/capplan/gams7.put
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 23:47:32 Page 135
"Static Capacity Planning model"
E x e c u t i o n


EXECUTION TIME       =        0.453 SECONDS    193 MB  24.4.6 r52609 DEX-DEG


USER: Strategic Energy Analysis Center               G150520:1510CO-GEN
      National Renewable Energy Laboratory (NREL)                DC3485


**** FILE SUMMARY

Input      /Users/bpalmint/repos/advpower/models/capplan/StaticCapPlan.gms
Output     /Users/bpalmint/repos/advpower/models/capplan/StaticCapPlan.lst
