GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 03:47:16 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1   
      ----------------------------------------------------
      Flexible Unit Commitment Model
      ----------------------------------------------------
        Highly Configurable Electric power system operations model
        
      Model formulation based on the formulation described in:
       Palmintier, B., & Webster, M. (???). Efficient Long-Term Unit Commitment. In Preparation for IEEE Transactions on Power Systems
       
       
       Command Line Options (defaults shown):
       ======================================
       Data
        Primary data setup file:
         --sys=test_sys.inc     System parameters include file. This file references all data for a model
                                run. Typically single value data such as: cost of carbon, WACC, etc. are
                                included directly, while larger tables are in separate sub-include files.
                                The standard sub-include files are:
                                    fuel.inc      Fuel names, prices, and emissions
                                    gens.inc      Generator set, operating parameters, and availability
                                    demand.inc    Demand block set, duration, and power levels
       
        Files used to override values set or referenced in sys and sub-includes (assumed to to be
        located in data_dir, except as noted):
         --fuel=(from sys)     Fuel prices and emissions
         --gens=(from sys)     Generation set & tables of parameters & availability/renewable output.
         --gparams=(OPTIONAL from sys)    Default generator parameters to use for any missing values.
         --avail=(from sys)    Generation availability/renewable output
         --demand=(from sys)   Demand include file that defines demand blocks, levels, and duration
         --update=NONE         An optional final include file to override selected settings from other
                                include files. Does not override any explicit command-line values. The
                                path for update file is relative to the model (not data_dir). 
                                IMPORTANT: the update file works in S space, so most parameters must 
                                be indexed by S and you must use the scenario dependent 
                                parameters: pFuel, pDemand, pGen, and pGenAvail. Changes to the 
                                p*Data parameters (pGenData, pDemandData, etc) will NOT be used.
         --scen=NONE           For multiple scenario problems (multi-period or stochastic) specifies
                                the list of scenarios (populates the S set) and their associated
                                weight/probability table, pScenWeight(S).
       
       
        Specific Value Overrides (take precedence over all values defined in data files. Use for
        sensitivity analysis, etc.) IMPORTANT, these values are used for ALL scenarios, use an update
        for changing these on a by scenario basis.
         --co2cost=#            Cost of CO2 in $/t-co2e          (default: use sys or update value)
         --demscale=#           Factor to uniformly scale demand (default: use sys or update value)
         --rps=#                Renewable Portfolio Standard     (default: use sys or update value)
         --co2cap=#             Carbon Emission Cap (Mt-co2e)    (default: use sys or update value)
       
        Model Setup Flags (by default these are not set. Set to any number, including zero, to enable)
         --obj_var=vOpsCost     Variable to minimize in solution. In scenario mode (stochastic UC, 
                                  multi-period planning, etc.) The weighted sum across scenarios of
                                  this value is used Common options:
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 03:47:16 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


                                   vOpsCost  (default) Least cost operations
                                   vCarbonEmissions  Use with no_nse=1 to find minimum possible co2
                                  Technical Note: Any variable indexed by S can be used
         --startup=(off)        Compute startup costs (also enables unit_commit)   (default: ignore)
         --unit_commit=on       Compute unit commitment constraints   (default: use UC constraints --
                                 Note: different default from other AdvPower models. When used as
                                 as sub-model, the callers value is used instead)
         --ramp=(off)           Flag to limit inter period ramp rates  (default: ignore)
         --ignore_integer=(off) Flag to ignore integer constraints in Unit Commitment if enabled (unit is
                                 either committed or not) (default: use integer constraints)
         --avg_avail=(off)      Flag to use the average rather than time dependent availabilities. Using
                                 averages is OK for thermal units, but highly simplifies time varying
                                 renewables. This simplification is made in the analytic version of the
                                 model, but not generally a good idea for numeric estimates. (default: use
                                 complete time varying information.)
         --uc_ignore_unit_min=(0)   Threshold for unit_min to ignore All (even continuos) commitment 
                                  decisions & constraints. Gens with unit_min less than or equal to 
                                  this value will not have commitment variables and use LP 
                                  formulations for equations from dispatch. Use uc_int_unit_min for
                                  a better approach.
         --uc_int_unit_min=(0)   Threshold for unit_min to ignore INTEGER commitment 
                                  decisions & constraints. Gens with unit_min less than or equal to 
                                  this value will still have commitment variables, but their valid
                                  range is relaxed to be continous. The same equations are used
                                  as for those units with integer constraints.
          --uc_lp=(0)            Ignore integer constraints on all UC variables (& startup/shutdown)
         --adj_rsrv_for_nse=(off)  Adjust reserves for non-served energy. This uses actual power
                        production rather than total desired demand for setting reserve requirements.
                        This distinction is only significant if there is non-served energy. When
                        enabled (old default for SVN=479-480), then non-served energy provides a way
                        to reduce reserve requirements. [Default= use total non-adjusted demand]
         --rsrv=(none)  Specify Type of reserve calculation. Options are:
              =separate  Enforce separate reserve requirements based on "classic" ancillary
                          services plus additions for renewable uncertainty. This includes Reg Up, 
                          Reg Down, Spin Up, & Quick Start
              =flex      Use combined "flexibility" reserves grouped simply into flex up and flex down
              =both      Compute both separate and flexibility reserves
              =(none)    If not set, no reserve limits are computed
        --non_uc_rsrv_up_offline=0   For non-unit commitment generators, the fraction of non-running 
                          generation capacity to use toward UP reserves. This parameter has no
                          effect on UC generators. deJonge assumes 0.6, NETPLAN assumes 1.0, 
                          (default=0). 
        --non_uc_rsrv_down_offline=0 For non-unit commitment generators, the fraction of non-running 
                          generation capacity to use toward DOWN reserves. This parameter has no
                          effect on UC generators. deJonge assumes 0.6, NETPLAN assumes 1.0, 
                          (default=0).
        --no_quick_st=(off)     Flag to zero out quickstart reserve contribution to spinning/flex up 
                                 reserves. Useful when non_uc_rsrv... > 0
         --no_nse=(off)         Don't allow non-served energy
         --force_renewables=(off) Force all renewable output to be used. This is only feasible until
                                 the point where load and op_reserves dictate a max. (until we add storage).
                                 When used with cap_fix, it is a bit more widely useful b/c we can limit
                                 output to the level of demand. (this is NLP when capacity is a decision)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 03:47:16 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


         --max_start=(off)      Enforce maximum number of startups   (default: ignore)
         --basic_pmin=(off)     Enforce non-UC based minimum output levels for each generator type. 
                                 This can be useful for baseload plants with simple (non-UC) operations.
         --pwl_cost=(off)     Use piecewise linear cost (fuel consumption) for generators with 
                                 segments defined (in a pGenHrSegments (G, PWL_COEF, HR_SEG) table)
                                 other generators use the standard afine approximation defined in 
                                 pGen(G, GENA_PARAMS). The default afine approximation defines
                                 a linear+offset fuel use using zero power fuel (p0_fuel) and a 
                                 constant heat rate (heatrate). (default: use
                                 afine approx for all generators)
         --p0_recover=0.85    For units not under unit commitment constraints, a zero intercept fuel
                                 curve is used by distributing the p0_fuel (or intercept for 
                                 piecewise linear units) across the output range using an adjusted 
                                 (higher) heatrate. The p0_recover parameter specifies the power 
                                 output level used for full recovery. A value of less than 1.0 is 
                                 recommended, otherwise, the linear fit would be universally too low,
                                 providing an unfair efficiency bonus for non-UC units. (default 85%)
         --pwl2afine=(off)    Overwrite the heatrate & p0_fuel values in the generator table 
                                 pGen with the steepest (least efficient, last) piecewise linear
                                 segment. This option can provide better matches to pwl runs when
                                 the data is available.
         --min_up_down=(off)  Enforce minimum up and down time constraints (default: ignore)
         --force_gen_size=(off) Force all plant sizes to equal the specified value (in MW)
         --min_gen_size=(off)   Force small plant sizes to be larger than specified value (in MW)
         --no_loop=(off)       Do not loop around demand periods for inter-period constraints
                                such as ramping, min_up_down. (default= assume looping)
         --maint=(off)         Compute Maintenance schedule (default = use avail data, typically 
                                assumes full availability for thermal plants)
         --maint_lp=(off) Relax integer constraints on maintenance decisions (default: use integers) 
         --maint_om_fract=0.5   If maintenance planning enabled, the default fraction of total fixed 
                                 O&M costs to divide among the required weeks of maintenance.
         --plan_margin=(off)    Enforce the planning margin. Set to 1 to enable and use the problem
                                 defined pPlanReserve (typically in sys.inc). Alternatively can set
                                 to a value < 1 that then is used for pPlanReserve overriding other 
                                 definitions.
         --plan_margin_penalty=(off) Allow planning margin to be not met and define associated penalty
                                 [$/MW-firm] (default= must meet planning margin)
         --rps_penalty=(off)    Allow planning margin to be not met and define associated penalty
                                 [$/MWh] (default= must meet rps)
         --retire=(0)           Fraction of current capacity to retire. Max capacity is also adjusted
                                 down accordingly (value 0 to 1)
          --derate_to_maint=(off) Override gen datafile derating value and derate based on 
                                  the maintenance value only.
       
        Additional Model Components & Related
         --calc_water=(off)     Compute water use and limits
               Related options (see shared_dir/WaterEquations for complete details)
                 --h2o_limit=(Inf)     System wide maximum water use [Tgal]. Only computed for gens
                                        with specified water usage (h2o_withdraw_var)
                 --h2o_cost=(0)        System wide water cost [$/kgal]. Only computed for gens
                                        with specified water usage (h2o_withdraw_var)
       
       
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 03:47:16 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


        Solver Options
         --max_solve_time=10800  Maximum number of seconds to let the solver run. (Default = 3hrs)
         --mip_gap=0.001         Max MIP gap to treat as valid solution (Default = 0.1%)
         --par_threads=1         Number of parallel threads to use. Specify 0 to use one thread per
                                   core (Default = use 1 core)
         --par_mode=1            CPLEX parallel mode 1=deterministic & repeatable, 0=automatic,
                                  -1=Opportunistic, but not repeatable (Default = determinstic)
         --lp_method=4           CPLEX code for lp_method to use for pure root node, LP, RMIP, and 
                                   final MIP solve.  Options: 0=automatic, 2=Dual Simplex, 4=barrier,
                                   6=concurrent (a race between dual simplex and barrier in parallel)
                                   (Default = 4, barrier) Use 6 if running in parallel
         --cheat=(off)           use epsilon-optimal branch & bound by removing solutions that are
                                  not "cheat" better than the current best. This can speed up the 
                                  MIP search, but may miss the true optimal solution. Note that this
                                  value is specified in absolute terms of the objective function.
         --rel_cheat=(off)       Similar to cheat, but specified in relative percentage of objective
                                  this works in CPLEX only
       
        File Locations (Note, on Windows & DOS, \'s are used for defaults)
         --data_dir=../data/     Relative path to data file includes
         --out_dir=out/          Relative path to output csv files
         --util_dir=../util/     Relative path to csv printing and other utilities
         --shared_dir=../shared/ Relative path to shared model components
         --out_prefix=UC_        Prefix for all our our output data files
         
        Output Control Flags (by default these are not set. Set to any number, including zero, to enable)
         --debug=(off)           Print out extra material in the *.lst file (timing, variables, 
                                  equations, etc)
         --debug_avail=(off)    Display full availability table in *.lst file for debugging
         --no_csv=(off)         Flag to suppress creation of csv output files (default: create csv output)
         --summary_only=(off)   Only create output summary data (default: create additional tables)
         --summary_and_power_only=(off)   Create only summary & power table outputs (Default: all files)
         --out_gen_params=(off) Create output file listing generator parameter input data (Default: skip)
         --out_gen_avail=(off)  Create output file listing generator availability input data (Default: skip)
         --memo=(none)          Free-form text field added to the summary table NO COMMAS (Default: none)
         --gdx=(off)            Export the entire solved model to a gdx file in the out_dir (Default: no gdx file)
         --debug_off_maint=(off) Create table of capacity off maintenance
       
        Supports:
          - multiple operations model modes:
              + simple economic dispatch
              + ramp (up & down) constrained economic dispatch
              + integer unit commitment:
                 - minimum output for committed generators
                 - startup costs (optional)
                 - ramp (up & down) constraints (optional)
          - arbitrary number of generation technologies/units with
              + availability factors (separate from capacity credit, see below)
              + minimum power for baseload units
              + technology specific operating reserve capabilities
          - features designed explicitly for proper wind support:
              + RPS (minimum wind energy penetration %)
              + time varying wind availability/output
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 03:47:16 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


          - (optional) endogenous operating reserves during each time block (hourly for 8760) including:
              + Spinning Reserves
              + Quick Start Reserves (effectively non-spin)
              + Regulation Up & Down
          - arbitrary number of demand blocks of varying duration
          - heat rates + separate fuel costs for easy scenario analysis
          - carbon intensity
             + imbedded carbon from construction
             + carbon content of fuels
          - carbon constraint (carbon cap)
          - carbon tax
          - non-served energy
          - Arbitrary Scenarios (using set S), only weighted sum of costs is implemented here, 
            calling model needs to handle any additional constraints. Scenarios enabled for all
            parameters EXCEPT: piecewise linear segments, and (most) generator technical constraints 
            (specifically those that affect subsets G_UC, G_RPS, G_RAMP, G_UC_INT, etc). 
       
      Outputs
          - Summary, Power, Commitment, #startups, emissions, wind shedding, cost breakdown.
       
       
      Additional Features:
          - loading of data from include files to allow an unchanging core model.
              - These file names can be optionally specified at the command line.
          - A final, optional "update" file to allow for adjusting parameters for easy sensitivity
            analysis or to change the values for a model run without changing the default values
          - internal annualizing of capital costs (requires definition of WACC)
          - ability to scale demand
          - ability to ignore integer constraints
          - Force wind mode to require using all wind production with no shedding (only valid for small %wind)
       
      Performance enhancements:
          - ignores unit commitment for plants with no/low unit minimum output such as renewables and
            peakers. This threshold is tunable with --unit_min
       
      Assumptions:
          - Ramping and Startup "loop" such that the state at the endo of the year must match the
            beginning of year. This prevents turning off baseload in anticipation of the "end of the world"
       
       
      ToDo:
          * Decouple ops into blocks for faster UC?
          * Add hydro
          * Add stochasticity
          - quadratic or affine (linear+offset) heat rate curves for different plants in group
          - replace put2csv with rutherford's equivalent?
          - add min up/down times
          - compute fixed and var cost by gen
          - compute required market based incentives to achieve same results
          - expand in-line comments for equations
          - automatic scaling of demand blocks based on year, baseline, & growth rate
          - Add load following reserves
          - Separate reserves as a function of wind, load ramps, etc.
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 03:47:16 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


          - setup solution in a loop with initial start to allow saving of intermediate solutions?
          ? initial guess for some integer constraints
       
        Originally Coded in GAMS by:
         Bryan Palmintier, MIT
         March 2010
       
       Version History
      Ver   Date       Time  Who            What
      ---  ----------  ----- -------------- ---------------------------------
        1  2011-09-21  17:00  bpalmintier   Original version adapted from: StaticCapPlan v62
        2  2011-09-21  17:30  bpalmintier   Separated out shared AdvPwrSetup section
        3  2011-09-22  16:00  bpalmintier   Expanded equation comments
        4  2011-09-22  16:50  bpalmintier   Overhauled quick start limits to account for avail & derate
        5  2011-09-23  15:00  bpalmintier   Introduced capacity_G alias for total capacity to reduce $ifs
        6  2011-09-23  19:50  bpalmintier   Added cheat parameter for e-optimal Branch & Bound
        7  2011-09-25  23:30  bpalmintier   Added support for afine (linear + intercept) fuel use (heatrates)
        8  2011-09-27  20:50  bpalmintier   Added support for piecewise linear fuel consumption (heatrates)
        9  2011-09-30  13:50  bpalmintier   Added gmx option & put page width to max to reduce truncation
        10 2011-10-06  09:30  bpalmintier   Enable relaxfixedinfeas for cleaner final LP solves
        11 2011-10-06  21:30  bpalmintier   Scale Capital + Fixed O&M by fraction of the year
        12 2011-10-08  01:30  bpalmintier   Added rel_cheat option
        13 2011-10-08  11:30  bpalmintier   Add p0_recovery to adjust p0_fuel allocation for non-UC plants
        14 2011-10-08  11:30  bpalmintier   Add pwl2afine to override afine heatrate using piecewise segments
        15 2011-10-08  22:40  bpalmintier   BIG NEWS: use G_INT_UC & uc_int_unit_min for better linearization
        16 2011-10-09  23:40  bpalmintier   Print all control variables to list file
        17 2011-10-11  14:15  bpalmintier   Renamed plant_size to gen_size (also related flags)
        18 2011-10-13  15:55  bpalmintier   Added support for default generator parameters
        19 2011-10-17  15:25  bpalmintier   Added options to output generator & availability parameters
        20 2011-10-17  16:00  bpalmintier   Tighten LP tolerance: faster & avoid MIP gap issues for small problems
        21 2011-10-18  20:30  bpalmintier   Added par_mode
        22 2011-11-07  15:30  bpalmintier   Updated comments re: sys.inc
        23 2011-11-10  12:15  bpalmintier   Added no_capital option
        24 2011-11-12  10:15  bpalmintier   Set vUnitCommit to be positive
        25 2011-11-15  01:15  bpalmintier   Added ability to check planning margin
        26 2012-01-25  23:25  bpalmintier   Major expansion:
                                              -- Scenario support for stochastic UC, multi-period planning, etc.
                                              -- User definable objective variable
                                              -- Removed capital costs (doesn't belong in an ops model)
                                              -- Separate pGen, pDemand, pFuel (used in model) from p*Data read from file
        27 2012-01-26  13:05  bpalmintier   Major expansion:
                                              -- Scenario support for stochastic UC, multi-period planning, etc.
                                              -- Separate pGen, pDemand, pFuel (used in model) from p*Data read from file
        28 2012-01-28  02:00  bpalmintier   Extracted writeResults
        29 2012-01-28  20:35  bpalmintier   Removed planning margin (it belongs in planning models not ops)
        30 2012-02-01  23:05  bpalmintier   MAJOR...
                                            Bugfixes:
                                              -- Added startup fuel use to vFuelUse for correct carbon (and fuel) accounting
                                              -- removed fuel costs from startup to avoid double counting
                                            Equation adjustments:
                                              -- separate fuel use and carbon emission by generator
                                            And scaling:
                                              -- MW to GW
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 03:47:16 Page 7
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


                                              -- Most $ figures to M$
                                              -- Many fuel numbers from MMBTU to BTUe9
        31 2012-02-03  15:05  bpalmintier   Scale Co2 to Mt, use BTUe12 for (internal) fuel use.
        32 2012-02-04  04:05  bpalmintier   Default to non-parallel barrier for solution method
        33 2012-02-18  08:25  bpalmintier   BUGFIX - Startup cost scaling off by 1e6
        34 2012-03-07  11:35  bpalmintier   Added support for partial period simulation through D_SIM
        35 2012-03-09  12:45  bpalmintier   Replace -- with mDemandShift for optional loop startup
        36 2012-05-02  10:15  bpalmintier   Separate demand (D) into blocks (B) and time sub-periods (T)
        37 2012-05-04  17:35  bpalmintier   Convert Startup & Shutdown to integers: Much faster, see note
        38 2012-05-04  23:05  bpalmintier   Added maintenance support
        39 2012-06-14  15:05  bpalmintier   Added rps & planning margin penalties
        40 2012-06-19  00:10  bpalmintier   BUGFIX: Overhaul ramp limits to include startup/shutdown
        41 2012-08-20  15:35  bpalmintier   Added costs for maintenance
        42 2012-08-23  14:05  bpalmintier   BUGFIX: ignore integers for startup/shutdown when ignoring uc integers, publish uc_lp option
        43 2012-08-29  17:45  bpalmintier   Update to set integer bounds for all except uclp
        44 2012-08-31  00:35  bpalmintier   Allow non-served energy to reduce reserve needs (old behavior with --rsrv_use_tot_demand=1)
        45 2012-08-31  07:15  bpalmintier   UPDATE: default to rsrv to demand (without nse). Flag renamed to adj_rsrv_for_nse
        46 2012-09-02  17:08  bpalmintier   Replace all $set with $setglobal (to prevent scope errors)
        47 2012-09-03  07:08  bpalmintier   Add derate_to_maint & debug_off_maint
      -----------------------------------------------------
 341   
 342  *================================*
 343  *             Setup              *
 344  *================================*
 345   
 346  * First define the shared directory
 347   
 348  * ======  Platform Specific Adjustments
 349  * Setup the file separator to use for relative pathnames
 352   
 353  * By default look for shared components in sibling directory "shared"
 355   
 356  * Enable $ variables from include file to propagate back to this master file
 358   
 359  * Include common setup definitions including:
 360  *  -- Platform specific path adjustments
 361  *  -- GAMS options
 362  *  -- debug settings
 363  *  -- standardized AdvPower directories
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/AdvPwrSetup.gms
 365   
 366  *skip if already setup (to allow including one model from another)
 368   
      ----------------------------------------------------
        Unified setup file for Advanced Power Family of Models.
        
      Includes common setup definitions for:
        -- Platform specific path adjustments
        -- GAMS options including support for set redefinition and limits to list output display
        -- Debug settings for expanded list file information
        -- Standardized AdvPower directories
        
       
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 03:47:16 Page 8
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


      Command Line Parameters Implemented Here:
        Model Setup Flags (by default these are not set. Set to any number, including zero, to enable)
         --no_loop=(off)       Do not loop around demand periods for inter-period constraints
                                such as ramping, min_up_down. (default= assume looping)
        Solver Options
         --debug=(off)           Print out extra material in the *.lst file (timing, variables, 
                                  equations, etc)
         --max_solve_time=10800  Maximum number of seconds to let the solver run. (Default = 3hrs)
         --mip_gap=0.001         Max MIP gap to treat as valid solution (Default = 0.1%)
         --par_threads=2         Number of parallel threads to use. Specify 0 to use one thread per
                                   core (Default = use 2 cores)
       
        File Locations (Note, on Windows & DOS, \'s are used for defaults)
         --data_dir=../data/     Relative path to data file includes
         --out_dir=out/          Relative path to output csv files
         --util_dir=../util/     Relative path to csv printing and other utilities
       
        Output Control Flags (by default these are not set. Set to any number, including zero, to enable)
         --no_csv=(off)         Flag to suppress creation of csv output files (default: create csv output)
       
       
      Additional control variables:
       
      Note: Many of these settings and compile variables need to propagate up
      to the caller. Be sure to set $onglobal before $including this file 
      (optionally you can use $offglobal afterwards)
      	
        Originally Coded in GAMS by:
         Bryan Palmintier, MIT
         September 2011
       
       Version History
      Ver   Date       Time  Who            What
      ---  ----------  ----- -------------- ---------------------------------
        1  2011-09-21  17:05  bpalmintier   Extracted from StaticCapPlan v62
        2  2011-09-23  15:55  bpalmintier   Moved platform specific filesep & shared_dir definition (required by caller)
        3  2011-09-23  16:05  bpalmintier   Converted to $setglobal so our changes propagate to caller
        4  2011-09-23  19:55  bpalmintier   Relaxed default MIP gap to 0.1%
        5  2012-01-26  15:45  bpalmintier   Use alternate loop/control structure syntax
        6  2012-01-30  12:25  bpalmintier   Added par_mode and rel_cheat
      -----------------------------------------------------
 422   
 423  *================================*
 424  *             Setup              *
 425  *================================*
 426   
 427  * ======  GAMS Options
 428  *display $dollar commands in lst file (for easier pre-compiler debugging)
 429  $ondollar
 430  * Allow declaration of empty sets & variables
 431  $onempty
 432  * Allow additions to set elements with multiple set definitions
 433  $onmulti
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                    08/02/15 03:47:16 Page 9
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 434  * Include symbol list in LST file
 435  $onsymlist
 436  *Enable alternate loop syntax using end* rather than ()'s
 437  $onend
 438   
 439   
 440  *get a more precise MIP solution  (optcr is relative convergence). GAMS default is only 10%
 441  $setglobal mip_gap 0.001
 442  option optcr=0.001
 443   
 444  *Allow for extra execution time. units are seconds of execution (needed to extend the GAMS default
 445  * of only 1000 to successfully solve larger problems)
 446  $setglobal max_solve_time 10800
 447  option reslim = 10800;
 448   
 449  *Default to not using a relative cheat parameter
 450  $setglobal rel_cheat 0
 451   
 452  *Default to deterministic parallel mode
 453  $setglobal par_mode 1
 454   
 455  * Reduce the size of the LST file
 456  * Turn off equation listing, (unless debug on) see below
 457  * Note: limrow specifies the number of cases for each equation type that are included in the output
 458  option limrow = 0;
 459   
 460  * Turn off variable listing, (unless debug on) see below
 461  * Note: limrow specifies the number of cases for each equation type that are included in the output
 462  option limcol = 0;
 463   
 464  *=== Solution Output options
 465  * Enable csv output by default
 466  $setglobal no_csv 0
 467   
 468  * Turn off solution printing unless csv output is disabled
 469  $else
 470      option Solprint = off ;
 471  $endif
 472   
 473  *=== Debug options
 474  *enable additional debugging information
 475  $endif
 476   
 477  * ======  Setup directories
 478  * By default look for data in the sibling directory "data"
 479  $setglobal data_dir ../data/
 480   
 481  * By default store output in the sub-directory "out"
 482  $setglobal out_dir out/
 483   
 484  * By default look for utilities in sibling directory "util"
 485  $setglobal util_dir ../util/
 486   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 10
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 487  * ======  Define Macros
 488  * mDemShift, this is a general replacement for the set - and -- operators that allows
 489  * the user to control whether or inter-demand period constraints loop"
 490  $ifthen not set no_loop
 491  $macro mDemShift(d_set, shift) d_set -- shift
 492  $endif
 493   
 494  * mDelFile, Delete an operating system file (quietly)
 495  * Choose appropriate system delete function using filesep as a proxy for Unix-like vs Windows
 496  * Note that both forms, quietly ignore any missing files
 497  $ifthen / == "/"
 498  $macro mDelFile(fname) execute "=rm -f &&fname"
 499  $endif
 500   
 501  $setglobal setup_complete
 502  $label label_skip_setup
 503   
 504  * Disable influence of $ settings from include files
 505  $offglobal
 506   
 507   
 508  * ======  Additional setup
 509  * == Identify if we are the master calling model
 510  $ifthen.we_are_main_name NOT set model_name
 511  *Establish the title
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 11
"Flexible Unit Commitment Model"
C o m p i l a t i o n


 512  $Title "Flexible Unit Commitment Model"
 513  *If so set it
 514  $setglobal model_name UnitCommit
 515  *In this case, we also know the capacity is fixed so skip all of the capacity expansion terms
 516  $setglobal fix_cap
 517  *And we want to default to using unit-commitment
 518  $setglobal unit_commit on
 519   
 520  * == And we want to identify whether or not we are using a mixed integer solution
 521  $else.mip
 522  $setglobal use_mip yes
 523  $endif.mip
 524   
 525  $endif.we_are_main_name
 526   
 527  * == Setup short hand alias for total capacity to use as a control variable
 528  $ifthen.fix_cap set fix_cap
 529  $setglobal capacity_G pGen(G,'cap_cur', S)
 530  $endif.fix_cap
 531   
 532  $setglobal cap_for_plan_margin pGen(G,'cap_cur', S)
 533   
 534  $ifthen.maint set maint
 535  $setglobal capacity_G vCapOffMaint(B, T, G, S)
 536  $endif.maint
 537   
 538  *Set Maximum Capacity for Fixed O&M costs & computing vCapOffMaint
 539  $ifthen.fix_cap set fix_cap
 540  $setglobal max_cap_G pGen(G,'cap_cur', S)
 541  $endif.fix_cap
 542   
 543  * Setup output prefix
 544  $setglobal out_prefix UC_
 545   
 546  * Make sure unit_commit is set if startup is set
 547  $setglobal unit_commit 1
 548   
 549  * Make sure we compute startup & shutdown variables if we need them
 550  $setglobal compute_state 1
 551  $if set max_start   $setglobal compute_state 1
 552  $setglobal compute_state 1
 553   
 554  * Assign the power point for p0_fuel recovery for non-uc generators
 555  $setglobal p0_recover 0.85
 556   
 557  *================================*
 558  *         Declarations           *
 559  *================================*
 560   
 561  * ======  Declare all sets so can use in equations
 562  * Note: be sure to quote descriptions otherwise "/" can not be used in a description.
 563   
 564  sets
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 12
"Flexible Unit Commitment Model"
C o m p i l a t i o n


 565  * Sets for table parameters
 566   
 567      DEM_PARAMS  "demand block table parameters from load duration curve"
 568          /
 569           dur         "duration of block                 [hrs]"
 570           power       "average power demand during block [GW]"
 571          /
 572   
 573      GEN_PARAMS  "generation table parameters"
 574         /
 575          c_var_om    "variable O&M cost                           [$/MWh]"
 576          c_fix_om    "fixed O&M cost                              [M$/GW-yr]"
 577          heatrate    "heatrate for generator (inverse efficiency) [MMBTU/MWh = BTUe9/GWh]"
 578          p0_fuel     "fuel use at zero power out (heatrate intercept) [BTUe9/hr]"
 579          fuel        "name of fuel used                           [name]"
 580          cap_cur     "Current installed capacity for generation   [GW]"
 581          co2_ccs     "Fraction of carbon capture & sequestration  [p.u.]"
 582          co2_embed   "CO2_eq emissions from plant construction    [Mt/GW]"
 583          p_min       "minimum power output (for baseload)         [p.u.]"
 584          gen_size    "typical discrete plant size                   [GW]"
 585          ramp_max    "Maximum hourly ramp rate                    [fract/hr]"
 586          unit_min    "Minimum power output per committed unit     [GW]"
 587          c_start_fix "Fixed cost to start up a unit               [K$/start]"
 588          fuel_start  "Fuel usage to start up a unit               [BTUe9/start]"
 589          quick_start "Fraction of capacity avail for non-spin reserves [p.u.]"
 590          reg_up      "Fraction of capacity avail for regulation up reserves [p.u.]"
 591          reg_down    "Fraction of capacity avail for regulation down reserves [p.u.]"
 592          spin_rsv    "Fraction of capacity avail for spinning reserves [p.u.]"
 593          max_start   "Maximum number of startups per plant per year [starts/unit/yr]"
 594          max_cap_fact "Maximum capacity factor, use for maintanence [p.u.]"
 595          derate       "Derating factor for simple (non-reserves) cap planning [p.u.]"
 596         /
 597   
 598      FUEL_PARAMS "fuel table parameters"
 599          /
 600           name        "The name as a string (acronym) for comparison  [name]"
 601           cost        "Unit fuel cost                                 [$/MMBTU = $K/BTUe9]"
 602           co2         "Carbon Dioxide (eq) emitted                    [t/MMBTU = Kt/BTUe9]"
 603          /
 604   
 605  * Sets for data, actual definitions can be found in include files
 606      G           "generation types (or generator list)"
 607          /
 608           wind
 609          /
 610      B           "Demand blocks (e.g. weeks or ldc)"
 611          T                       "Demand time sub-periods (e.g. hours or ldc sub-blocks)"
 612      B_SIM(B)    "demand blocks used in simulation"
 613      F           "fuel types"
 614      S           "scenarios for multi-period and stochastic problems"
 615   
 616  * Sets associated with piecewise linear cost (fuel) functions
 617          HR_SEG       "piece-wise linear fuel use segments (slope=heatrate)"
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 13
"Flexible Unit Commitment Model"
C o m p i l a t i o n


 618  *      (Note only define the first segment here, assume other segs defined in data files as needed
 619                  /seg1/
 620   
 621          PWL_COEF    "Coefficients for piecewise linear representation"
 622                  /
 623                   slope
 624                   intercept
 625                  /
 626   
 627   
 628  * Sets for mapping between other sets
 629      GEN_FUEL_MAP(G, F)     "map for generator fuel types"
 630   
 631  * Subsets for special purposes
 632      G_UC(G)       "Generators to compute continuous or discrete unit commitment state and constraints"
 633      G_UC_INT(G)   "Generators with integer on/off values for unit commitment"
 634      G_RPS(G)      "Generators included in the Renewable Portfolio Standard"
 635      G_WIND(G)     "Wind generators (for reserve requirements)"
 636      G_RAMP(G)     "Generators for which to enforce ramping limits"
 637      G_PWL_COST(G) "Generators for which to use multi-segment piecewise linear fuel use"
 638      PWL_COST_SEG(G, HR_SEG) "Valid piece-wise linear segments"
 639   
 640  * ======  Declare the data parameters. Actual data imported from include files
 641  parameters
 642  * Data Tables
 643      pDemand    (B, T, DEM_PARAMS, S)   "table of demand data"
 644      pGen       (G, GEN_PARAMS, S)   "table of generator data"
 645      pGenAvail  (B, T, G, S)            "table of time dependent generator availability"
 646      pFuel      (F, FUEL_PARAMS, S)  "table of fuel data"
 647  $endif
 648   
 649  * Additional Parameters
 650     pScenWeight(S)     "Scenario weighting for cost calcs. Use for probability or time discounting"
 651   
 652     pCostCO2     (S)     "cost of carbon (in terms of CO2 equivalent)                         [$/t-CO2eq = M$/Mt]"
 653     pRPS         (S)     "fraction of energy from wind                                        [p.u.]"
 654     pCarbonCap   (S)     "max annual CO2 emissions                                            [Mt CO2e]"
 655     pDemandScale (S)     "factor by which to scale demand"
 656     pFractionOfYear(S)   "fraction of year covered by the simulation"
 657   
 658     pMaxNumPlants(G, S)  "upper bound on number of plants for unit commitment"
 659   
 660  scalars
 661     pWACC             "weighted average cost of capital (utility investment discount rate) [p.u.]"
 662     pPriceNonServed     "Cost of non-served energy                                           [$/MWh]"
 663   
 664  * ======  Declare Variables
 665  variables
 666     vObjective  "Objective: scenario weighted average (EV or discounted ops cost)  [M$]"
 667     vTotalCost      (S)          "total system cost for scenario               [M$]"
 668     vOpsCost        (S)          "system operations cost in target year        [M$]"
 669     vFixedOMCost    (S)          "fixed O&M costs in target year               [M$]"
 670     vVariableOMCost (S)          "variable O&M costs in target year            [M$]"
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 14
"Flexible Unit Commitment Model"
C o m p i l a t i o n


 671     vFuelCost       (S)          "total fuel costs in target year              [M$]"
 672     vCarbonCost     (S)          "cost of all carbon emissions                 [M$]"
 673     vPenaltyCost    (S)          "rps and plan_margin penalty costs            [M$]"
 674   
 675  $ifthen set startup
 676     vStartupCost    (S)          "total startup (fixed) costs, not including fuel & carbon [M$]"
 677  $endif
 678  $ifthen not set no_nse
 679      vNonServedCost (S)          "total cost of non-served energy              [M$]"
 680  $endif
 681     vCarbonEmissions(G, S)          "carbon from operations + fraction embedded   [Mt-CO2e]"
 682   
 683  * See below for integerization
 684  positive variables
 685     vUnitCommit(B, T, G, S)  "number of units of each gen type on-line during period     [continuous]"
 686     vStartUp  (B, T, G, S)   "number of units of each type that starts up during each period  [continuous]"
 687     vShutDown (B, T, G, S)   "number of units of each type that shuts down during each period  [continuous]"
 688   
 689  * Specify integer variables. If ignore_integer flag is specified these are treated as continous by
 690  * GAMS by using the RMIP solution type.
 691  $ifthen not set uc_lp
 692  integer variables
 693  $endif
 694     vUCInt(B, T,G,S)         "integer match to vUnitCommit for members of G_INT_UC [integer]"
 695   
 696  * Previously, we made vStartup and vShutDown continuous since the unit commitment constraint (eState)
 697  * forces them to integers since vUnitCommit is an integer. This trick reduces the number
 698  * integer variables, BUT in testing and as is described in [1] with modern solvers, this
 699  * actually takes longer to run.
 700  * [1] J. Ostrowski, M. F. Anjos, and A. Vannelli,
 701  * "Tight Mixed Integer Linear Programming Formulations for the Unit Commitment Problem,"
 702  * IEEE Transactions on Power Systems, vol. 27, no. 1, pp. 39-46, Feb. 2012.
 703   
 704     vStartInt  (B, T, G, S)   "integer match to vStartUp for members of G_INT_UC [integer]"
 705     vShutInt (B, T, G, S)   "integer match to vShutDown for members of G_INT_UC [integer]"
 706     ;
 707   
 708  positive variables
 709     vInstantFuel(B, T, G, S) "instantaneous fuel use by gen per period [BTUe9/hr]"
 710     vFuelUse  (F, G, S)   "fuel usage by generator & type           [BTUe12]"
 711     vPwrOut   (B, T, G, S)   "production of the unit                   [GW]"
 712     vNonServed(B, T   , S)   "non-served demand                        [GW]"
 713   
 714  $endif
 715  $endif
 716     ;
 717   
 718  * ======  Declare Equations
 719  equations
 720  $ifthen UnitCommit == UnitCommit
 721     eObjective  "Objective function: scenario weighted average (EV or discounted ops cost)  [M$]"
 722     eTotalCost  (S)     "total cost = ops                             [M$]"
 723  $endif
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 15
"Flexible Unit Commitment Model"
C o m p i l a t i o n


 724     eOpsCost    (S)     "system operations cost for one year of operation  [M$]"
 725     eFixedOMCost(S)     "system fixed O&Mcosts for one year           [M$]"
 726     eVarOMCost  (S)     "system variable O&M costs for one year       [M$]"
 727     eFuelCost   (S)     "system fuel costs for one year               [M$]"
 728     eCarbonCost (S)     "cost of all carbon emissions                 [M$]"
 729  $ifthen set startup
 730     eStartupCost(S)      "compute syste-wide unit startup costs                        [M$]"
 731  $endif
 732  $ifthen not set no_nse
 733     eNonServedCost (S)          "total cost of non-served energy              [M$]"
 734  $endif
 735     ePenaltyCost(S)      "rps and plan_margin penalty costs                   [M$]"
 736   
 737     eCarbonEmissions(G, S) "carbon from operations + fraction embedded   [Mt-CO2e]"
 738     eInstantFuelByGen (B, T, G, S) "fuel use by gen and demand period       [BTUe9/hr]"
 739  $endif
 740     eFuelUse (F, G, S)      "fuel usage by type                           [quad = BTUe15]"
 741   
 742  $endif
 743   
 744     eDemand   (B, T   , S)  "output must equal demand                           [GW]"
 745   
 746     eRPS      (S)        "RPS Standard: minimum energy percent from renewables     [p.u.]"
 747     eCarbonCap(S)        "Limit total emissions                                    [Mt-CO2e]"
 748   
 749  $endif
 750   
 751  $ifthen set ramp
 752     eRampUpLimitUC  (B, T, G, S)     "Limit period to period ramp up rates for integer commited plants"
 753     eRampDownLimitUC(B, T, G, S)     "Limit period to period ramp down for integer commited plants"
 754     eRampUpLimit    (B, T, G, S)     "Limit period to period ramp up rates"
 755     eRampDownLimit  (B, T, G, S)     "Limit period to period ramp down rates"
 756  $endif
 757   
 758     eUnitCommit(B, T, G, S)  "can only commit up to the installed number of units     [continous]"
 759  $ifthen not set uc_lp
 760  *(possibly) Mixed Integer Equations
 761     eUnitCommitInteger(B, T, G, S) "Integerization for unit commitment"
 762     eStartUpInteger(B, T, G, S)    "Integerization for unit startup"
 763     eShutDownInteger(B, T, G, S)   "Integerization for unit shutdown"
 764  $endif
 765   
 766  $ifthen set compute_state
 767     eState     (B, T, G, S)  "compute unit commitment startup and shutdowns           [integer]"
 768  $endif
 769   
 770  $endif
 771     ;
 772   
 773  *================================*
 774  *  Additional Model Formulation  *
 775  *================================*
 776  * Note: this must be included between declarations & equations so that the included file
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 16
"Flexible Unit Commitment Model"
C o m p i l a t i o n


 777  * has access to our declarations, and any objective function additions can be used.
 778   
 779  * Enable $ variables from included model(s) to propagate back to this master file
 780  $onglobal
 781   
 782  * Include Reserve constraints if required
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/MaintenanceEquations.gms
 783  $include ../shared/MaintenanceEquations
 784   
 785  $ontext
      ----------------------------------------------------
        Maintenance scheduling for Advanced Power Family of Models.
        
       
      Command Line Parameters Implemented Here:
          --maint=(off)    Enforce minimum up and down time constraints (default: ignore)
          --maint_lp=(off) Relax integer constraints on maintenance decisions (default: use integers) 
       
      Additional control variables:
       
      IMPORTANT: unlike most equation $include files, this file must be loaded AFTER reading in
      the generator datafile. That way our $macros expand properly
       
        Originally Coded in GAMS by:
         Bryan Palmintier, MIT
         May 2012
       
       Version History
      Ver   Date       Time  Who            What
      ---  ----------  ----- -------------- ---------------------------------
        1  2012-05-04  13:45  bpalmintier   Original Code
        2  2012-05-04  23:35  bpalmintier   Added max_maint as basic crew limit heuristic
        3  2012-08-20  15:35  bpalmintier   Added costs for maintenance
        4  2012-08-23  13:05  bpalmintier   Added maint_lp to ignore maintenance integers
        5  2012-08-24  11:20  bpalmintier   BUGFIX: scale maintenance costs by block duration
      -----------------------------------------------------
 812  $offtext
 813   
 814  *================================*
 815  *         Declarations           *
 816  *================================*
 817  * ======  Declare Control Variables
 818  * Default to 15% of capacity maximum on maintenance (plus 1, so always feasible)
 819  $setglobal max_maint 0.15
 820   
 821  * ======  Declare Parameters
 822  parameter
 823      pBlockDurWk(B, S)              "duration for each block in weeks"
 824      ;
 825   
 826  * ======  Declare Sets
 827  set
 828      GEN_PARAMS
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 17
"Flexible Unit Commitment Model"
C o m p i l a t i o n


 829         /
 830          maint_wks   "Annual weeks of maintenance                    [wk/yr]"
 831          c_maint_wk   "Cost per week of maintenance                  [M$/wk]"
 832         /
 833      ;
 834   
 835  * ======  Declare Variables
 836  positive variables
 837      vMaintCost(S)     "Total maintenance cost for scenario"
 838      vCapOffMaint(B, T, G, S)    "Quantity of capacity available off maintenance [GW]"
 839  $ifthen not set maint_lp
 840  integer variables
 841  $endif
 842  * Note taking a queue from Ostrowski (2012) the extra integers actually help with modern
 843  * solvers. See UnitCommitment for more
 844      vOnMaint(B, G, S)       "Number of units on maintenance in a block"
 845      vMaintBegin(B, G, S)    "Number of units starting maintenance during the block [integer]"
 846      vMaintEnd(B, G, S)      "Number of units finishing maintenance during the block [integer]"
 847      ;
 848   
 849  * ======  Declare Equations
 850  equations
 851      eMaintCost(S)         "Compute total maintenance cost for scenario"
 852      eMaintState(B, G, S)        "Compute maintenance begin and end"
 853      eMaintTime (B, G, S)        "Sum total maintenance over the time horizon"
 854      eTotalMaint(G, S)           "Sum total maintenance over the time horizon"
 855      eCapOffMaint(B, T, G, S)    "Compute resulting capacity available for dispatch"
 856      eMaintMax(B, G, S)          "Limit quantity of each gen type on maintenance simultaneously"
 857      ;
 858   
 859  *================================*
 860  *     The Actual Equations       *
 861  *================================*
 862  * Important: we must be included into a larger model, so no objective function defined
 863   
 864  * == Compute total maintenance cost (eMaintState)
 865  * Note: this formulation is the same as the unit commitment state formulation
 866  eMaintCost(S)  ..
 867      vMaintCost(S)
 868      =e= sum[(B, G)$(pGen(G, 'maint_wks', S) > 0), vOnMaint(B, G, S) * pGen(G, 'c_maint_wk', S) * pBlockDurWk(B, S)];
 869   
 870  * == Compute maintenance begin and end (eMaintState)
 871  * Note: this formulation is the same as the unit commitment state formulation
 872  eMaintState  (B, G, S)$(pGen(G, 'maint_wks', S) > 0)  ..
 873      vOnMaint(B, G, S)
 874      =e= vOnMaint(B--1, G, S) + vMaintBegin(B, G, S) - vMaintEnd(B, G, S);
 875   
 876  * == Need to have sufficient Maintenance (scaled by time horizon) (eTotalMaint)
 877  eTotalMaint(G, S)$(pGen(G, 'maint_wks', S) > 0) ..
 878      sum[(B), vOnMaint(B, G, S) * pBlockDurWk(B, S)]
 879      =g= pGen(G, 'maint_wks', S) * pGen(G,'cap_cur', S) / pGen(G, 'gen_size', S) * pFractionOfYear(S);
 880   
 881  * == Compute resulting capacity available for dispatch (eCapOffMaint)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 18
"Flexible Unit Commitment Model"
C o m p i l a t i o n


 882  * Note: must include for all generators, even without maintenance to ensure there is a
 883  * reasonable upper limit on their dispatch
 884  eCapOffMaint(B, T, G, S) ..
 885      vCapOffMaint(B, T, G, S) =e= pGen(G,'cap_cur', S) - vOnMaint(B, G, S) * pGen(G, 'gen_size', S);
 886   
 887  * == Limit quantity of each gen type on maintenance simultaneously (MaintMax)
 888  eMaintMax(B, G, S)$(pGen(G, 'maint_wks', S) > 0) ..
 889      vOnMaint(B, G, S) =l= 1 + 0.15 * pGen(G,'cap_cur', S) / pGen(G, 'gen_size', S);
 890   
 891  * == Once started, must take full time for maintanence (eMaintTime)
 892  * Note: this formulation is basically the same as the min up/down time formulation
 893  * the primary difference is that we sum over block duration to allow reasonable maintenance
 894  * plans for partial year time periods
 895  eMaintTime(B, G, S)$(pGen(G, 'maint_wks', S) > 0) ..
 896      vOnMaint(B, G, S)
 897      =g=
 898      vMaintBegin(B, G, S)
 899      + vMaintBegin(B--1, G, S)$(pGen(G, 'maint_wks', S)
 900                                  > pBlockDurWk(B, S) )
 901      + vMaintBegin(B--2, G, S)$(pGen(G, 'maint_wks', S)
 902                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) )
 903      + vMaintBegin(B--3, G, S)$(pGen(G, 'maint_wks', S)
 904                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) + pBlockDurWk(B--2, S) )
 905      + vMaintBegin(B--4, G, S)$(pGen(G, 'maint_wks', S)
 906                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) + pBlockDurWk(B--2, S)
 907                                      + pBlockDurWk(B--3, S) )
 908      + vMaintBegin(B--5, G, S)$(pGen(G, 'maint_wks', S)
 909                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) + pBlockDurWk(B--2, S)
 910                                      + pBlockDurWk(B--3, S) + pBlockDurWk(B--4, S) )
 911      + vMaintBegin(B--6, G, S)$(pGen(G, 'maint_wks', S)
 912                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) + pBlockDurWk(B--2, S)
 913                                      + pBlockDurWk(B--3, S) + pBlockDurWk(B--4, S)
 914                                      + pBlockDurWk(B--5, S) )
 915      + vMaintBegin(B--7, G, S)$(pGen(G, 'maint_wks', S)
 916                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) + pBlockDurWk(B--2, S)
 917                                      + pBlockDurWk(B--3, S) + pBlockDurWk(B--4, S)
 918                                      + pBlockDurWk(B--5, S) + pBlockDurWk(B--6, S) )
 919      + vMaintBegin(B--8, G, S)$(pGen(G, 'maint_wks', S)
 920                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) + pBlockDurWk(B--2, S)
 921                                      + pBlockDurWk(B--3, S) + pBlockDurWk(B--4, S)
 922                                      + pBlockDurWk(B--5, S) + pBlockDurWk(B--6, S)
 923                                      + pBlockDurWk(B--7, S) )
 924      + vMaintBegin(B--9, G, S)$(pGen(G, 'maint_wks', S)
 925                                  > pBlockDurWk(B, S) + pBlockDurWk(B--1, S) + pBlockDurWk(B--2, S)
 926                                      + pBlockDurWk(B--3, S) + pBlockDurWk(B--4, S)
 927                                      + pBlockDurWk(B--5, S) + pBlockDurWk(B--6, S)
 928                                      + pBlockDurWk(B--7, S) + pBlockDurWk(B--8, S) )
 929      ;
 930   
 931  * Include Planning Margin if required & we are the main function (CapPlan models include
 932  * these equations directly
 933  $if set plan_margin $include ../shared/PlanMarginEquations
 934   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 19
"Flexible Unit Commitment Model"
C o m p i l a t i o n


 935  * Include Reserve constraints if required
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/ReserveEquations.gms
 936  $include ../shared/ReserveEquations
 937   
 938  $ontext
      ----------------------------------------------------
      Common Reserves Formulation for Advanced Power Family of models
      ----------------------------------------------------
        Abstracts out the various reserve formulations for Advanced Power Family of Models.
        
      Includes the following reserve options:
        -- Separate Reserves, corresponding to "classic" ancillary services: Spinning Reserves,
            Regulation up & down, Quick-start, Renewable driven reserves, Load Following
        -- Combined "flexibility" reserves: where everything is combined into two classes: Flexibility
            Up and Flexibility Down
        
       
      Command Line Parameters Implemented Here:
        --adj_rsrv_for_nse=(off)  Adjust reserves for non-served energy. This uses actual power
                        production rather than total desired demand for setting reserve requirements.
                        This distinction is only significant if there is non-served energy. When
                        enabled (old default for SVN=479-480), then non-served energy provides a way
                        to reduce reserve requirements. [Default= use total non-adjusted demand]
        --rsrv=(none)  Specify Type of reserve calculation. Options are:
              =separate  Enforce separate reserve requirements based on "classic" ancillary
                          services plus additions for renewable uncertainty. This includes Reg Up, 
                          Reg Down, Spin Up, & Quick Start
              =flex      Use combined "flexibility" reserves grouped simply into flex up and flex down
              =both      Compute both separate and flexibility reserves
              =(none)    If not set, no reserve limits are computed
          Note: this include file assumes that rsrv has been set
        --non_uc_rsrv_up_offline=0   For non-unit commitment generators, the fraction of non-running 
                          generation capacity to use toward UP reserves. This parameter has no
                          effect on UC generators. deJonge assumes 0.6, NETPLAN assumes 1.0, 
                          (default=0). 
        --non_uc_rsrv_down_offline=0 For non-unit commitment generators, the fraction of non-running 
                          generation capacity to use toward DOWN reserves. This parameter has no
                          effect on UC generators. deJonge assumes 0.6, NETPLAN assumes 1.0, 
                          (default=0).
        --no_quick_st=(off)     Flag to zero out quickstart reserve contribution to spinning/flex up 
                                 reserves. Useful when non_uc_rsrv... > 0
       
      Additional control variables:
         %separate_rsrv%   Set if rsrv = separate or both
         %flex_rsrv%       Set if rsrv = flex or both
         %capacity_G%      Alias to specify total capacity by generator. This allows easy use of either
                            vCapInUse(G) or pGen(G, 'cap_cur') for expansion or operation only
                            optimizations respectively. If not set by the caller, we assume operations
                            only and set it to pGen(G,'cap_cur').
        %load_for_rsrv%    Alias to allow use of either total production or total demand as "load" 
                            for reserves calculation.
       
        Originally Coded in GAMS by:
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 20
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         Bryan Palmintier, MIT
         September 2011
       
       Version History
      Ver   Date       Time  Who            What
      ---  ----------  ----- -------------- ---------------------------------
        1  2011-09-23  11:05  bpalmintier   Extracted from UnitCommit v4
        2  2011-09-23  15:00  bpalmintier   Introduced capacity_G alias for total capacity to reduce $ifs
        3  2011-09-23  16:05  bpalmintier   Converted to $setglobal so our changes propagate to caller
        4  2011-09-29  22:05  bpalmintier   Allow additional spinning reserve to substitute for quick start
        5  2011-10-09  14:05  bpalmintier   Bugfix: remove spinning reserves from FlexDown
        6  2011-10-11  14:15  bpalmintier   Renamed plant_size to gen_size (also related flags)
        7  2011-10-14  18:05  bpalmintier   MAJOR: Wind for sep reserves, LoadFollowDown, Add (not max) contingency & load
        8  2011-10-22  07:50  bpalmintier   Bugfix: fixed substitution of vRegDown for vNetLoadFollowDown 
        9  2012-01-25  23:55  bpalmintier   Added scenario support for stochastic UC, multi-period planning, etc.
        10 2012-03-07  12:05  bpalmintier   Added support for partial period simulation through D_SIM
        11 2012-05-02  12:35  bpalmintier   Separate demand (D) into blocks (B) and time sub-periods (T)
        12 2012-08-31  00:35  bpalmintier   Allow non-served energy to reduce reserve needs (old behavior with --rsrv_use_tot_demand=1)
        13 2012-08-31  07:15  bpalmintier   UPDATE: default to rsrv to demand (without nse). Flag renamed to adj_rsrv_for_nse
        14 2012-09-02  17:08  bpalmintier   Replace all $set with $setglobal (to prevent scope errors)
        15 2012-09-06  09:38  bpalmintier   Add no_quick_st, non_uc_rsrv_down_offline and non_uc_rsrv_up_offline
      -----------------------------------------------------
1009  $offtext
1010   
1011  *================================*
1012  *  Additional Control Variables  *
1013  *================================*
1014  $ifthen.any_rsrv set rsrv
1015  $if separate == flex $setglobal flex_rsrv
1016  $setglobal separate_rsrv
1017  $endif
1018  $endif.any_rsrv
1019   
1020  *Default to NOT adjusting reserves for non-served energy (faster?)
1021  $setglobal adj_rsrv_for_nse off
1022   
1023  $ifthen.ar4n NOT adj_rsrv_for_nse==off
1024  $ifthen not set no_nse
1025  $setglobal load_for_rsrv   (pDemand(B,T,'power', S) - vNonServed(B, T,S))
1026  $endif
1027  $endif.ar4n
1028   
1029  $if NOT set capacity_G $setglobal capacity_G pGen(G, 'cap_cur', S)
1030   
1031  $setglobal non_uc_rsrv_up_offline 0
1032  $setglobal non_uc_rsrv_down_offline 0
1033   
1034  *================================*
1035  *         Declarations           *
1036  *================================*
1037   
1038  * ======  Declare the data parameters. Actual data imported from include files
1039  scalars
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 21
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1040   
1041  *   pWindForecastError "forecast error as a fraction of wind capacity for quick start reserves [p.u.]"
1042  *    pSpinResponseTime           "Response time for Spinning Reserves                        [minutes]"
1043  *    pQuickStartLoadFract        "addition Fraction of load for non-spin reserves            [p.u.]"
1044      pSpinReserveLoadFract       "addition Fraction of load for spin reserves                [p.u.]"
1045      pSpinReserveMinGW           "minimum spining reserve                                    [GW]"
1046      pReplaceReserveGW           "offline replacement reserves to fill-in if spinning reserves are called [GW]"
1047      pRegUpLoadFract             "additional Fraction of load for regulation up              [p.u.]"
1048      pRegDownLoadFract           "Fraction of load over unit minimums for regulation down    [p.u.]"
1049      pQuickStSpinSubFract        "Fraction of Spinning Reserves that can be supplied by off-line generators [p.u.]"
1050   
1051  *Additional Reserves for Wind see (De Jonghe, et al 2011)
1052  * pWindFlexUpForecast=A_POS, pWindFlexUpCapacity=B_POS, pWindFlexDownForecast=A_NEG, pWindFlexDownCapacity=B_NEG
1053      pWindFlexUpForecast     "Additional up reserves based on wind power output (forecast)  [fraction of PwrOur]"
1054      pWindFlexUpCapacity     "Additional up reserves based on installed wind capacity [fraction of Wind capacity]"
1055      pWindFlexDownForecast   "Additional down reserves based on wind power output (forecast)  [fraction of PwrOur]"
1056      pWindFlexDownCapacity   "Additional down reserves based on installed wind capacity [fraction of Wind capacity]"
1057   
1058  * ======  Declare Variables
1059  positive variables
1060   
1061  $ifthen set separate_rsrv
1062     vSpinReserve    (B,T,G,S)     "Contingency Spinning reserves service provision by generator class [GW]"
1063     vNetLoadFollowDown(B,T,G,S)     "Load follow down reserves service provision by generator class [GW]"
1064     vRegUp          (B,T,G,S)     "Regulation up reserves service provision by generator class [GW]"
1065     vRegDown        (B,T,G,S)     "Regulation down reserves service provision by generator class [GW]"
1066  $ifthen.no_qs not set no_quick_st
1067    vQuickStart     (B,T,G,S)     "Non-spin reserves service provision by generator class [GW]"
1068  $endif.no_qs
1069  $endif
1070   
1071  $endif
1072     ;
1073   
1074  * ======  Declare Equations
1075  equations
1076  $endif
1077   
1078  $ifthen set separate_rsrv
1079     ePwrMaxSepRsrv   (B,T, G, S)  "output w/ reserves lower than available max       [GW]"
1080     ePwrMinSepRsrv   (B,T, G, S)  "output w/ reserves greater than installed min     [GW]"
1081     ePwrMaxSepRsrvUC (B,T, G, S)  "output w/ reserves lower than committed max       [GW]"
1082     ePwrMinSepRsrvUC (B,T, G, S)  "output w/ reserves greater than committed min     [GW]"
1083   
1084     eSpinReserve    (B,T, S)     "Provide required spinning reserves [GW]"
1085     eNetLoadFollowDown(B,T, S)     "Provide required load following down reserves [GW]"
1086     eRegUp          (B,T, S)     "Provide required regulation up reserves [GW]"
1087     eRegDown        (B,T, S)     "Provide required regulation down reserves [GW]"
1088  $ifthen.no_qs not set no_quick_st
1089     eQuickStart     (B,T, S)     "Provide required non-spinning reserves [GW]"
1090  $endif.no_qs
1091   
1092     eSpinReserveMax    (B,T,G,S)     "Stay below max spinning reserves on-line generators of each class can supply [GW]"
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 22
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1093     eNetLoadFollowDownMax(B,T,G,S)     "Stay below max load following down on-line generators of each class can supply [GW]"
1094     eRegUpMax          (B,T,G,S)     "Stay below max regulation up reserves on-line generators of each class can supply [GW]"
1095     eRegDownMax        (B,T,G,S)     "Stay below max regulation down on-line generators of each class can supply [GW]"
1096  $ifthen.no_qs not set no_quick_st
1097     eQuickStartMax     (B,T,G,S)     "Stay below max non-spin reserves off-line generators of each class can supply [GW]"
1098  $endif.no_qs
1099  $endif
1100     ;
1101   
1102  *================================*
1103  *     The Actual Equations       *
1104  *================================*
1105  * Important: we must be included into a larger model, so no objective function defined
1106   
1107  *====== Generation output less than upper limit(s)
1108  * There are multiple limits here for different circumstances
1109  * 1) Simplest (ePwrMaxFlexRsrv) is power out < installed capacity. But here there are twists since we
1110  *    allow time varing availability, and for some capacity to be moth-balled and hence not in
1111  *    active use. In addition, we also need to ensure headroom for reserves up.
1112  * 2) For generation subject to unit commitment, things change slightly since we now only output
1113  *    power up to the number of units that are turned on (ePwrMaxFlexRsrvUC)
1114  * 3) If separate reserves are computed, they should not be simply added to the flexibility
1115  *    reserves, but rather we want to take max(FlexUp, sum(other up reserves). In LP we do this
1116  *    by adding an additional equation for the sum(other up reserves) term. (ePwrMaxSepRsrv)
1117  * Furthermore,  we might choose to derate the power output of the plant separately from
1118  * availability (typically for simple models), this can be done by taking the minimum of availability
1119  * and the derate factor. Since both arer parameters, this is a valid (MI)LP formulation. Note that
1120  * this derating is already taken into account for in eUnitCommit for the UC equations.
1121   
1122  *====================================*
1123  *  Combined (Flexibility) Reserves   *
1124  *====================================*
1125  * == Output (& Flex Reserves) must be below the generator upper limits (ePwrMaxFlexRsrv)
1126  * These equations are used for the no reserves case and for combined (Flexibility) reserves
1127  * they are also active when separate reserves are used as described in #3 above.
1128  *
1129  *Note: the $subset(setname) format only defines the equation for members of G that are also in G_UC
1130  *Note: Availability is handled in eState for unit commitment constrained generators
1131  $endif.flex
1132   
1133   
1134  *======================*
1135  *  Separate Reserves   *
1136  *======================*
1137  * == Output + Individual Reserves must be below the generator upper limits (ePwrMaxSepRsrv)
1138  * These equations are used for the separate reserves case
1139  $ifthen.sep_rsrv set separate_rsrv
1140  ePwrMaxSepRsrv (B,T, G, S)$( B_SIM(B)
1141                             and not G_UC(G) ) ..
1142                              vCapOffMaint(B, T, G, S) *
1143  $else
1144                              (
1145  $endif
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 23
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1146                                  pGenAvail(B,T, G, S)
1147                              ) =g=
1148                              vPwrOut(B,T, G, S)
1149                              + vSpinReserve(B,T, G, S)$(pGen(G, 'spin_rsv', S))
1150                              + vRegUp(B,T, G, S)$(pGen(G, 'reg_up', S))
1151                              ;
1152   
1153  * == Output Upper Limit for UnitCommitment Gens with Separate Reserves (ePwrMaxSepRsrvUC)
1154  ePwrMaxSepRsrvUC (B,T, G, S)$( B_SIM(B)
1155                               and G_UC(G) ) .. vUnitCommit(B,T,G,S) * pGen(G, 'gen_size', S)
1156                              =g=
1157                              vPwrOut(B,T, G, S)
1158                              + vSpinReserve(B,T, G, S)$(pGen(G, 'spin_rsv', S))
1159                              + vRegUp(B,T, G, S)$(pGen(G, 'reg_up', S))
1160                              ;
1161   
1162  * == Output + Individual Reserves must be above the generator lower limits (ePwrMinSepRsrv)
1163  * These equations are used for the separate reserves case
1164  ePwrMinSepRsrv (B,T, G, S)$B_SIM(B) ..   vPwrOut(B,T, G, S) =g= vCapOffMaint(B, T, G, S) * pGen(G,'p_min', S)
1165                          + vRegDown(B,T,G,S)$(pGen(G, 'reg_down', S))
1166                          + vNetLoadFollowDown(B,T, G, S);
1167   
1168   
1169  * == Output + Individual Reserves above the lower limits for Unit Commitment(ePwrMinSepRsrvUC)
1170  ePwrMinSepRsrvUC (B,T, G, S)$( B_SIM(B)
1171                               and G_UC(G) ) .. vPwrOut(B,T, G, S)
1172                              =g=
1173                              vUnitCommit(B,T,G,S) * pGen(G, 'unit_min', S)
1174                              + vRegDown(B,T,G,S)$(pGen(G, 'reg_down', S))
1175                              + vNetLoadFollowDown(B,T, G, S);
1176   
1177  *=== Separate Ancillary Services
1178   
1179  *=== Ensure we have enough reserves for each operating period
1180  * == Spinning Reserves (eSpinReserve) aka secondary reserves
1181  *  Focus on contingencies (ie outages or failures) only. Here we compute the required
1182  *  level as the greater of the specified minimum (typically set to the largest on-line plant
1183  *  or transmission tie)
1184      eSpinReserve    (B,T, S)$B_SIM(B) .. sum[(G)$(pGen(G, 'spin_rsv', S)), vSpinReserve(B,T, G, S)]
1185                              =g= (1 - pQuickStSpinSubFract)
1186                               * (    pSpinReserveMinGW
1187                                      + (pDemand(B,T,'power', S) - vNonServed(B, T,S)) * pSpinReserveLoadFract
1188                                      + pWindFlexUpForecast * sum[(G)$G_WIND(G), vPwrOut(B,T, G, S)]
1189                                      + pWindFlexUpCapacity * sum[(G)$G_WIND(G), vCapOffMaint(B, T, G, S)]
1190                                  );
1191   
1192  * == Quick Start Reserves (eQuickStart) aka tertiary reserves
1193  *  Allow QuickStart units (off-line or demand) to substitute for a fraction of secondary reserves
1194  $ifthen.no_qs not set no_quick_st
1195      eQuickStart     (B,T, S)$B_SIM(B) .. sum[(G)$(pGen(G, 'quick_start', S)), vQuickStart(B,T, G, S)]
1196                              + sum[(G)$(pGen(G, 'spin_rsv', S)), vSpinReserve(B,T, G, S)]
1197                             =g=
1198                              pReplaceReserveGW
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 24
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1199                              + pSpinReserveMinGW
1200                              + (pDemand(B,T,'power', S) - vNonServed(B, T,S)) * pSpinReserveLoadFract
1201                              + pWindFlexUpForecast * sum[(G)$G_WIND(G), vPwrOut(B,T, G, S)]
1202                              + pWindFlexUpCapacity * sum[(G)$G_WIND(G), vCapOffMaint(B, T, G, S)]
1203                              ;
1204  $endif.no_qs
1205  * == Load Follow Down (eNetLoadFollowDown) aka secondary reserves
1206  *  Handles second to second variations. Computed as a specified fraction of the load.
1207      eNetLoadFollowDown (B,T, S)$B_SIM(B) .. sum[(G)$(pGen(G, 'spin_rsv', S)), vNetLoadFollowDown(B,T, G, S)]
1208                                  =g= (pDemand(B,T,'power', S) - vNonServed(B, T,S)) * pSpinReserveLoadFract
1209                                      + pWindFlexDownForecast * sum[(G)$G_WIND(G), vPwrOut(B,T, G, S)]
1210                                      + pWindFlexDownCapacity * sum[(G)$G_WIND(G), vCapOffMaint(B, T, G, S)];
1211                                  ;
1212   
1213  * == Regulation Up (eRegUp) aka primary reserves
1214  *  Handles second to second variations. Computed as a specified fraction of the load.
1215      eRegUp          (B,T, S)$B_SIM(B) .. sum[(G)$(pGen(G, 'reg_up', S)), vRegUp(B,T, G, S)] =g=
1216                              (pDemand(B,T,'power', S) - vNonServed(B, T,S)) * pRegUpLoadFract;
1217   
1218  * == Regulation Down (eRegDown) aka primary reserves
1219  *  Handles second to second variations. Computed as a specified fraction of the load.
1220      eRegDown        (B,T, S)$B_SIM(B) .. sum[(G)$(pGen(G, 'reg_down', S)), vRegDown(B,T, G, S)] =g=
1221                              (pDemand(B,T,'power', S) - vNonServed(B, T,S)) * pRegDownLoadFract;
1222   
1223  *=== Reserve Capability by reserve class and unit
1224  * Compute the maximum reserves per generator as a function of capabilities.
1225  * Note: ePwrMaxFlexRsrv and ePwrMinFlexRsrv (above) ensure that we do not double count capacity
1226  * These equations are only created for generators capable of supplying the specified service
1227   
1228   
1229  * == Generator limits on Spinning Reserves (eSpinReserveMax) aka secondary reserves
1230  * Based on commitment state if available. For non-UC plants, we use output power as a proxy
1231  * for quantity/amount of committed generation
1232      eSpinReserveMax    (B,T,G,S)$( B_SIM(B)
1233                                   and pGen(G, 'spin_rsv', S) ) ..
1234                                      vSpinReserve(B,T,G,S)
1235                                      =l=
1236                                      pGen(G, 'spin_rsv', S)*(
1237                                          (vUnitCommit(B,T, G, S)*pGen(G, 'gen_size', S))$G_UC(G) +
1238                                          (vPwrOut(B,T, G, S)
1239                                              + 0
1240                                                  * (vCapOffMaint(B, T, G, S) - vPwrOut(B,T, G, S))
1241                                          )$(not G_UC(G))
1242                                      );
1243   
1244   
1245  * == Generator limits on Load Following Down (eNetLoadDownMax) aka primary reserves
1246  * Based on commitment state if available. For non-UC plants, we use output power as a proxy
1247  * for quantity/amount of committed generation
1248      eNetLoadFollowDownMax(B,T,G,S)$( B_SIM(B)
1249                                     and pGen(G, 'spin_rsv', S) ) ..
1250                                      vNetLoadFollowDown(B,T,G,S)
1251                                      =l=
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 25
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1252                                      pGen(G, 'spin_rsv', S)*(
1253                                          (vUnitCommit(B,T, G, S)*pGen(G, 'gen_size', S))$G_UC(G) +
1254                                          (vPwrOut(B,T, G, S)
1255                                              + 0
1256                                                  * (vCapOffMaint(B, T, G, S) - vPwrOut(B,T, G, S))
1257                                          )$(not G_UC(G))
1258                                      );
1259   
1260  * == Generator limits on Regulation Up (eRegUpMax) aka primary reserves
1261  * Based on commitment state if available. For non-UC plants, we use output power as a proxy
1262  * for quantity/amount of committed generation
1263      eRegUpMax(B,T,G,S)$( B_SIM(B)
1264                         and pGen(G, 'reg_up', S) ) ..
1265                                      vRegUp(B,T,G,S)
1266                                      =l=
1267                                      pGen(G, 'reg_up', S)*(
1268                                          (vUnitCommit(B,T, G, S)*pGen(G, 'gen_size', S))$G_UC(G) +
1269                                          (vPwrOut(B,T, G, S)
1270                                              + 0
1271                                                  * (vCapOffMaint(B, T, G, S) - vPwrOut(B,T, G, S))
1272                                          )$(not G_UC(G))
1273                                      );
1274   
1275  * == Generator limits on Regulation Down (eRegDownMax) aka primary reserves
1276  * Based on commitment state if available. For non-UC plants, we use output power as a proxy
1277  * for quantity/amount of committed generation
1278      eRegDownMax(B,T,G,S)$( B_SIM(B)
1279                           and pGen(G, 'reg_down', S) ) ..
1280                                      vRegDown(B,T,G,S)
1281                                      =l=
1282                                      pGen(G, 'reg_down', S)*(
1283                                          (vUnitCommit(B,T, G, S)*pGen(G, 'gen_size', S))$G_UC(G) +
1284                                          (vPwrOut(B,T, G, S)
1285                                              + 0
1286                                                  * (vCapOffMaint(B, T, G, S) - vPwrOut(B,T, G, S))
1287                                          )$(not G_UC(G))
1288                                      );
1289   
1290  * == Generator limits on Quick Start (eQuickStartMax) aka tertiary reserves
1291  * Here we care about the number of units that are OFF (rather than on as for other reserves). So
1292  * we base the limit on available capacity minus that which is on-line. On-line quantity is based
1293  * on commitment state if available. For non-UC plants, we use output power as a proxy
1294  * for quantity/amount of committed generation.
1295  $ifthen.no_qs not set no_quick_st
1296      eQuickStartMax(B,T,G,S)$( B_SIM(B)
1297                              and pGen(G, 'quick_start', S) ) ..
1298                              vQuickStart(B,T,G,S)
1299                              =l=
1300  * Quick start capability times
1301                              pGen(G, 'quick_start', S)
1302                                  *(
1303  * Total available capacity
1304                                      vCapOffMaint(B, T, G, S) *
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 26
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1305  $else
1306                                          (
1307  $endif
1308                                             pGenAvail(B,T, G, S)
1309                                          )
1310  * Minus capacity already in use
1311                                      - (
1312                                          (vUnitCommit(B,T, G, S)*pGen(G, 'gen_size', S))$G_UC(G) +
1313                                          (vPwrOut(B,T, G, S))$(not G_UC(G))
1314                                        )
1315                                  );
1316  $endif.no_qs
1317  $endif.sep_rsrv
1318   
1319  * Include Minimum Up and Down time formulation if required
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/MinUpDownEquations.gms
1320  $include ../shared/MinUpDownEquations
1321   
1322  $ontext
      ----------------------------------------------------
        Abstracts out the rather convoluted minimum up and down time computations for Advanced Power 
        Family of Models.
        
      LIMITATIONS:
         -- Currently limited to up/down times of 50hrs
         -- Hourly demand. (Or more generally: equal demand periods and that the min_up & min_down
             parameters are specified in units of demand periods)
        
       
      Command Line Parameters Implemented Here:
          --min_up_down=(off)  Enforce minimum up and down time constraints (default: ignore)
       
      Additional control variables:
       
      IMPORTANT: Currently assumes that the demand dataset is hourly. This could change with more sums
       
      IMPORTANT: time looping (ie first period follows the last) controlled by the no_loop command
       line parameter through mDemShift
       
      IMPORTANT: unlike most equation $include files, this file must be loaded AFTER reading in
      the generator datafile. That way our $macros expand properly
       
        Originally Coded in GAMS by:
         Bryan Palmintier, MIT
         September 2011
       
       Version History
      Ver   Date       Time  Who            What
      ---  ----------  ----- -------------- ---------------------------------
        1  2011-09-27  23:05  bpalmintier   Original Code
        2  2011-10-11  14:15  bpalmintier   Renamed plant_size to gen_size (also related flags)
        3  2012-01-25  23:55  bpalmintier   Added scenario support for stochastic UC, multi-period planning, etc.
        4  2012-03-07  12:55  bpalmintier   Added support for partial period simulation through D_SIM
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 27
"Flexible Unit Commitment Model"
C o m p i l a t i o n


        5  2012-03-09  12:45  bpalmintier   Replace -- with mDemandShift for optional loop startup
        6  2012-05-02  10:45  bpalmintier   Separate demand (D) into blocks (B) and time sub-periods (T)
      -----------------------------------------------------
1360  $offtext
1361   
1362  *================================*
1363  *         Declarations           *
1364  *================================*
1365  set
1366  GEN_PARAMS
1367     /
1368      min_up
1369      min_down
1370     /
1371  ;
1372   
1373  * ======  Declare Variables
1374   
1375  * ======  Declare Equations
1376  equations
1377      eMinUpTime(B, T, G, S)
1378      eMinDownTime(B, T, G, S)
1379      ;
1380   
1381  *================================*
1382  *     The Actual Equations       *
1383  *================================*
1384  * Important: we must be included into a larger model, so no objective function defined
1385   
1386  * == Once on, a generator must remain on for specified number of periods (eMinUpTime)
1387  eMinUpTime(B, T, G, S)$( B_SIM(B)
1388                        and G_UC(G)
1389                        and pGen(G, 'min_up', S) > 1
1390                        and pGen(G,'gen_size', S) <> 0 ) ..
1391      vUnitCommit(B, T, G, S)
1392      =g=
1393      vStartup(B, T, G, S)
1394      + vStartup(B, T -- 1, G, S)$(pGen(G, 'min_up', S) > 1)
1395      + vStartup(B, T -- 2, G, S)$(pGen(G, 'min_up', S) > 2)
1396      + vStartup(B, T -- 3, G, S)$(pGen(G, 'min_up', S) > 3)
1397      + vStartup(B, T -- 4, G, S)$(pGen(G, 'min_up', S) > 4)
1398      + vStartup(B, T -- 5, G, S)$(pGen(G, 'min_up', S) > 5)
1399      + vStartup(B, T -- 6, G, S)$(pGen(G, 'min_up', S) > 6)
1400      + vStartup(B, T -- 7, G, S)$(pGen(G, 'min_up', S) > 7)
1401      + vStartup(B, T -- 8, G, S)$(pGen(G, 'min_up', S) > 8)
1402      + vStartup(B, T -- 9, G, S)$(pGen(G, 'min_up', S) > 9)
1403      + vStartup(B, T -- 10, G, S)$(pGen(G, 'min_up', S) > 10)
1404      + vStartup(B, T -- 11, G, S)$(pGen(G, 'min_up', S) > 11)
1405      + vStartup(B, T -- 12, G, S)$(pGen(G, 'min_up', S) > 12)
1406      + vStartup(B, T -- 13, G, S)$(pGen(G, 'min_up', S) > 13)
1407      + vStartup(B, T -- 14, G, S)$(pGen(G, 'min_up', S) > 14)
1408      + vStartup(B, T -- 15, G, S)$(pGen(G, 'min_up', S) > 15)
1409      + vStartup(B, T -- 16, G, S)$(pGen(G, 'min_up', S) > 16)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 28
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1410      + vStartup(B, T -- 17, G, S)$(pGen(G, 'min_up', S) > 17)
1411      + vStartup(B, T -- 18, G, S)$(pGen(G, 'min_up', S) > 18)
1412      + vStartup(B, T -- 19, G, S)$(pGen(G, 'min_up', S) > 19)
1413      + vStartup(B, T -- 20, G, S)$(pGen(G, 'min_up', S) > 20)
1414      + vStartup(B, T -- 21, G, S)$(pGen(G, 'min_up', S) > 21)
1415      + vStartup(B, T -- 22, G, S)$(pGen(G, 'min_up', S) > 22)
1416      + vStartup(B, T -- 23, G, S)$(pGen(G, 'min_up', S) > 23)
1417      + vStartup(B, T -- 24, G, S)$(pGen(G, 'min_up', S) > 24)
1418      + vStartup(B, T -- 25, G, S)$(pGen(G, 'min_up', S) > 25)
1419      + vStartup(B, T -- 26, G, S)$(pGen(G, 'min_up', S) > 26)
1420      + vStartup(B, T -- 27, G, S)$(pGen(G, 'min_up', S) > 27)
1421      + vStartup(B, T -- 28, G, S)$(pGen(G, 'min_up', S) > 28)
1422      + vStartup(B, T -- 29, G, S)$(pGen(G, 'min_up', S) > 29)
1423      + vStartup(B, T -- 30, G, S)$(pGen(G, 'min_up', S) > 30)
1424      + vStartup(B, T -- 31, G, S)$(pGen(G, 'min_up', S) > 31)
1425      + vStartup(B, T -- 32, G, S)$(pGen(G, 'min_up', S) > 32)
1426      + vStartup(B, T -- 33, G, S)$(pGen(G, 'min_up', S) > 33)
1427      + vStartup(B, T -- 34, G, S)$(pGen(G, 'min_up', S) > 34)
1428      + vStartup(B, T -- 35, G, S)$(pGen(G, 'min_up', S) > 35)
1429      + vStartup(B, T -- 36, G, S)$(pGen(G, 'min_up', S) > 36)
1430      + vStartup(B, T -- 37, G, S)$(pGen(G, 'min_up', S) > 37)
1431      + vStartup(B, T -- 38, G, S)$(pGen(G, 'min_up', S) > 38)
1432      + vStartup(B, T -- 39, G, S)$(pGen(G, 'min_up', S) > 39)
1433      + vStartup(B, T -- 40, G, S)$(pGen(G, 'min_up', S) > 40)
1434      + vStartup(B, T -- 41, G, S)$(pGen(G, 'min_up', S) > 41)
1435      + vStartup(B, T -- 42, G, S)$(pGen(G, 'min_up', S) > 42)
1436      + vStartup(B, T -- 43, G, S)$(pGen(G, 'min_up', S) > 43)
1437      + vStartup(B, T -- 44, G, S)$(pGen(G, 'min_up', S) > 44)
1438      + vStartup(B, T -- 45, G, S)$(pGen(G, 'min_up', S) > 45)
1439      + vStartup(B, T -- 46, G, S)$(pGen(G, 'min_up', S) > 46)
1440      + vStartup(B, T -- 47, G, S)$(pGen(G, 'min_up', S) > 47)
1441      + vStartup(B, T -- 48, G, S)$(pGen(G, 'min_up', S) > 48)
1442      + vStartup(B, T -- 49, G, S)$(pGen(G, 'min_up', S) > 49)
1443      ;
1444   
1445  eMinDownTime(B, T, G, S)$( B_SIM(B)
1446                          and G_UC(G)
1447                          and pGen(G, 'min_down', S) > 1
1448                          and pGen(G,'gen_size', S) <> 0 ) ..
1449      (vCapOffMaint(B, T, G, S) / pGen(G,'gen_size', S) - vUnitCommit(B, T, G, S))
1450      =g=
1451      vShutdown(B, T, G, S)
1452      + vShutDown(B, T -- 1, G, S)$(pGen(G, 'min_down', S) > 1)
1453      + vShutDown(B, T -- 2, G, S)$(pGen(G, 'min_down', S) > 2)
1454      + vShutDown(B, T -- 3, G, S)$(pGen(G, 'min_down', S) > 3)
1455      + vShutDown(B, T -- 4, G, S)$(pGen(G, 'min_down', S) > 4)
1456      + vShutDown(B, T -- 5, G, S)$(pGen(G, 'min_down', S) > 5)
1457      + vShutDown(B, T -- 6, G, S)$(pGen(G, 'min_down', S) > 6)
1458      + vShutDown(B, T -- 7, G, S)$(pGen(G, 'min_down', S) > 7)
1459      + vShutDown(B, T -- 8, G, S)$(pGen(G, 'min_down', S) > 8)
1460      + vShutDown(B, T -- 9, G, S)$(pGen(G, 'min_down', S) > 9)
1461      + vShutDown(B, T -- 10, G, S)$(pGen(G, 'min_down', S) > 10)
1462      + vShutDown(B, T -- 11, G, S)$(pGen(G, 'min_down', S) > 11)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 29
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1463      + vShutDown(B, T -- 12, G, S)$(pGen(G, 'min_down', S) > 12)
1464      + vShutDown(B, T -- 13, G, S)$(pGen(G, 'min_down', S) > 13)
1465      + vShutDown(B, T -- 14, G, S)$(pGen(G, 'min_down', S) > 14)
1466      + vShutDown(B, T -- 15, G, S)$(pGen(G, 'min_down', S) > 15)
1467      + vShutDown(B, T -- 16, G, S)$(pGen(G, 'min_down', S) > 16)
1468      + vShutDown(B, T -- 17, G, S)$(pGen(G, 'min_down', S) > 17)
1469      + vShutDown(B, T -- 18, G, S)$(pGen(G, 'min_down', S) > 18)
1470      + vShutDown(B, T -- 19, G, S)$(pGen(G, 'min_down', S) > 19)
1471      + vShutDown(B, T -- 20, G, S)$(pGen(G, 'min_down', S) > 20)
1472      + vShutDown(B, T -- 21, G, S)$(pGen(G, 'min_down', S) > 21)
1473      + vShutDown(B, T -- 22, G, S)$(pGen(G, 'min_down', S) > 22)
1474      + vShutDown(B, T -- 23, G, S)$(pGen(G, 'min_down', S) > 23)
1475      + vShutDown(B, T -- 24, G, S)$(pGen(G, 'min_down', S) > 24)
1476      + vShutDown(B, T -- 25, G, S)$(pGen(G, 'min_down', S) > 25)
1477      + vShutDown(B, T -- 26, G, S)$(pGen(G, 'min_down', S) > 26)
1478      + vShutDown(B, T -- 27, G, S)$(pGen(G, 'min_down', S) > 27)
1479      + vShutDown(B, T -- 28, G, S)$(pGen(G, 'min_down', S) > 28)
1480      + vShutDown(B, T -- 29, G, S)$(pGen(G, 'min_down', S) > 29)
1481      + vShutDown(B, T -- 30, G, S)$(pGen(G, 'min_down', S) > 30)
1482      + vShutDown(B, T -- 31, G, S)$(pGen(G, 'min_down', S) > 31)
1483      + vShutDown(B, T -- 32, G, S)$(pGen(G, 'min_down', S) > 32)
1484      + vShutDown(B, T -- 33, G, S)$(pGen(G, 'min_down', S) > 33)
1485      + vShutDown(B, T -- 34, G, S)$(pGen(G, 'min_down', S) > 34)
1486      + vShutDown(B, T -- 35, G, S)$(pGen(G, 'min_down', S) > 35)
1487      + vShutDown(B, T -- 36, G, S)$(pGen(G, 'min_down', S) > 36)
1488      + vShutDown(B, T -- 37, G, S)$(pGen(G, 'min_down', S) > 37)
1489      + vShutDown(B, T -- 38, G, S)$(pGen(G, 'min_down', S) > 38)
1490      + vShutDown(B, T -- 39, G, S)$(pGen(G, 'min_down', S) > 39)
1491      + vShutDown(B, T -- 40, G, S)$(pGen(G, 'min_down', S) > 40)
1492      + vShutDown(B, T -- 41, G, S)$(pGen(G, 'min_down', S) > 41)
1493      + vShutDown(B, T -- 42, G, S)$(pGen(G, 'min_down', S) > 42)
1494      + vShutDown(B, T -- 43, G, S)$(pGen(G, 'min_down', S) > 43)
1495      + vShutDown(B, T -- 44, G, S)$(pGen(G, 'min_down', S) > 44)
1496      + vShutDown(B, T -- 45, G, S)$(pGen(G, 'min_down', S) > 45)
1497      + vShutDown(B, T -- 46, G, S)$(pGen(G, 'min_down', S) > 46)
1498      + vShutDown(B, T -- 47, G, S)$(pGen(G, 'min_down', S) > 47)
1499      + vShutDown(B, T -- 48, G, S)$(pGen(G, 'min_down', S) > 48)
1500      + vShutDown(B, T -- 49, G, S)$(pGen(G, 'min_down', S) > 49)
1501      ;
1502   
1503   
1504  * Include water limiting equations and associated parameters and variables
1505  $if set calc_water $include ../shared/WaterEquations
1506   
1507  * Disable influence of $ settings from sub-models
1508  $offglobal
1509   
1510  *================================*
1511  *       The Actual Model         *
1512  *================================*
1513  *====== objective function and components
1514   
1515  * == Objective (eObjective)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 30
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1516  *
1517  * The standard objective is total cost (see below for alternative objective options). We use
1518  * our definition of this equation whenever we are the main model. Otherwise we expect our caller
1519  * to define a similar objective function.
1520  *
1521  $ifthen.we_are_main   UnitCommit == UnitCommit
1522  $setglobal obj_var vOpsCost
1523   
1524  eObjective  ..  vObjective =e= sum[(S), pScenWeight(S) * vOpsCost(S)];
1525   
1526  * Allows uniform use of total cost for both operations and planning models
1527  eTotalCost (S)  ..  vTotalCost (S) =e= vOpsCost (S);
1528   
1529  $endif.we_are_main
1530   
1531  * == Operations Cost (eOpsCost)
1532  * In this equation, A number of terms are always included:
1533  *     -- fixed O&M cost
1534  *     -- variable O&M costs
1535  *     -- Fuel Costs
1536  *     -- Carbon Costs
1537  * In addition, other terms are added if needed based on command-line settings:
1538  *     -- Startup Costs
1539  *     -- Non served energy costs
1540  *     -- Water costs
1541  *     -- Maintenance costs
1542  *
1543  * Units:
1544  *  all M$ unless otherwise noted
1545  eOpsCost(S)    .. vOpsCost(S) =e= vFixedOMCost(S)
1546                                  + vVariableOMCost(S)
1547                                  + vFuelCost(S)
1548                                  + vCarbonCost(S)
1549                                  + vPenaltyCost(S)
1550  $ifthen set startup
1551                                  + vStartupCost(S)
1552  $endif
1553  $ifthen not set no_nse
1554                                  + vNonServedCost(S)
1555  $endif
1556  $endif
1557  $ifthen set maint
1558                                  + vMaintCost(S)
1559  $endif
1560                                  ;
1561   
1562   
1563  * == Fixed Operations and Maintenance Costs (eFixedOMCost)
1564  *
1565  * Units & Scaling:
1566  *   1x      c_fix_om        M$/GW-yr
1567  eFixedOMCost(S)  .. vFixedOMCost(S) =e= sum[(  G), pGen(G,'c_fix_om', S)*(pGen(G,'cap_cur', S))]
1568                                              * pFractionOfYear(S);
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 31
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1569   
1570  * == Variable Operations and Maintenance Costs (eVarOMCost)
1571  *
1572  * Units & Scaling:          external    this eq.
1573  *   1000x   vVarOMCost      M$          k$
1574  *   1x      c_var_om        $/MWh   to  k$/GWh
1575  *   1x      vPwrOut         GW
1576  *   1x      Demand(dur)     hr
1577  eVarOMCost(S)    .. vVariableOMCost(S)*1e3 =e= sum[(B_SIM, T, G), pGen(G,'c_var_om', S)*vPwrOut(B_SIM, T, G, S)*pDemand(B_SIM, T, 'dur', S)];
1578   
1579   
1580  * == Total Fuel Costs (eFuelCost)
1581  *
1582  * Units & Scaling:          external    this eq.
1583  *   1x      vFuelCost       M$      to  M$
1584  *   1x      Fuel(cost)      $/MMBTU to  M$/BTUe12
1585  *   1x      vFuelUse        BTUe12
1586  eFuelCost(S)     .. vFuelCost(S) =e= sum[(GEN_FUEL_MAP(G,F)), pFuel(F,'cost', S)*vFuelUse(F, G, S)];
1587   
1588   
1589  * == Carbon Emision Costs (eCarbonCost)
1590  *carbon cost =  carbon price * carbon emissions
1591  * Units & Scaling:          external    this eq.
1592  *   1x      vCarbonCost     M$
1593  *   1x      pCostCO2        $/t     to  M$/MT
1594  *   1x      vCarbonEmmit    kT
1595  eCarbonCost(S)   .. vCarbonCost(S) =e= pCostCO2(S) * sum[(G), vCarbonEmissions(G,S)];
1596   
1597   
1598  * == Startup Costs (eStartupCost)
1599  * Includes only fixed costs for startup. Costs associated with startup fuel use is captured
1600  * as part of the total fuel use by generator. Hence startup fuel and carbon costs are computed
1601  * as part of fuel and carbon costs respectively
1602  *
1603  * Units & Scaling:              external            this eq.
1604  *   1000x   vStartCost          Musd        to      Kusd
1605  *   1x      c_start_fix         Kusd/start
1606  $ifthen set startup
1607      eStartupCost(S)  .. vStartupCost(S)*1e3 =e=
1608                              sum[(B_SIM, T,G_UC),
1609                                  vStartup(B_SIM, T, G_UC, S)
1610                                      * ( pGen(G_UC, 'c_start_fix', S) )
1611                                 ];
1612  *Note: fuel use included elsewhere
1613  $endif
1614   
1615  * == Total non-served energy costs (eNonServedCost)
1616  * Units & Scaling:             external    this eq.
1617  *   1x      vNonServedCost      M$
1618  *   1/1000x pPriceNonServe      $/MWh   to  M$/GWh
1619  *   1x      vNonServed          GWh
1620  $ifthen not set no_nse
1621      eNonServedCost(S) .. vNonServedCost(S) =e=
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 32
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1622                                  sum[(B_SIM, T), vNonServed(B_SIM, T, S)*pPriceNonServed*pDemand(B_SIM, T, 'dur', S)]/1e3;
1623  $endif
1624   
1625  * == Penalty costs (ePenaltyCost)
1626  * Units & Scaling:             external         this eq.
1627  *   1x      vPenaltyCost        M$
1628  *   1x      vUnderPlanReserve   GW-firm
1629  *   1/1000x plan_margin_penalty   $/MW-firm   to  M$/GW-firm
1630  *   1x      vUnderRPS           GWh
1631  *   1/1000x vNonServed          $/MWh       to  M$/GWh
1632      ePenaltyCost(S) .. vPenaltyCost(S) =e= 0
1633  $endif
1634  $endif
1635                                  ;
1636   
1637   
1638  *====== Intermediate Calculations
1639   
1640  * == Carbon Emissions (eCarbonEmissions) by generator
1641  * carbon emissions (Mt) = (fuel use - ccs) * carbon intensity + embedded carbon * new capacity
1642  *
1643  * Notes:
1644  *  -- we assume that the CCS system is operational during startup and apply ccs rate to
1645  *      all fuel usage
1646  *
1647  * Units & Scaling:      external        this eq.
1648  *   1x      pFuel(co2)      t/MMBTU     to  Mt/BTUe12
1649  *   1x      vCarbonEm       Mt
1650  *   1x      vFuelUse        BTUe12
1651  *   1x      vNewCapacity    GW
1652  *   1x      co2_embed       Mt/GW
1653  eCarbonEmissions(G, S)   .. vCarbonEmissions(G, S) =e=
1654                                  sum[(GEN_FUEL_MAP(G,F)),
1655                                      vFuelUse(F,G,S) *pFuel(F,'co2', S)*(1-pGen(G,'co2_ccs', S))
1656                                     ]
1657  $endif
1658                              ;
1659   
1660   
1661  * == Fuel Consumption by generator for each period (eInstantFuelByGen)
1662  * This equation implements an afine approximation (linear + intercept) for fuel use as a
1663  * function of power output. This equation is suppressed and replaced with multiple heatrate
1664  * segments for generators with piece-wise linear fuel use.
1665  *
1666  * Units & Scaling:      external        this eq.
1667  *   1x  vInstantFuel    BTUe9/hr    to  BTUe9/hr
1668  *   1x  heatrate        MMBTU/MWh   to  BTUe9/GWh
1669  *   1x  p0_fuel         BTUe9/hr
1670  *   1x  vPwrOut         GW
1671  *   1x  vUnitCommit     integer (no units)
1672  eInstantFuelByGen(B, T, G, S)$( B_SIM(B)
1673                               and (pGen(G,'gen_size', S) > 0 and not G_PWL_COST(G)) ) ..
1674      vInstantFuel(B, T, G, S) =e= pGen(G,'heatrate', S)*vPwrOut(B, T,G,S)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 33
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1675                              + pGen(G, 'p0_fuel', S)*vUnitCommit(B, T,G,S)$G_UC(G)
1676  * For units not under unit commitment, divide up the p0 fuel usage such that it is fully
1677  * accounted for at the p0_recover output level (typically 85%).
1678                              + pGen(G, 'p0_fuel', S)/pGen(G,'gen_size', S)/0.85
1679                                  *vPwrOut(B, T,G,S)$(not G_UC(G))
1680                              ;
1681  $endif
1682   
1683  * == Total Fuel Consuption by Generator (eFuelUse)
1684  * Includes both startup and instantaneous use
1685  *
1686  * Units & Scaling:          external        this eq.
1687  *   1000x   vFuelUse        BTUe12      to  BTUe9
1688  *   1x      vInstantFuel    BTUe9/hr
1689  *   1x      Demand(dur)     hr
1690  *   1x      fuel_start      BTUe9/start
1691  eFuelUse(F,G,S)$(GEN_FUEL_MAP(G,F)) .. vFuelUse(F,G,S)*1000 =e= sum[(B_SIM, T),
1692                                                  vInstantFuel(B_SIM, T, G, S)*pDemand(B_SIM, T, 'dur', S)
1693  $ifthen set startup
1694                                                  + vStartup(B_SIM, T, G, S)$(G_UC(G)) * pGen(G, 'fuel_start', S)
1695  $endif
1696                                              ];
1697   
1698   
1699  *====== Constraints
1700   
1701  * == Supply/Demand Balance (eDemand)
1702  * It is important to use equality here, since we are interested in effects of minimum output limits, etc.
1703  *
1704  * Note: reserves are enforced in separate equations below
1705  *
1706  * Units & Scaling:      external        this eq.
1707  *   all in GW
1708  eDemand (B, T,S)$B_SIM(B)    .. sum[(G), vPwrOut(B, T, G,S)]
1709  $ifthen not set no_nse
1710                      + vNonServed(B, T,S)
1711  $endif
1712                      =e= pDemand(B, T,'power',S);
1713   
1714   
1715  $endif.no_rsrv
1716   
1717   
1718  *======  Additional Constraints
1719   
1720  * == Renewable Portfolio Standard (eRPS)
1721  * renewable energy / total energy > RPS
1722  *
1723  * Units & Scaling:
1724  *   vPwrOut         GW
1725  *   Demand(dur)     hr
1726  *   pRPS            p.u.
1727  eRPS(S)        ..  sum[(B_SIM, T, G_RPS), vPwrOut(B_SIM, T, G_RPS,S)*pDemand(B_SIM, T, 'dur',S)]
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 34
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1728  $endif
1729                     =g=
1730                     pRPS(S)*sum[(G, B_SIM, T), vPwrOut(B_SIM, T,G,S)*pDemand(B_SIM, T, 'dur', S)];
1731   
1732   
1733  * == Carbon Limit (eCarbonCap)
1734  * Units & Scaling:
1735  *   all in Mt CO2(e)
1736  eCarbonCap(S)  ..  sum[(G), vCarbonEmissions(G, S)] =l= pCarbonCap(S);
1737   
1738   
1739  * == Force use of renewables if required (eForceRenewables)
1740  *force the use of all renewable output (up to 100% of load)
1741  $endif.force_re
1742   
1743   
1744  *======  Unit Commitment Constraints
1745   
1746  * == Limit commitments to available capacity (eUnitCommit)
1747  *Note: the $subset(setname) format only defines the equation for members of G that are also in G_UC
1748  * Units & Scaling:
1749  *   vUnitCommit             #units (# of gens)
1750  *   gen_size                GW/unit
1751  *   capacity_G              GW
1752  *   pGenAvail, derate       p.u.
1753  eUnitCommit(B, T,G,S)$( B_SIM(B)
1754                       and G_UC(G) )
1755                  .. vUnitCommit(B, T,G,S)
1756                      =l=
1757                      vCapOffMaint(B, T, G, S) / pGen(G, 'gen_size',S) *
1758  $else
1759                      (
1760  $endif
1761                      pGenAvail(B, T, G, S)
1762                      );
1763   
1764  * == Integerization for required gens (eUnitCommitInteger)
1765  * This simple equation works since vUcInt is defined as an integer variable, and hence the
1766  * otherwise continuous vUnitCommit will take on integer values as well for all members of the
1767  * G_UC_INT subset. The redundant continuous variable should be removed during (MI)LP pre-solve
1768  $ifthen.not_uc_lp not set uc_lp
1769     eUnitCommitInteger(B, T,G,S)$(B_SIM(B) and G_UC_INT(G) ) .. vUnitCommit(B, T,G,S) =e= vUcInt(B, T,G,S);
1770     eStartUpInteger(B, T, G, S)$(B_SIM(B) and G_UC_INT(G) ) .. vStartUp(B,T,G,S) =e= vStartInt(B,T,G,S);
1771     eShutDownInteger(B, T, G, S)$(B_SIM(B) and G_UC_INT(G) ) .. vShutDown(B,T,G,S) =e= vShutInt(B,T,G,S);
1772  $endif.not_uc_lp
1773   
1774  * == If startup costs or restrictions in use, compute startup & shutdowns (eState)
1775  $ifthen set compute_state
1776  *Note: the $subset(setname) format only defines the equation for members of G that are also in G_UC
1777     eState  (B, T,G,S)$(B_SIM(B) and G_UC(G))  ..
1778                  vUnitCommit(B, T,G,S)
1779                  =e= vUnitCommit(B, T -- 1,G,S) + vStartUp(B, T,G,S) - vShutDown(B, T,G,S);
1780  $endif
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 35
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1781   
1782  * == Limit the total number of startups per generator group (eMaxStart)
1783  * Note: pGen(max_start) already scaled from starts/yr to starts/model_timeframe by AdvPwrDataRead
1784  *
1785  * Units & Scaling:
1786  *   vStartUp        starts, summed over all demand periods.
1787  *   gen_size        GW/unit
1788  *   capacity_G      GW
1789  *   max_start       starts/unit/model_duration
1790  $endif
1791   
1792  *======  Ramping Constraints ======
1793  $ifthen.ramp_eq set ramp
1794   
1795  * ===== Ramping for Clusters
1796  * In this case, we restrict ramping to the limits of plants that are on-line for both this period
1797  * and last period + the unit minimums for any units that startup or shutdown. Using the unit
1798  * minimums is logical for startup, but conservative for shutdown because it forces units to ramp
1799  * down before shutting off. It is tempting to use gen_size of shutdowns for ramp down, but this
1800  * is likely incorrect because the plant is probably not running at full output power.
1801  *
1802  * Note: this constraint is made trickier by our use of lumped integer commitment since we don't know
1803  * output levels for individual units.
1804   
1805  * == Upward Ramp Limits with Unit Commitment (eRampUpLimitUC)
1806  * Use these integer based limits for technologies with integer unit_commitments
1807  * For UC ramp-up = ramp rate for committed units + startups
1808  *  with startups limited either by min_out or by ramp_rate for new units
1809  *
1810  * Note: We ignore demand block durations and impose this limit between blocks
1811  *
1812  * Units & Scaling:
1813  *   vPwrOut, unit_min       GW
1814  *   gen_size                GW/unit
1815  *   ramp_max                p.u./hr
1816  *   vUnitCommit, vStartup   #units
1817   
1818      eRampUpLimitUC(B, T,G,S)$( B_SIM(B)
1819                              and G_UC(G)
1820                              and G_RAMP(G) )
1821                      .. vPwrOut(B, T, G, S) - vPwrOut(B, T -- 1, G, S)
1822                          =l=
1823                          pGen(G, 'ramp_max', S)*pGen(G, 'gen_size', S)
1824                              * (vUnitCommit(B,T,G,S) - vStartup(B,T,G,S))
1825                          + min(pGen(G, 'gen_size', S),
1826                                max(pGen(G, 'unit_min', S),
1827                                    pGen(G, 'quick_start', S)*pGen(G, 'gen_size', S),
1828                                    pGen(G, 'ramp_max', S)*pGen(G, 'gen_size', S)
1829                                   )
1830                               )*vStartup(B,T,G,S)
1831                          - pGen(G, 'unit_min', S)*vShutdown(B,T,G,S);
1832   
1833   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 36
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1834  * == Downward Ramp Limits with Unit Commitment (eRampDownLimitUC)
1835  * For UC ramp-down = ramp rate for committed units + shutdowns
1836  *  with shutdowns limited either by min_out or by ramp_rate for new units
1837  *
1838  * Note: We ignore demand block durations and impose this limit between blocks
1839  *
1840  * Units & Scaling:
1841  *   vPwrOut, unit_min       GW
1842  *   gen_size                GW/unit
1843  *   ramp_max                p.u./hr
1844  *   vUnitCommit, vShutDown  #units
1845      eRampDownLimitUC(B, T,G,S)$( B_SIM(B)
1846                                and G_UC(G)
1847                                and G_RAMP(G))
1848                      ..
1849                      vPwrOut(B, T -- 1, G, S) - vPwrOut(B, T, G, S)
1850                      =l=
1851                      pGen(G, 'ramp_max', S)*pGen(G, 'gen_size', S)
1852                          * (vUnitCommit(B,T,G,S) - vStartup(B,T,G,S))
1853                      - pGen(G, 'unit_min', S)*vStartup(B,T,G,S)
1854                      + min(pGen(G, 'gen_size', S),
1855                            max(pGen(G, 'unit_min', S),
1856                                pGen(G, 'ramp_max', S)*pGen(G, 'gen_size', S)
1857                               )
1858                           )*vShutDown(B,T,G,S);
1859   
1860   
1861  * == Upward Ramp Limits for non-Unit-Commitment generators (eRampUpLimit)
1862  * Use total capacity based limits for everything else
1863  * Rather than using the De Jonghe, et al 2011 ramping formulation based on FlexUp and FlexDown
1864  * we use explicit ramping limit relations. We do this b/c FlexUp and FlexDown try to capture
1865  * flexibility _within_ the hour, rather than between hours as in ramping
1866  *
1867  * This equation replaces eq 14 in De Jonghe, et al 2011. Here we simply assume that
1868  * all capacity can contribute to ramping, since a given power out level could be from units
1869  * running under full capacity. This limit exactly matches the UC limit if we assume all non-UC
1870  * units are always running. It can over & under estimate with startup/shutdown.
1871  *
1872  * Note: We ignore demand block durations and impose this limit between blocks
1873  *
1874  * Units & Scaling:
1875  *   vPwrOut, capacity       GW
1876  *   ramp_max, quick_start   p.u./hr
1877  *   pGenAvail               p.u.
1878   
1879      eRampUpLimit(B, T,G,S)$( B_SIM(B)
1880                            and G_RAMP(G)
1881                            and not G_UC(G) ) ..
1882                      vPwrOut(B, T -- 1, G, S) - vPwrOut(B, T, G, S)
1883                      =l=
1884                      max(pGen(G, 'ramp_max', S), pGen(G, 'quick_start', S))
1885                        * ( vCapOffMaint(B, T, G, S) *pGenAvail(B, T, G, S));
1886   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 37
"Flexible Unit Commitment Model"
C o m p i l a t i o n


1887  * == Downward Ramp Limits for non-Unit-Commitment generators (eRampDownLimit)
1888  * Likewise, this equation replaces eq 15 in De Jonghe, et al 2011. Here we simply assume that
1889  * all capacity can contribute to ramping, since a given power out level could be from units
1890  * running under full capacity. This limit exactly matches the UC limit if we assume all non-UC
1891  * units are always running. It can over & under estimate with startup/shutdown.
1892  *
1893  * Units & Scaling:
1894  *   vPwrOut, capacity       GW
1895  *   ramp_max                p.u./hr
1896  *   pGenAvail               p.u.
1897   
1898      eRampDownLimit(B, T,G,S)$( B_SIM(B)
1899                              and G_RAMP(G)
1900                              and not G_UC(G) ) ..
1901                      vPwrOut(B, T -- 1, G, S) - vPwrOut(B, T, G, S)
1902                      =l=
1903                      pGen(G, 'ramp_max', S) * (vCapOffMaint(B, T, G, S)*pGenAvail(B,T,G,S));
1904  $endif.ramp_eq
1905   
1906  *================================*
1907  *        Handle The Data         *
1908  *================================*
1909   
1910  * Read in standard data file set & handle command-line overrides. Including
1911  *  -- sys, gens, demand, fuel, & avail data
1912  *  -- update file
1913  *  -- command-line overrides including: demscale, rps, co2cost, co2cap
1914  *  -- additional options including: force_gen_size, min_gen_size, basic_pmin,
1915  *      uc_ignore_unit_min, avg_avail
1916  * Also computes sub-sets for G_UC, G_RPS, G_WIND, G_RAMP
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/AdvPwrDataRead.gms
1917  $include ../shared/AdvPwrDataRead
1918   
1919  *skip if data is already read (for sequential simulations)
1920  $if set data_has_been_read $goto label_skip_data_read
1921   
1922  *Supress listfile output for includes
12339  $onlisting
12340   
12341  * ===== Additional Command Line Parameters
12342  *override CO2 price with command line setting if provided
12343  $if set co2cost pCostCO2(S)=%co2cost%;
12344   
12345  *override Demand scaling with command line setting if provided
12346  pDemandScale(S)=0.095;
12347   
12348  *override RPS level with command line setting if provided
12349  $if set rps pRPS(S)=%rps%;
12350   
12351  *override Carbon Cap (Kt) with command line setting if provided
12352  $if set co2cap pCarbonCap(S)=%co2cap%;
12353   
12354  *override planning margin value if provided a fraction < 100% (no spaces allowed)
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 38
"Flexible Unit Commitment Model"
C o m p i l a t i o n


12355  $if set plan_margin $if not "%plan_margin%"=="on" $if not "%plan_margin%"=="off" $ife %plan_margin%<1   pPlanReserve=%plan_margin%;
12356   
12357  *allow user to specify a uniform gen_size
12358  $if set force_gen_size pGen(G,'gen_size', S) = %force_gen_size%;
12359  *and minimum plant size
12360  $if set min_gen_size pGen(G,'gen_size', S) = max(pGen(G,'gen_size', S), %min_gen_size%);
12361   
12362  *remove p_min value if not used
12363  pGen(G, 'p_min', S) = 0;
12364   
12365  *Zero out capital costs if not used
12366  $if set no_capital pGen(G, 'c_cap', S) = 0;
12367   
12368  *Set derating for maintenance only if requested
12369  $if set derate_to_maint pGen(G, 'derate', S) = 1-pGen(G, 'maint_wks', S)/52;
12370   
12371  *Zero out quickstart fraction of spin/flex reserves when disabled
12372  $if set no_quick_st pQuickStSpinSubFract = 0;
12373   
12374   
12375  *================================*
12376  *    Additional Calculations     *
12377  *================================*
12378  * ====== Calculate subsets
12379  *only include elements where the generator fuel name parameter matches the fuel name parameter
12380  GEN_FUEL_MAP(G, F)$(pGenData(G,'fuel') = pFuelData(F,'name')) = yes;
12381   
12382  *only solve unit commitment for plants with non-zero minimum outputs
12383  $setglobal uc_ignore_unit_min 0
12384  $setglobal uc_int_unit_min 0
12385   
12386  ** Assign gens to unit commitment sets
12387  *start by setting all to not included
12388  G_UC(G) = no;
12389  G_UC_INT(G) = no;
12390   
12391  *then add in if needed, note duplicate code b/c $ifthen doesn't like or
12392  $setglobal unit_commit 1
12393  $ifthen.uc_set set unit_commit
12394  $elseif.uc_on     1 == 1
12395      G_UC(G)$(pGenData(G,'unit_min') > 0) = yes;
12396      G_UC_INT(G)$(G_UC(G) and (pGenData(G,'unit_min') > 0)) = yes;
12397  $endif.uc_on
12398  $endif.uc_set
12399   
12400  *include all wind, solar, and geotherm plants in the RPS standard
12401  acronyms wind, solar, geotherm;
12402  G_RPS(G)$(pGenData(G,'fuel') = wind) = yes;
12403  G_RPS(G)$(pGenData(G,'fuel') = solar) = yes;
12404  G_RPS(G)$(pGenData(G,'fuel') = geotherm) = yes;
12405   
12406  *create set for wind generators (for increased reserve requirements)
12407  G_WIND(G)$(pGenData(G,'fuel') = wind) = yes;
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 39
"Flexible Unit Commitment Model"
C o m p i l a t i o n


12408   
12409  *Only worry about ramping for plants with ramp limits < 1
12410  G_RAMP(G)$(pGenData(G,'ramp_max') < 1) = yes;
12411   
12412  *Handle time/demand subsets
12413  * Note: for simple demand subsets to work, three control variables must be defined:
12414  *          d_subset: flag to use subsets, rather than all demand periods
12415  *          d_start:  first demand block to include (an integer)
12416  *          d_end:    last demand block to include (an integer)
12417  $else.d_subset
12418      B_SIM(B) = yes;
12419  $endif.d_subset
12420   
12421   
12422  * ====== Calculate parameters
12423  *Scale demand
12424  pDemand(B, T,'power', S) = pDemandScale(S) * pDemand(B, T,'power', S);
12425   
12426  *compute capital recovery factor (annualized payment for capital investment)
12427  $if declared pCRF
12428   
12429  *Remove Wind driven Flex Down constraints if we allow wind shedding. b/c rather than
12430  *ramping thermal down, we could simply shed wind
12431  $ifthen.rsrv set rsrv
12432  $ifthen not set force_renewables
12433      pWindFlexDownForecast = 0;
12434      pWindFlexDownCapacity = 0;
12435  $endif
12436  $endif.rsrv
12437   
12438  * -- Use piecewise linear data for affine parameters if requested
12439  $endif
12440   
12441  *Assign +INF to the cost of non served energy if it is not allowed
12442  $if set no_nse pPriceNonServed = +inf;
12443   
12444  display "Generator Data Table after AdvPwrDataRead...";
12445  display pGen;
12446   
12447  $endif.debug_avail
12448   
12449  * ====== Demand period based parameters
12450  parameters
12451  * Additional Parameters that may not have been defined
12452      pGenAvgAvail (G, S)            "average availability (max capacity factor)"
12453   
12454      pTotalDurationHr(S)            "the total time for the demand data in hrs"
12455      pFractionOfYear (S)            "fraction of year covered by the simulation"
12456      pDemandMax(S)                  "maximum demand for scenario [GW]"
12457      pDemandAvg(S)                  "average demand for scenario [GW]"
12458      pBlockDurWk(B, S)              "duration for each block in weeks"
12459  ;
12460   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 40
"Flexible Unit Commitment Model"
C o m p i l a t i o n


12461  pTotalDurationHr(S) = sum[(B, T), pDemand(B, T, 'dur', S)];
12462  pFractionOfYear(S) = pTotalDurationHr(S)/8760;
12463  pBlockDurWk(B, S) = sum[(T), pDemand(B, T, 'dur', S)] / 168;
12464   
12465  $endif
12466   
12467   
12468  *Find resulting max demand
12469  pDemandMax(S) = smax[(B, T), pDemand(B, T, 'power', S)];
12470  *And resulting average demand
12471  pDemandAvg(S) = sum[(B, T), pDemand(B, T, 'power', S)*pDemand(B, T, 'dur', S)] / pTotalDurationHr(S);
12472   
12473  *Compute average availability for each generator
12474  pGenAvgAvail(G, S) = sum[(B, T), pGenAvail(B, T, G, S)*pDemand(B, T, 'dur', S)] / pTotalDurationHr(S);
12475   
12476   
12477  *Convert time varying to average availabilities if desired
12478  $endif
12479   
12480  * -- Scale annual values based on total simulation time
12481  * max_num of startups
12482  $endif
12483   
12484  $setglobal data_has_been_read
12485  $label label_skip_data_read
12486   
12487   
12488  * ====== Additional Calculations...
12489   
12490  * == Identify generators for piecewise linear approximations
12491  * Start by excluding all generators, which also sets thing properly for the non-pwl_cost case
12492  G_PWL_COST(G) = no;
12493  * Then if pwl_cost is set, we include any generator's that have a non-zero slope or intercept
12494  * for the first segment, and include any segments with non-zero slope or intercepts
12495  $endif
12496   
12497  * == Compute max integers for unit_commitment states
12498  *Note: by default GAMS restricts to the range 0 to 100 so this provides two features:
12499  *  1) allowing for higher integer numbers for small plant types as required for a valid solution
12500  *  2) Restricting the integer search space for larger plants
12501  *Important: For capacity expansion problems, this parameter MUST be changed to account for new plants
12502   
12503  $ifthen.max_plants UnitCommit == UnitCommit
12504   
12505  *Here we simply use the current capacity divided by the plant size.
12506    pMaxNumPlants(G, S)$pGen(G, 'gen_size', S) = ceil(pGen(G, 'cap_cur', S)/pGen(G, 'gen_size', S));
12507   
12508  $ifthen set unit_commit
12509      vUcInt.up(B_SIM, T, G_UC, S) = pMaxNumPlants(G_UC, S);
12510  $endif
12511   
12512  $ifthen not set uc_lp
12513      vStartInt.up(B_SIM, T, G_UC, S) = pMaxNumPlants(G_UC, S);
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 41
"Flexible Unit Commitment Model"
C o m p i l a t i o n


12514      vShutInt.up(B_SIM, T, G_UC, S) = pMaxNumPlants(G_UC, S);
12515  $endif
12516   
12517  $ifthen set maint
12518      vOnMaint.up(B, G, S)$(pGen(G, 'maint_wks', S) > 0) = ceil(0.15 * pMaxNumPlants(G, S));
12519      vMaintBegin.up(B, G, S)$(pGen(G, 'maint_wks', S) > 0) = ceil(0.15 * pMaxNumPlants(G, S));
12520      vMaintEnd.up(B, G, S)$(pGen(G, 'maint_wks', S) > 0) = ceil(0.15 * pMaxNumPlants(G, S));
12521  *Fix maintenance at zero if maintenance not required
12522          vOnMaint.fx(B, G, S)$(pGen(G, 'maint_wks', S) = 0) = 0;
12523      vMaintBegin.fx(B, G, S)$(pGen(G, 'maint_wks', S) = 0) = 0;
12524      vMaintEnd.fx(B, G, S)$(pGen(G, 'maint_wks', S) = 0) = 0;
12525  $endif
12526   
12527  $endif.max_plants
12528   
12529  * ===== Take some initial guesses =====
12530  vNonServed.l(B_SIM, T, S) = 0;
12531   
12532  *================================*
12533  *   Additional Data Processing   *
12534  *================================*
12535   
12536  * Enable $ variables from included model(s) to propagate back to this master file
12537  $onglobal
12538   
12539  * Include water limiting equations and associated parameters and variables
12540  $if set calc_water $include ../shared/WaterDataSetup
12541   
12542  * Disable influence of $ settings from sub-models
12543  $offglobal
12544   
12545  *================================*
12546  *       Solve & Related          *
12547  *================================*
12548  *Only run the rest of this file if we are the main function.
12549  $ifthen.we_are_main UnitCommit == UnitCommit
12550   
12551   
12552  * ======  Setup the model
12553  * Skip this definition if we are doing a restart
12554      model UnitCommit  /all/;
12555   
12556  * ======  Adjust Solver parameters
12557  * Enable/Disable Parallel processing
12558  $setglobal par_threads 1
12559  $setglobal lp_method 4
12560   
12561  *Create a solver option file
12562  $onecho > cplex.opt
       * Note: the number of threads can either be specified explicitly or using "0" for use all cores
       threads 1
        
       *Parallel mode. Options:
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 42
"Flexible Unit Commitment Model"
C o m p i l a t i o n


       * 1=deterministic & repeatable, 0=automatic, -1=opportunistic & non-repeatable 
       parallelmode 1
        
       * Conserve memory when possible... hopefully avoid crashes b/c of memory
       memoryemphasis 1
        
       * Declare solution method for pure LP, RMIP, and final MIP solve. 
       *   Options: 0=automatic, 2=Dual Simplex, 4=barrier, 6=concurrent (a race between
       * dual simplex and barrier in parallel)
       *
       * Sometimes barrier is notably faster for operations problems, but more often dual simplex wins
       * Barrier is often better for planning problems
       LPmethod 4
       * Solution method for solving the root MIP node. See description and options for LPmethod above
       startalg 4
       * Solution method for solving sub MIP nodes. See description and options for LPmethod above
       * subalg 4
        
       * Tighten LP tolerance (default 1e-6). For problems with objective values close to 1, this 
       * may be necessary to find the true optimal. In particular, with MILP, using the default can 
       * cause the final LP solve to stop short of finding the best node from the MILP branch-and-cut
       * Surprisingly, a tighter tolerance can also achieve FASTER run times for MILP, presumably
       * because the nodes can be compared more carefully.
       epopt 1e-9
        
       * Stay with barrier until the optimal solution is found rather than crossing over to simplex
       * This can run much faster for these problems, because the final simplex iterations can be 
       * slow and b/c the cross-over itself takes a good bit of time. However, the approach is not
       * robust and can fail or be slower than the default behavior. Not recommended with barrier 
       * alone (LPmethod = 4) b/c may not converge. Consider for concurrent optimization.
       *barcrossalg -1
        
       * Ignore small (dual) infeasibilities in the final LP solve. Without this setting, occasionally
       * CPLEX will get unhappy with an infeasibility on the order of 1e-6
       relaxfixedinfeas 1
        
       *enable relative epsilon optimal (cheat) parameter
       *This value is not used if cheat is defined
       relobjdif 0
        
12607  $offecho
12608   
12609  *Tell GAMS to use this option file
12610  UnitCommit.optfile = 1;
12611   
12612  * ======  Tune performance with some initial guesses and settings to speed up the solution
12613  $if set cheat UnitCommit.cheat = %cheat%;
12614   
12615   
12616  * ====== Check command line options
12617  * Check spelling of command line -- options
12618  * Notes:
12619  *  - all command line options have to have either been used already or be listed
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 43
"Flexible Unit Commitment Model"
C o m p i l a t i o n


12620  * here to avoid an error. We place it here right before the solve statment such that
12621  * if there is an error, we don't wait till post solution to report the problem
12622  $setddlist ignore_integer summary_only summary_and_power_only memo gdx out_gen_params out_gen_avail out_gen_simple p2c_debug debug_off_maint
12623   
12624  * ======  Actually solve the model
12625  $else
12626       solve UnitCommit using MIP minimizing vObjective;
12627  $endif
12628   
12629  *================================*
12630  *         Postprocessing         *
12631  *================================*
12632   
12633  * ======  Post processing computations
12634  * Most of these calculations are standardized in ../shared/calcSummary.gms
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/calcSummary.gms
12635  $include ../shared/calcSummary.gms
12636   
12637  $ontext
       ----------------------------------------------------
        Helper script to compute standardized powt-processing summary information for Advanced Power models  
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-07-15  22:00  bpalmintier   extracted from OpsLp.gms
         2  2011-07-20  15:00  bpalmintier   Corrected Renewable shedding calculations
         3  2011-09-22  16:22  bpalmintier   Added mip gap computation
         4  2011-09-28  04:15  bpalmintier   Corrected $if for pMipGap
         5  2011-10-09  12:15  bpalmintier   Added pUcIntEnabled
         6  2012-01-26  15:35  bpalmintier   Added scenario support for stochastic UC, multi-period planning, etc.
         7  2012-02-03  00:15  bpalmintier   Adjusted for carbon emissions by generator
         8  2012-02-18  22:45  bpalmintier   Corrected divide by zero error for startups of unbuilt gens
         9  2012-05-02  10:45  bpalmintier   Separate demand (D) into blocks (B) and time sub-periods (T)
       -----------------------------------------------------
12658  $offtext
12659   
12660  PARAMETERS
12661  pEnergyGen   (G, S)    "Electricity Generation by plant [TWh]"
12662  pEnergyTotal    (S)    "Total electricity Generation for the system [TWh]"
12663  pRenewableShed (B, T, G, S)    "Average Renewable energy shed during period [GWh/hr]"
12664  pTotalRenewableShedByGen(G, S)    "Total Renewable energy shed for each generator [GWh]"
12665  pTotalCarbonEmissions(S)        "Total carbon emissions [Kt CO2e]"
12666   
12667  pCapTotal (G, S)       "Total installed capacity [GW]"
12668  pRenewPercent(S)       "Percent of total energy from renewables"
12669  pUcIntEnabled(G)   "Unit Commitment Integer enabled (1), disabled (0), or not unit_commit (na)"
12670  pMipGap "relative Mixed-Integer duality gap"
12671  ;
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 44
"Flexible Unit Commitment Model"
C o m p i l a t i o n


12672   
12673  $else
12674          pCapTotal (G, S) = pGen(G, 'cap_cur', S);
12675  $endif
12676   
12677  *Scale pEnergyGen from GWh to TWh
12678  pEnergyGen(G, S) = sum[(B, T), vPwrOut.l(B, T, G, S)*pDemand(B, T, 'dur', S)]/1e3;
12679  pEnergyTotal(S) = sum[(G), pEnergyGen(G, S)];
12680  pRenewableShed(B, T,G,S)$(G_RPS(G)) = (pCapTotal(G, S)*pGenAvail(B, T, G, S) - vPwrOut.l(B, T, G, S));
12681  pTotalRenewableShedByGen(G, S)$(G_RPS(G)) = sum[(B, T), pRenewableShed(B, T,G,S)*pDemand(B, T, 'dur',S)];
12682  pTotalCarbonEmissions(S) = sum[(G), vCarbonEmissions.l(G, S)];
12683   
12684  pRenewPercent(S) = sum[(G_RPS), pEnergyGen(G_RPS,S)] / pEnergyTotal(S);
12685   
12686  pMipGap = abs((UnitCommit.Objval - UnitCommit.Objest)/UnitCommit.Objval);
12687   
12688  $ifthen set unit_commit
12689  *Identify Unit Commitment State for each generator
12690  * Default to na (not under unit commitment)
12691      pUcIntEnabled(G) = na;
12692  * Set to zero for all gens under unit commitment (including continuous)
12693      pUcIntEnabled(G)$G_UC(G) = 0;
12694  * Finally mark those under integer unit commitment with a 1
12695      pUcIntEnabled(G)$G_UC_INT(G) = 1;
12696  $endif
12697   
12698  $ifthen set startup
12699  $ifthen.v declared vStartup
12700  PARAMETERS
12701      pPerUnitStartUpCount(G, S)  "Average number of startups per generator type [starts/yr]"
12702      ;
12703   
12704      pPerUnitStartupCount(G, S)
12705          $(
12706  $ifthen.fix_cap set fix_cap
12707              pGen(G, 'cap_cur', S)
12708  $endif.fix_cap
12709              > 0)
12710          =
12711          sum[(B, T), vStartup.l(B, T, G, S) /
12712  $ifthen.fix_cap set fix_cap
12713                      pGen(G, 'cap_cur', S)
12714  $endif.fix_cap
12715                  * pGen(G, 'gen_size', S)];
12716  $endif.v
12717  $endif
12718   
12719   
12720  * ======  Write Standard Results to CSV files
12721  *-- Suppress CSV output if no_csv flag is set
12722  $if "no_csv = 1" $ontext
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/writeResults.gms
12723  $include ../shared/writeResults.gms
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 45
"Flexible Unit Commitment Model"
C o m p i l a t i o n


12724   
12725  $ontext
       ----------------------------------------------------
         Helper include to write most standard output files for Advanced Power models
         
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          January 2012
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2012-01-28  02:00 bpalmintier    Extracted from UnitCommit v26
         2  2012-01-28  22:00 bpalmintier    Added gen_simple table
         3  2012-03-07  15:45 bpalmintier    Remove any possible old output files before writting
         4  2012-05-02  10:45  bpalmintier   Separate demand (D) into blocks (B) and time sub-periods (T)
         5  2012-05-04  23:05  bpalmintier   Added maintenance support
         6  2012-08-22  00:15  bpalmintier   Shortened file names, including no more "out_" or "_table"
         7  2012-09-02  12:57  bpalmintier   Added off maintenance debug table
         8  2012-09-06  09:58  bpalmintier   No QuickStart processing with no_quick_st
         8  2012-09-14  15:30  bpalmintier   Added net load down reserves
       -----------------------------------------------------
12747  $offtext
12748   
12749  *Don't display line number and memory use to the logfile/screen for subsequent includes
12750  $offlog
12751   
12752  * ======  Write Results to CSV files
12753  * WARNING: the structure of these output files matters for us with the CapPlanDP code... take
12754  * care when changing
12755   
12756  execute "=rm -f out/UC_summary.csv"
12757  execute "=rm -f out/UC_power.csv"
12758  execute "=rm -f out/UC_uc.csv"
12759  execute "=rm -f out/UC_spin.csv"
12760  execute "=rm -f out/UC_reg_up.csv"
12761  execute "=rm -f out/UC_reg_down.csv"
12762  execute "=rm -f out/UC_quick_st.csv"
12763  execute "=rm -f out/UC_flex_up.csv"
12764  execute "=rm -f out/UC_flex_down.csv"
12765  execute "=rm -f out/UC_gen_params.csv"
12766  execute "=rm -f out/UC_gen_type.csv"
12767  execute "=rm -f out/UC_gen_type_ext.csv"
12768  execute "=rm -f out/UC_gen_avail.csv"
12769  execute "=rm -f out/UC_gen_simple.csv"
12770  execute "=rm -f out/UC_maint.csv"
12771  execute "=rm -f out/UC_tot_cap.csv"
12772  execute "=rm -f out/UC_new_plants.csv"
12773  execute "=rm -f out/UC_new_cap.csv"
12774  execute "=rm -f out/UC_off_maint.csv"
12775  execute "=rm -f out/UC_net_lf_down.csv"
12776   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 46
"Flexible Unit Commitment Model"
C o m p i l a t i o n


12777  *-- [1] Output solution summary
12778  * file setup
12779  * file has 2 columns: name, data
12780  file fListOut /"out/UC_summary.csv"/
12781  put fListOut;
12782   
12783  *Set output precision to have 5 places right of the decimal (except for large numbers in scientific format)
12784  fListOut.nd=5;
12785   
12786  *Allow maximum page width to prevent truncation
12787  fListOut.pw=32767;
12788   
12789   
12790  *Write out summary in standard form
INCLUDE    /Users/bpalmint/repos/advpower/models/shared/writeSummary.gms
12791  $include ../shared/writeSummary.gms
12792   
12793  $ontext
       ----------------------------------------------------
         Helper include to write the standardized output summary put file for Advanced Power models
         
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-07-15  00:45  bpalmintier   Extracted from OpsLp v4
         2  2011-07-15  10:15  bpalmintier   moved solution result (run_*) to caller
         3  2011-08-02  16:05  bpalmintier   Added complete command line option results using writeFlagState
         4  2011-08-07  16:05  bpalmintier   Always write non-served energy
         5  2011-08-17  15:55  bpalmintier   Added water cost
         6  2011-09-22  16:26  bpalmintier   Added Generic solution timing and status information
         7  2011-09-28  04:15  bpalmintier   Corrected $if for pMipGap
         8  2011-10-06  21:55  bpalmintier   Output total duration in hours
         9  2011-10-08  13:55  bpalmintier   New flags: p0_recover, rel_cheat, pwl2afine
        10  2011-10-09  12:15  bpalmintier   Added pUcIntEnabled
        11  2011-10-09  16:15  bpalmintier   Added model size statistics
        12  2011-10-11  14:15  bpalmintier   Renamed plant_size to gen_size (also related flags)
        13  2011-10-14  03:15  bpalmintier   Added gparams include file output
        14  2011-11-10  13:45  bpalmintier   Added no_capital
        15  2012-01-26  15:35  bpalmintier   Updated for scenario (S) support used with stochastic UC, multi-period planning, etc.
        16  2012-01-28  23:05  bpalmintier   Added model_name, scenario weights, and scen_val file information
        17  2012-02-03  00:15  bpalmintier   Adjusted for carbon emissions by generator
        18  2012-02-03  13:35  bpalmintier   Added skip_cap_limit and overbuild
        19  2012-05-02  10:45  bpalmintier   Separate demand (D) into blocks (B) and time sub-periods (T)
        20  2012-05-04  23:05  bpalmintier   Added maintenance support
        21  2012-06-14  15:05  bpalmintier   Added rps & planning margin penalties
        22  2012-08-21  17:15  bpalmintier   Convert plan_margin to value flag
        23  2012-08-21  23:05  bpalmintier   Added maintenance cost
        24  2012-08-21  23:55  bpalmintier   Added retirement
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 47
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         25 2012-08-22  15:05  bpalmintier   Added priority (B&B tree) option
         26 2012-08-23  13:05  bpalmintier   Added maint_lp to ignore maintenance integers
         27 2012-08-23  14:05  bpalmintier   Added uc_lp
         28 2012-08-24  14:25  bpalmintier   BUGFIX: summary scaling of non-served cost
         29 2012-08-24  15:25  bpalmintier   Rearrange to move energy non-served up
         30 2012-08-31  01:05  bpalmintier   Add rsrv_use_tot_demand
         31 2012-08-31  07:25  bpalmintier   Use adj_rsrv_for_nse instead of rsrv_use_tot_demand
         32 2012-09-02  17:08  bpalmintier   Replace all $set with $setglobal (to prevent scope errors)
         33 2012-09-03  07:08  bpalmintier   Add derate_to_maint
         34 2012-09-06  09:58  bpalmintier   Add no_quick_st, non_uc_rsrv_down_offline and non_uc_rsrv_up_offline
       -----------------------------------------------------
12840  $offtext
12841   
12842  * file has 2 columns: name, data
12843  * name should include units and be in a MATLAB & MySQL identifier friendly format. That is
12844  * beginning with a letter and only containing alphanumeric characters and underscores (MATLAB)
12845  * format is:
12846  *     name_with_underscore_unit, value
12847   
12848  *========== Model run Summary Data ==========
12849  *- Model Run and Objective Function Information -
12850  $if set model_name
12851      put  "run_model_name,UnitCommit" /
12852  $if set obj_var
12853      put  "run_obj_var,vOpsCost" /
12854  $if declared vObjective
12855      put  "run_obj_value," vObjective.l /
12856   
12857  $ifthen set model_name
12858  * Note: this section is only able to be included if we have defined the model_name as a
12859  * control variable, since otherwise we don't know what model was used in the solve statement
12860      put  "run_modstat,"    UnitCommit.Tmodstat /
12861      put  "run_solstat,"    UnitCommit.Tsolstat /
12862  put  "run_mip_gap,"         pMipGap:0:6 /
12863   
12864  * Solver only time (does not include GAMS generation time, reading solution, and reporting)
12865  * Use this for algorithmic/formulation time comparisons
12866      put  "run_solver_time_sec,"    UnitCommit.ETSolver /
12867      put  "run_mip_nodes,"          UnitCommit.nodusd /
12868   
12869  $endif
12870   
12871  * print total solution time
12872  put  "run_time_sec," system.elapsed /
12873   
12874  *========== Scenario Dependent Data ==========
12875  * -- Setup our scenario prefix for each scenario dependent output line
12876  $else
12877  * Otherwise leave it blank
12878  $setglobal scen_prefix ''
12879  *Work around for the fact that GAMS does strip outer quotes if the entire string is quoted
12880  $setglobal quote '"'
12881  $endif
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 48
"Flexible Unit Commitment Model"
C o m p i l a t i o n


12882   
12883  * -- Loop over all scenarios
12884  loop (S) do
12885  * When we have more than one scenario, print it along with explanatory text
12886      if card(S) > 1 then
12887          put "SCENARIO_":0 ord(S):0:0 "," S.te(S):0 " (" S.tl:0 ": weight=" pScenWeight(S):0 ")"/
12888      endif;
12889   
12890  * ---- Cost Data ----
12891  * total cost
12892      put  "cost_total_Musd,"         vTotalCost.l(S)/
12893   
12894  * write cost breakdown
12895  $endif
12896      put  "cost_ops_Musd,"         vOpsCost.l(S)/
12897      put  "cost_fixedOM_Musd,"     vFixedOMCost.l(S)/
12898      put  "cost_varOM_Musd,"       vVariableOMCost.l(S)/
12899      put  "cost_fuel_Musd,"        vFuelCost.l(S)/
12900      put  "cost_carbon_Musd,"      vCarbonCost.l(S)/
12901  $ifthen not set no_nse
12902  *Scale cost of non-served from $/MWh to M$/GWh
12903      put  "cost_non_served_Musd,"  sum[(B, T), vNonServed.l(B, T, S)*pPriceNonServed*pDemand(B, T, 'dur', S)/1000]/
12904  $endif
12905      put  "cost_penalty_Musd,"     vPenaltyCost.l(S)/
12906  $ifthen set startup
12907      put  "cost_startup_Musd,"     vStartupCost.l(S)/
12908  $endif
12909  $ifthen set maint
12910      put  "cost_maint_Musd,"       vMaintCost.l(S)/
12911  $endif
12912  $endif
12913   
12914  * ---- Energy/Emissions data ----
12915  * total emissions
12916      put  "CO2e_total_Mt," pTotalCarbonEmissions(S) /
12917   
12918  * carbon_price (use either the value set or the carbon cap constraint dual variable)
12919      put  "CO2e_price_usd_t," (max(-eCarbonCap.m(S), pCostCO2(S)))/
12920   
12921  * total energy
12922      put  "energy_total_TWh,"  pEnergyTotal(S) /
12923   
12924  * average electricity price
12925      put  "avg_price_usd_MWh,"  (vTotalCost.l(S)/pEnergyTotal(S)) /
12926   
12927  * non-served Energy
12928  $ifthen not set no_nse
12929      put  "energy_non_served_GWh," sum[(B, T), vNonServed.l(B, T, S)*pDemand(B, T, 'dur', S)]/
12930  $endif
12931   
12932  * energy by plant type
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
12933  $batinclude ../util/put2csv "" "list" pEnergyGen(G,S) G "'energy_TWh_'"
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 49
"Flexible Unit Commitment Model"
C o m p i l a t i o n


12934   
13105  $onlisting
13106   
13107  $endif
13108  $endif
13109      put  "RPS_target_fraction," pRPS(S) /
13110      put  "renew_fraction," pRenewPercent(S) /
13111   
13112  * report renewable shedding
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
13113  $batinclude ../util/put2csv "" "list" pTotalRenewableShedByGen(G_RPS,S) G_RPS "'shed_GWh_'"
13114   
13285  $onlisting
13286   
13287  * report avg number of starts per plant
13288  $ifthen declared pPerUnitStartupCount
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
13289  $batinclude ../util/put2csv "" "list" pPerUnitStartupCount(G,S) G "'avg_starts_'"
13290   
13461  $onlisting
13462  $endif
13463   
13464  * ---- Additional data ----
13465  * peak demand
13466      put  "demand_max_GW," pDemandMax(S)/
13467      put  "data_dur_hr," pTotalDurationHr(S) /
13468   
13469  $endif
13470   
13471  * capacity by type
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
13472  $batinclude ../util/put2csv "" "list" pCapTotal(G,S) G "'cap_total_GW_'"
13473   
13644  $onlisting
13645   
13646  * input data
13647      put  "in_CO2e_cost_usd_ton, " pCostCO2(S) /
13648      put  "in_CO2e_cap_Kt, " pCarbonCap(S) /
13649      put  "demand_scale," pDemandScale(S) /
13650   
13651  *End loop over scenarios
13652  endloop;
13653   
13654  *========== Scenario Independent Data ==========
13655  * -- System wide data
13656  put "WACC," pWACC /
13657  put "in_non_served_price_usd_MWh, " pPriceNonServed /
13658  $if declared pPlanReserve
13659   
13660  * -- Data files
13661  put "data_dir, " "../data/" /
13662  put "data_sys, "  "miniE_sys.inc" /
13663  put "data_demand, " "ercot2007_dem_yr_as_5wk.inc" /
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 50
"Flexible Unit Commitment Model"
C o m p i l a t i o n


13664  put "data_fuel, "   "thesis_fuel.inc" /
13665  put "data_gens, "   "miniE_units_sep.inc" /
13666  put "data_gparams, "   "eia_aeo2011_gen_params.inc" /
13667  put "data_avail, "  "ercot2007_avail.inc" /
13668  $if set scen   put "data_scen, "  "%scen%" /
13669  $if set scen_val   put "data_scen_val, "  "%scen_val%" /
13670  $if set update put "data_update, " "%update%" /
13671   
13672  * -- Additional Generator Data
13673  * ID unit commitment integer state (integer=1, continuous=0, no_uc=na)
13674  $ifthen set unit_commit
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
13675  $batinclude ../util/put2csv "" "list" pUcIntEnabled(G) G "'uc_integer_'"
13676   
13847  $onlisting
13848  $endif
13849   
13850  * -- Model Flags
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
13851  $batinclude ../shared/writeFlagState startup
13852   
13853  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 51
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
13887  $offtext
13888   
13889  * Check if we have two parameters
13890  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
13891  $if "" == "onoff" $goto onoff_flag
13892  $if "" == "value" $goto value_flag
13893   
13894  * ---- Set/Unset branch
13895  * An set/unset branch is either set of not set
13896  $ifthen.check_set set startup
13897          put "flag_" "startup" ", 1" /
13898  $endif.check_set
13899  *end of set/unset branch
13900  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
13901  $batinclude ../shared/writeFlagState unit_commit "onoff" 1
13902   
13903  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 52
"Flexible Unit Commitment Model"
C o m p i l a t i o n


13937  $offtext
13938   
13939  * Check if we have two parameters
13940  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
13941  $label onoff_flag
13942  * An on/off branch can be either on or off or set/unset
13943  $ifthen.check_set2 set unit_commit
13944  $elseif.onoff 1==1
13945          put "flag_" "unit_commit" ", 1" /
13946  $endif.onoff
13947  $endif.check_set2
13948  *end of no value branch
13949  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
13950  $batinclude ../shared/writeFlagState ramp "onoff" 1
13951   
13952  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
13986  $offtext
13987   
13988  * Check if we have two parameters
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 53
"Flexible Unit Commitment Model"
C o m p i l a t i o n


13989  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
13990  $label onoff_flag
13991  * An on/off branch can be either on or off or set/unset
13992  $ifthen.check_set2 set ramp
13993  $elseif.onoff 1==1
13994          put "flag_" "ramp" ", 1" /
13995  $endif.onoff
13996  $endif.check_set2
13997  *end of no value branch
13998  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
13999  $batinclude ../shared/writeFlagState ignore_integer
14000   
14001  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14035  $offtext
14036   
14037  * Check if we have two parameters
14038  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14039  $if "" == "onoff" $goto onoff_flag
14040  $if "" == "value" $goto value_flag
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 54
"Flexible Unit Commitment Model"
C o m p i l a t i o n


14041   
14042  * ---- Set/Unset branch
14043  * An set/unset branch is either set of not set
14044  $else.check_set
14045          put "flag_" "ignore_integer" ", 0" /
14046  $endif.check_set
14047  *end of set/unset branch
14048  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14049  $batinclude ../shared/writeFlagState uc_lp
14050   
14051  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14085  $offtext
14086   
14087  * Check if we have two parameters
14088  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14089  $if "" == "onoff" $goto onoff_flag
14090  $if "" == "value" $goto value_flag
14091   
14092  * ---- Set/Unset branch
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 55
"Flexible Unit Commitment Model"
C o m p i l a t i o n


14093  * An set/unset branch is either set of not set
14094  $else.check_set
14095          put "flag_" "uc_lp" ", 0" /
14096  $endif.check_set
14097  *end of set/unset branch
14098  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14099  $batinclude ../shared/writeFlagState avg_avail
14100   
14101  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14135  $offtext
14136   
14137  * Check if we have two parameters
14138  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14139  $if "" == "onoff" $goto onoff_flag
14140  $if "" == "value" $goto value_flag
14141   
14142  * ---- Set/Unset branch
14143  * An set/unset branch is either set of not set
14144  $else.check_set
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 56
"Flexible Unit Commitment Model"
C o m p i l a t i o n


14145          put "flag_" "avg_avail" ", 0" /
14146  $endif.check_set
14147  *end of set/unset branch
14148  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14149  $batinclude ../shared/writeFlagState ignore_cap_credit
14150   
14151  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14185  $offtext
14186   
14187  * Check if we have two parameters
14188  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14189  $if "" == "onoff" $goto onoff_flag
14190  $if "" == "value" $goto value_flag
14191   
14192  * ---- Set/Unset branch
14193  * An set/unset branch is either set of not set
14194  $else.check_set
14195          put "flag_" "ignore_cap_credit" ", 0" /
14196  $endif.check_set
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 57
"Flexible Unit Commitment Model"
C o m p i l a t i o n


14197  *end of set/unset branch
14198  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14199  $batinclude ../shared/writeFlagState no_capital "onoff" %no_capital%
14200   
14201  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14235  $offtext
14236   
14237  * Check if we have two parameters
14238  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14239  $label onoff_flag
14240  * An on/off branch can be either on or off or set/unset
14241  $else.check_set2
14242              put "flag_" "no_capital" ", 0" /
14243  $endif.check_set2
14244  *end of no value branch
14245  $label end_writeFlagStatus
14246   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14247  $batinclude ../shared/writeFlagState uc_ignore_unit_min "value" 0
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 58
"Flexible Unit Commitment Model"
C o m p i l a t i o n


14248   
14249  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14283  $offtext
14284   
14285  * Check if we have two parameters
14286  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14287  $if "value" == "onoff" $goto onoff_flag
14288  $label value_flag
14289  $ifthen set uc_ignore_unit_min
14290  $if "0" == ""
14291  $if not "0" == ""
14292          put "valflag_" "uc_ignore_unit_min" ", 0"  /
14293  $endif
14294   
14295   
14296  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14297  $batinclude ../shared/writeFlagState uc_int_unit_min "value" 0
14298   
14299  $ontext
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 59
"Flexible Unit Commitment Model"
C o m p i l a t i o n


       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14333  $offtext
14334   
14335  * Check if we have two parameters
14336  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14337  $if "value" == "onoff" $goto onoff_flag
14338  $label value_flag
14339  $ifthen set uc_int_unit_min
14340  $if "0" == ""
14341  $if not "0" == ""
14342          put "valflag_" "uc_int_unit_min" ", 0"  /
14343  $endif
14344   
14345   
14346  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14347  $batinclude ../shared/writeFlagState uc_lp
14348   
14349  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 60
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14383  $offtext
14384   
14385  * Check if we have two parameters
14386  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14387  $if "" == "onoff" $goto onoff_flag
14388  $if "" == "value" $goto value_flag
14389   
14390  * ---- Set/Unset branch
14391  * An set/unset branch is either set of not set
14392  $else.check_set
14393          put "flag_" "uc_lp" ", 0" /
14394  $endif.check_set
14395  *end of set/unset branch
14396  $label end_writeFlagStatus
14397   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14398  $batinclude ../shared/writeFlagState rsrv "value" separate
14399   
14400  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 61
"Flexible Unit Commitment Model"
C o m p i l a t i o n


       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14434  $offtext
14435   
14436  * Check if we have two parameters
14437  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14438  $if "value" == "onoff" $goto onoff_flag
14439  $label value_flag
14440  $ifthen set rsrv
14441  $if "separate" == ""
14442  $if not "separate" == ""
14443          put "valflag_" "rsrv" ", separate"  /
14444  $endif
14445   
14446   
14447  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14448  $batinclude ../shared/writeFlagState separate_rsrv
14449   
14450  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 62
"Flexible Unit Commitment Model"
C o m p i l a t i o n


       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14484  $offtext
14485   
14486  * Check if we have two parameters
14487  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14488  $if "" == "onoff" $goto onoff_flag
14489  $if "" == "value" $goto value_flag
14490   
14491  * ---- Set/Unset branch
14492  * An set/unset branch is either set of not set
14493  $ifthen.check_set set separate_rsrv
14494          put "flag_" "separate_rsrv" ", 1" /
14495  $endif.check_set
14496  *end of set/unset branch
14497  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14498  $batinclude ../shared/writeFlagState flex_rsrv "onoff" %flex_rsrv%
14499   
14500  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 63
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14534  $offtext
14535   
14536  * Check if we have two parameters
14537  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14538  $label onoff_flag
14539  * An on/off branch can be either on or off or set/unset
14540  $else.check_set2
14541              put "flag_" "flex_rsrv" ", 0" /
14542  $endif.check_set2
14543  *end of no value branch
14544  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14545  $batinclude ../shared/writeFlagState no_quick_st
14546   
14547  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 64
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14581  $offtext
14582   
14583  * Check if we have two parameters
14584  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14585  $if "" == "onoff" $goto onoff_flag
14586  $if "" == "value" $goto value_flag
14587   
14588  * ---- Set/Unset branch
14589  * An set/unset branch is either set of not set
14590  $else.check_set
14591          put "flag_" "no_quick_st" ", 0" /
14592  $endif.check_set
14593  *end of set/unset branch
14594  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14595  $batinclude ../shared/writeFlagState non_uc_rsrv_up_offline "value" 0
14596   
14597  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 65
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14631  $offtext
14632   
14633  * Check if we have two parameters
14634  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14635  $if "value" == "onoff" $goto onoff_flag
14636  $label value_flag
14637  $ifthen set non_uc_rsrv_up_offline
14638  $if "0" == ""
14639  $if not "0" == ""
14640          put "valflag_" "non_uc_rsrv_up_offline" ", 0"  /
14641  $endif
14642   
14643   
14644  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14645  $batinclude ../shared/writeFlagState non_uc_rsrv_down_offline "value" 0
14646   
14647  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 66
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14681  $offtext
14682   
14683  * Check if we have two parameters
14684  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14685  $if "value" == "onoff" $goto onoff_flag
14686  $label value_flag
14687  $ifthen set non_uc_rsrv_down_offline
14688  $if "0" == ""
14689  $if not "0" == ""
14690          put "valflag_" "non_uc_rsrv_down_offline" ", 0"  /
14691  $endif
14692   
14693   
14694  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14695  $batinclude ../shared/writeFlagState adj_rsrv_for_nse "onoff" off
14696   
14697  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 67
"Flexible Unit Commitment Model"
C o m p i l a t i o n


       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14731  $offtext
14732   
14733  * Check if we have two parameters
14734  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14735  $label onoff_flag
14736  * An on/off branch can be either on or off or set/unset
14737  $ifthen.check_set2 set adj_rsrv_for_nse
14738  $else.onoff
14739          put "flag_" "adj_rsrv_for_nse" ", 0" /
14740  $endif.onoff
14741  $endif.check_set2
14742  *end of no value branch
14743  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14744  $batinclude ../shared/writeFlagState rps_penalty "value" %rps_penalty%
14745   
14746  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 68
"Flexible Unit Commitment Model"
C o m p i l a t i o n


             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14780  $offtext
14781   
14782  * Check if we have two parameters
14783  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14784  $if "value" == "onoff" $goto onoff_flag
14785  $label value_flag
14786  $else
14787          put "valflag_" "rps_penalty" ", off" /
14788  $endif
14789   
14790   
14791  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14792  $batinclude ../shared/writeFlagState force_renewables
14793   
14794  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 69
"Flexible Unit Commitment Model"
C o m p i l a t i o n


          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14828  $offtext
14829   
14830  * Check if we have two parameters
14831  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14832  $if "" == "onoff" $goto onoff_flag
14833  $if "" == "value" $goto value_flag
14834   
14835  * ---- Set/Unset branch
14836  * An set/unset branch is either set of not set
14837  $else.check_set
14838          put "flag_" "force_renewables" ", 0" /
14839  $endif.check_set
14840  *end of set/unset branch
14841  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14842  $batinclude ../shared/writeFlagState fix_cap
14843   
14844  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 70
"Flexible Unit Commitment Model"
C o m p i l a t i o n


        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14878  $offtext
14879   
14880  * Check if we have two parameters
14881  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14882  $if "" == "onoff" $goto onoff_flag
14883  $if "" == "value" $goto value_flag
14884   
14885  * ---- Set/Unset branch
14886  * An set/unset branch is either set of not set
14887  $ifthen.check_set set fix_cap
14888          put "flag_" "fix_cap" ", 1" /
14889  $endif.check_set
14890  *end of set/unset branch
14891  $label end_writeFlagStatus
14892   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14893  $batinclude ../shared/writeFlagState max_start
14894   
14895  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 71
"Flexible Unit Commitment Model"
C o m p i l a t i o n


       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14929  $offtext
14930   
14931  * Check if we have two parameters
14932  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14933  $if "" == "onoff" $goto onoff_flag
14934  $if "" == "value" $goto value_flag
14935   
14936  * ---- Set/Unset branch
14937  * An set/unset branch is either set of not set
14938  $else.check_set
14939          put "flag_" "max_start" ", 0" /
14940  $endif.check_set
14941  *end of set/unset branch
14942  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14943  $batinclude ../shared/writeFlagState min_up_down
14944   
14945  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 72
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
14979  $offtext
14980   
14981  * Check if we have two parameters
14982  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
14983  $if "" == "onoff" $goto onoff_flag
14984  $if "" == "value" $goto value_flag
14985   
14986  * ---- Set/Unset branch
14987  * An set/unset branch is either set of not set
14988  $ifthen.check_set set min_up_down
14989          put "flag_" "min_up_down" ", 1" /
14990  $endif.check_set
14991  *end of set/unset branch
14992  $label end_writeFlagStatus
14993   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
14994  $batinclude ../shared/writeFlagState pwl_cost
14995   
14996  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 73
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15030  $offtext
15031   
15032  * Check if we have two parameters
15033  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15034  $if "" == "onoff" $goto onoff_flag
15035  $if "" == "value" $goto value_flag
15036   
15037  * ---- Set/Unset branch
15038  * An set/unset branch is either set of not set
15039  $else.check_set
15040          put "flag_" "pwl_cost" ", 0" /
15041  $endif.check_set
15042  *end of set/unset branch
15043  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15044  $batinclude ../shared/writeFlagState p0_recover "value" 0.85
15045   
15046  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 74
"Flexible Unit Commitment Model"
C o m p i l a t i o n


15080  $offtext
15081   
15082  * Check if we have two parameters
15083  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15084  $if "value" == "onoff" $goto onoff_flag
15085  $label value_flag
15086  $ifthen set p0_recover
15087  $if "0.85" == ""
15088  $if not "0.85" == ""
15089          put "valflag_" "p0_recover" ", 0.85"  /
15090  $endif
15091   
15092   
15093  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15094  $batinclude ../shared/writeFlagState pwl2afine
15095   
15096  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15130  $offtext
15131   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 75
"Flexible Unit Commitment Model"
C o m p i l a t i o n


15132  * Check if we have two parameters
15133  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15134  $if "" == "onoff" $goto onoff_flag
15135  $if "" == "value" $goto value_flag
15136   
15137  * ---- Set/Unset branch
15138  * An set/unset branch is either set of not set
15139  $else.check_set
15140          put "flag_" "pwl2afine" ", 0" /
15141  $endif.check_set
15142  *end of set/unset branch
15143  $label end_writeFlagStatus
15144   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15145  $batinclude ../shared/writeFlagState force_gen_size "value" %force_gen_size%
15146   
15147  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15181  $offtext
15182   
15183  * Check if we have two parameters
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 76
"Flexible Unit Commitment Model"
C o m p i l a t i o n


15184  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15185  $if "value" == "onoff" $goto onoff_flag
15186  $label value_flag
15187  $else
15188          put "valflag_" "force_gen_size" ", off" /
15189  $endif
15190   
15191   
15192  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15193  $batinclude ../shared/writeFlagState min_gen_size "value" %min_gen_size%
15194   
15195  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15229  $offtext
15230   
15231  * Check if we have two parameters
15232  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15233  $if "value" == "onoff" $goto onoff_flag
15234  $label value_flag
15235  $else
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 77
"Flexible Unit Commitment Model"
C o m p i l a t i o n


15236          put "valflag_" "min_gen_size" ", off" /
15237  $endif
15238   
15239   
15240  $label end_writeFlagStatus
15241   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15242  $batinclude ../shared/writeFlagState derate
15243   
15244  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15278  $offtext
15279   
15280  * Check if we have two parameters
15281  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15282  $if "" == "onoff" $goto onoff_flag
15283  $if "" == "value" $goto value_flag
15284   
15285  * ---- Set/Unset branch
15286  * An set/unset branch is either set of not set
15287  $else.check_set
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 78
"Flexible Unit Commitment Model"
C o m p i l a t i o n


15288          put "flag_" "derate" ", 0" /
15289  $endif.check_set
15290  *end of set/unset branch
15291  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15292  $batinclude ../shared/writeFlagState derate_to_maint
15293   
15294  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15328  $offtext
15329   
15330  * Check if we have two parameters
15331  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15332  $if "" == "onoff" $goto onoff_flag
15333  $if "" == "value" $goto value_flag
15334   
15335  * ---- Set/Unset branch
15336  * An set/unset branch is either set of not set
15337  $else.check_set
15338          put "flag_" "derate_to_maint" ", 0" /
15339  $endif.check_set
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 79
"Flexible Unit Commitment Model"
C o m p i l a t i o n


15340  *end of set/unset branch
15341  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15342  $batinclude ../shared/writeFlagState from_scratch
15343   
15344  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15378  $offtext
15379   
15380  * Check if we have two parameters
15381  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15382  $if "" == "onoff" $goto onoff_flag
15383  $if "" == "value" $goto value_flag
15384   
15385  * ---- Set/Unset branch
15386  * An set/unset branch is either set of not set
15387  $else.check_set
15388          put "flag_" "from_scratch" ", 0" /
15389  $endif.check_set
15390  *end of set/unset branch
15391  $label end_writeFlagStatus
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 80
"Flexible Unit Commitment Model"
C o m p i l a t i o n


BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15392  $batinclude ../shared/writeFlagState basic_pmin
15393   
15394  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15428  $offtext
15429   
15430  * Check if we have two parameters
15431  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15432  $if "" == "onoff" $goto onoff_flag
15433  $if "" == "value" $goto value_flag
15434   
15435  * ---- Set/Unset branch
15436  * An set/unset branch is either set of not set
15437  $else.check_set
15438          put "flag_" "basic_pmin" ", 0" /
15439  $endif.check_set
15440  *end of set/unset branch
15441  $label end_writeFlagStatus
15442   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 81
"Flexible Unit Commitment Model"
C o m p i l a t i o n


15443  $batinclude ../shared/writeFlagState plan_margin "value" %plan_margin%
15444   
15445  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15479  $offtext
15480   
15481  * Check if we have two parameters
15482  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15483  $if "value" == "onoff" $goto onoff_flag
15484  $label value_flag
15485  $else
15486          put "valflag_" "plan_margin" ", off" /
15487  $endif
15488   
15489   
15490  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15491  $batinclude ../shared/writeFlagState plan_margin_penalty "value" %plan_margin_penalty%
15492   
15493  $ontext
       ----------------------------------------------------
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 82
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15527  $offtext
15528   
15529  * Check if we have two parameters
15530  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15531  $if "value" == "onoff" $goto onoff_flag
15532  $label value_flag
15533  $else
15534          put "valflag_" "plan_margin_penalty" ", off" /
15535  $endif
15536   
15537   
15538  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15539  $batinclude ../shared/writeFlagState overbuild
15540   
15541  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 83
"Flexible Unit Commitment Model"
C o m p i l a t i o n


       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15575  $offtext
15576   
15577  * Check if we have two parameters
15578  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15579  $if "" == "onoff" $goto onoff_flag
15580  $if "" == "value" $goto value_flag
15581   
15582  * ---- Set/Unset branch
15583  * An set/unset branch is either set of not set
15584  $else.check_set
15585          put "flag_" "overbuild" ", 0" /
15586  $endif.check_set
15587  *end of set/unset branch
15588  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15589  $batinclude ../shared/writeFlagState skip_cap_limit
15590   
15591  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 84
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15625  $offtext
15626   
15627  * Check if we have two parameters
15628  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15629  $if "" == "onoff" $goto onoff_flag
15630  $if "" == "value" $goto value_flag
15631   
15632  * ---- Set/Unset branch
15633  * An set/unset branch is either set of not set
15634  $else.check_set
15635          put "flag_" "skip_cap_limit" ", 0" /
15636  $endif.check_set
15637  *end of set/unset branch
15638  $label end_writeFlagStatus
15639   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15640  $batinclude ../shared/writeFlagState maint
15641   
15642  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 85
"Flexible Unit Commitment Model"
C o m p i l a t i o n


           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15676  $offtext
15677   
15678  * Check if we have two parameters
15679  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15680  $if "" == "onoff" $goto onoff_flag
15681  $if "" == "value" $goto value_flag
15682   
15683  * ---- Set/Unset branch
15684  * An set/unset branch is either set of not set
15685  $ifthen.check_set set maint
15686          put "flag_" "maint" ", 1" /
15687  $endif.check_set
15688  *end of set/unset branch
15689  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15690  $batinclude ../shared/writeFlagState max_maint "value" 0.15
15691   
15692  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 86
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15726  $offtext
15727   
15728  * Check if we have two parameters
15729  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15730  $if "value" == "onoff" $goto onoff_flag
15731  $label value_flag
15732  $ifthen set max_maint
15733  $if "0.15" == ""
15734  $if not "0.15" == ""
15735          put "valflag_" "max_maint" ", 0.15"  /
15736  $endif
15737   
15738   
15739  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15740  $batinclude ../shared/writeFlagState retire "value" %retire%
15741   
15742  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 87
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15776  $offtext
15777   
15778  * Check if we have two parameters
15779  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15780  $if "value" == "onoff" $goto onoff_flag
15781  $label value_flag
15782  $else
15783          put "valflag_" "retire" ", off" /
15784  $endif
15785   
15786   
15787  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15788  $batinclude ../shared/writeFlagState maint_lp
15789   
15790  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 88
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15824  $offtext
15825   
15826  * Check if we have two parameters
15827  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15828  $if "" == "onoff" $goto onoff_flag
15829  $if "" == "value" $goto value_flag
15830   
15831  * ---- Set/Unset branch
15832  * An set/unset branch is either set of not set
15833  $else.check_set
15834          put "flag_" "maint_lp" ", 0" /
15835  $endif.check_set
15836  *end of set/unset branch
15837  $label end_writeFlagStatus
15838   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15839  $batinclude ../shared/writeFlagState max_solve_time "value" 10800
15840   
15841  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 89
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15875  $offtext
15876   
15877  * Check if we have two parameters
15878  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15879  $if "value" == "onoff" $goto onoff_flag
15880  $label value_flag
15881  $ifthen set max_solve_time
15882  $if "10800" == ""
15883  $if not "10800" == ""
15884          put "valflag_" "max_solve_time" ", 10800"  /
15885  $endif
15886   
15887   
15888  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15889  $batinclude ../shared/writeFlagState mip_gap "value" 0.001
15890   
15891  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 90
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15925  $offtext
15926   
15927  * Check if we have two parameters
15928  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15929  $if "value" == "onoff" $goto onoff_flag
15930  $label value_flag
15931  $ifthen set mip_gap
15932  $if "0.001" == ""
15933  $if not "0.001" == ""
15934          put "valflag_" "mip_gap" ", 0.001"  /
15935  $endif
15936   
15937   
15938  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15939  $batinclude ../shared/writeFlagState par_threads "value" 1
15940   
15941  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 91
"Flexible Unit Commitment Model"
C o m p i l a t i o n


             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
15975  $offtext
15976   
15977  * Check if we have two parameters
15978  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
15979  $if "value" == "onoff" $goto onoff_flag
15980  $label value_flag
15981  $ifthen set par_threads
15982  $if "1" == ""
15983  $if not "1" == ""
15984          put "valflag_" "par_threads" ", 1"  /
15985  $endif
15986   
15987   
15988  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
15989  $batinclude ../shared/writeFlagState priority "onoff" %priority%
15990   
15991  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 92
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16025  $offtext
16026   
16027  * Check if we have two parameters
16028  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16029  $label onoff_flag
16030  * An on/off branch can be either on or off or set/unset
16031  $else.check_set2
16032              put "flag_" "priority" ", 0" /
16033  $endif.check_set2
16034  *end of no value branch
16035  $label end_writeFlagStatus
16036   
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16037  $batinclude ../shared/writeFlagState cheat "value" %cheat%
16038   
16039  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 93
"Flexible Unit Commitment Model"
C o m p i l a t i o n


        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16073  $offtext
16074   
16075  * Check if we have two parameters
16076  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16077  $if "value" == "onoff" $goto onoff_flag
16078  $label value_flag
16079  $else
16080          put "valflag_" "cheat" ", off" /
16081  $endif
16082   
16083   
16084  $label end_writeFlagStatus
BATINCLUDE /Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
16085  $batinclude ../shared/writeFlagState rel_cheat "value" 0
16086   
16087  $ontext
       ----------------------------------------------------
         Helper script to put state of set/unset identifiers
         
       Usage:
        
       $batinclude %shared_dir%writeFlagState  FLAG_NAME  
         This form, assumes a binary on or off flag based on the flag's "set" status. ie if set = 1
         if unset = 0. As a result (for a "set" or on variable) a line of the form
           flag_FLAG_NAME, 1
         is written to the current put file
         
       $batinclude %shared_dir%writeFlagState  FLAG_NAME "value" VALUE
         This form, the flag is treated as taking a real value if set. In which case a line of the form 
           valflag_FLAG_NAME, VALUE
         is written to the current put file. If the value is unset then a line of the form
           valflag_FLAG_NAME, off
         is written instead
         
       Notes: 
         -- no quotes are needed around FLAG_NAME
         -- We use the "value" parameter because it allows us to check for blank VALUEs. It must 
             appear exactly as the quoted string "value"
       	
         Originally Coded in GAMS by:
          Bryan Palmintier, MIT
          July 2011
        
        Version History
       Ver   Date       Time  Who            What
       ---  ----------  ----- -------------- ---------------------------------
         1  2011-08-02  23:05  bpalmintier   Adapted from WriteSummary v2
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 94
"Flexible Unit Commitment Model"
C o m p i l a t i o n


         2  2011-09-22  10:45  bpalmintier   Renamed $ifthen identifiers
       -----------------------------------------------------
16121  $offtext
16122   
16123  * Check if we have two parameters
16124  * Yes this is a kludge, but it is GAMS standard as seen in McCarl's user guide
16125  $if "value" == "onoff" $goto onoff_flag
16126  $label value_flag
16127  $ifthen set rel_cheat
16128  $if "0" == ""
16129  $if not "0" == ""
16130          put "valflag_" "rel_cheat" ", 0"  /
16131  $endif
16132   
16133   
16134  $label end_writeFlagStatus
16135   
16136  *========== Model Extras ==========
16137  $if set calc_water $include ../shared/writeWaterSummary
16138   
16139  *========== Final Notes ==========
16140  * -- Model statistics
16141  $ifthen set model_name
16142      put  "model_num_eq,"    UnitCommit.numequ:0:0 /
16143      put  "model_num_var,"   UnitCommit.numvar:0:0 /
16144      put  "model_num_discrete_var,"   UnitCommit.numdvar:0:0 /
16145      put  "model_num_nonzero,"   UnitCommit.numnz:0:0 /
16146  $endif
16147   
16148  * -- Memo field if provided
16149  $if set memo put "memo, "  "%memo%" /
16150   
16151  *And include any additional model dependant variables
16152  *  -- None --
16153   
16154  *close our file
16155  putclose
16156   
16157  $if set summary_only $goto skip_non_summary
16158  *-- [2] Output Power Out (dispatch) data as a 2-D table
16159  *One scenario case
16160  $ifthen.one_scen not set scen
16161      parameter
16162          pPwrOut(B, T,G)
16163          ;
16164  *Use smax to extract single set element
16165          pPwrOut(B, T,G) = smax[S, vPwrOut.l(B, T,G,S)];
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
16166  $batinclude ../util/put2csv "out/UC_power.csv" "table" pPwrOut(B,T,G) B.T G
16167   
16373  $onlisting
16374  *Multiple scenario case
16375  $endif.one_scen
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 95
"Flexible Unit Commitment Model"
C o m p i l a t i o n


16376   
16377  $if set summary_and_power_only $goto skip_non_summary
16378  *-- [4] Output Unit Commitment States data as a 2-D table
16379  *One scenario case
16380  $ifthen.one_scen not set scen
16381      parameter
16382          pUnitCommit(B, T,G)
16383          ;
16384  *Use smax to extract single set element
16385          pUnitCommit(B, T,G) = smax[S, vUnitCommit.l(B, T,G,S)];
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
16386  $batinclude ../util/put2csv "out/UC_uc.csv" "table" pUnitCommit(B,T,G) B.T G
16387   
16593  $onlisting
16594  *Multiple scenario case
16595  $endif.one_scen
16596   
16597  *-- [5] If using operating reserves, output set of files with associated data
16598  $ifthen.sep_r set separate_rsrv
16599  *One scenario case
16600  $ifthen.one_scen not set scen
16601      parameters
16602          pSpinReserve(B, T,G)
16603          pNetLoadFollowDown(B, T,G)
16604          pRegUp(B, T,G)
16605          pRegDown(B, T,G)
16606  $ifthen.no_qs not set no_quick_st
16607          pQuickStart(B, T,G)
16608  $endif.no_qs
16609          ;
16610  *Use smax to extract single set element
16611          pSpinReserve(B, T,G) = smax[S, vSpinReserve.l(B, T,G,S)];
16612          pNetLoadFollowDown(B, T,G) = smax[S, vNetLoadFollowDown.l(B, T,G,S)];
16613          pRegUp(B, T,G) = smax[S, vRegUp.l(B, T,G,S)];
16614          pRegDown(B, T,G) = smax[S, vRegDown.l(B, T,G,S)];
16615  $ifthen.no_qs not set no_quick_st
16616          pQuickStart(B, T,G) = smax[S, vQuickStart.l(B, T,G,S)];
16617  $endif.no_qs
16618   
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
16619  $batinclude ../util/put2csv "out/UC_spin.csv" "table" pSpinReserve(B,T,G) B.T G
16620   
16826  $onlisting
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
16827  $batinclude ../util/put2csv "out/UC_net_lf_down.csv" "table" pNetLoadFollowDown(B,T,G) B.T G
16828   
17034  $onlisting
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
17035  $batinclude ../util/put2csv "out/UC_reg_up.csv" "table" pRegUp(B,T,G) B.T G
17036   
17242  $onlisting
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
17243  $batinclude ../util/put2csv "out/UC_reg_down.csv" "table" pRegDown(B,T,G) B.T G
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 96
"Flexible Unit Commitment Model"
C o m p i l a t i o n


17244   
17450  $onlisting
17451   
17452  $ifthen.no_qs not set no_quick_st
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
17453  $batinclude ../util/put2csv "out/UC_quick_st.csv" "table" pQuickStart(B,T,G) B.T G
17454   
17660  $onlisting
17661  $endif.no_qs
17662  *Multiple scenario case
17663  $endif.one_scen
17664  $endif.sep_r
17665   
17666  *-- [6] Output files with flexibility reserve data
17667  $endif
17668   
17669  *-- [7] Output files with generator input parameters
17670  *= Output Generator Parameter Table
17671  $endif.gen_param
17672   
17673   
17674  *-- [8] Output files with generator input parameters
17675  *= Output Generator Availability Table
17676  $endif
17677   
17678  *-- [9] Output simplified generator parameter table
17679  *= Output Generator Fix & Var Cost Table
17680  $endif.g_simple
17681   
17682  *-- [10] Output Maintenance plan as a 2-D table
17683  *One scenario case
17684  $ifthen.maint set maint
17685  $ifthen.one_scen not set scen
17686      parameter
17687          pMaint(B, G)
17688          ;
17689  *Use smax to extract single set element
17690          pMaint(B, G) = smax[S, vOnMaint.l(B, G,S)];
BATINCLUDE /Users/bpalmint/repos/advpower/models/util/put2csv.gms
17691  $batinclude ../util/put2csv "out/UC_maint.csv" "table" pMaint(B,G) B G
17692   
17898  $onlisting
17899  *Multiple scenario case
17900  $endif.one_scen
17901   
17902  *-- [11] Capacity off maintenance debug
17903  *One scenario case
17904  $endif.off_maint
17905   
17906  $endif.maint
17907   
17908  $label skip_non_summary
17909   
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 97
"Flexible Unit Commitment Model"
C o m p i l a t i o n


17910  *-- end of output suppression when no_csv flag is set
17911  $if "no_csv = 1" $offtext
17912   
17913   
17914  $if set gdx execute_unload 'out/UC_solve.gdx'
17915   
17916  * Write value of all control variables to the list file (search for Environment Report)
---- Begin of Environment Report
LEVEL TYPE         LINE  FILE NAME
----------------------------------
    0 INPUT        1390  /Users/bpalmint/repos/advpower/models/ops/UnitCommit.gms

Level SetVal                          Type       Text
-----------------------------------------------------
    0 sys                             SCOPED     miniE_sys.inc
    0 gparams                         SCOPED     eia_aeo2011_gen_params.inc
    0 ramp                            SCOPED     1
    0 startup                         SCOPED     1
    0 min_up_down                     SCOPED     1
    0 rsrv                            SCOPED     separate
    0 maint                           SCOPED     1
    0 demscale                        SCOPED     0.095
    0 gens                            SCOPED     miniE_units_sep.inc
    0 filesep                         GLOBAL     /
    0 shared_dir                      GLOBAL     ../shared/
    0 mip_gap                         GLOBAL     0.001
    0 max_solve_time                  GLOBAL     10800
    0 rel_cheat                       GLOBAL     0
    0 par_mode                        GLOBAL     1
    0 no_csv                          GLOBAL     0
    0 data_dir                        GLOBAL     ../data/
    0 out_dir                         GLOBAL     out/
    0 util_dir                        GLOBAL     ../util/
    0 setup_complete                  GLOBAL     
    0 model_name                      GLOBAL     UnitCommit
    0 fix_cap                         GLOBAL     
    0 unit_commit                     GLOBAL     1
    0 use_mip                         GLOBAL     yes
    0 capacity_G                      GLOBAL     vCapOffMaint(B, T, G, S)
    0 cap_for_plan_margin             GLOBAL     pGen(G,'cap_cur', S)
    0 max_cap_G                       GLOBAL     pGen(G,'cap_cur', S)
    0 out_prefix                      GLOBAL     UC_
    0 compute_state                   GLOBAL     1
    0 p0_recover                      GLOBAL     0.85
    0 max_maint                       GLOBAL     0.15
    0 separate_rsrv                   GLOBAL     
    0 adj_rsrv_for_nse                GLOBAL     off
    0 load_for_rsrv                   GLOBAL     (pDemand(B,T,'power', S) - vNonServed(B, T,S))
    0 non_uc_rsrv_up_offline          GLOBAL     0
    0 non_uc_rsrv_down_offline        GLOBAL     0
    0 obj_var                         GLOBAL     vOpsCost
    0 fuel                            GLOBAL     thesis_fuel.inc
    0 demand                          GLOBAL     ercot2007_dem_yr_as_5wk.inc
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 98
"Flexible Unit Commitment Model"
C o m p i l a t i o n


    0 avail                           GLOBAL     ercot2007_avail.inc
    0 gen_type_data_defined           GLOBAL     
    0 maint_om_fract                  GLOBAL     0.5
    0 uc_ignore_unit_min              GLOBAL     0
    0 uc_int_unit_min                 GLOBAL     0
    0 data_has_been_read              GLOBAL     
    0 par_threads                     GLOBAL     1
    0 lp_method                       GLOBAL     4
    0 scen_prefix                     GLOBAL     
    0 quote                           GLOBAL     "
---- macro definitions
$macro mDemShift(d_set,shift)  d_set -- shift
$macro mDelFile(fname)  execute "=rm -f &&fname"
---- End of Environment Report
17917  $show
17918   
17919  $endif.we_are_main
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                   08/02/15 03:47:16 Page 99
"Flexible Unit Commitment Model"
Symbol Listing


SETS      

AVAIL_MAP     
B             Demand blocks (e.g. weeks or ldc)
B_SIM         demand blocks used in simulation
DEM_PARAMS    demand block table parameters from load duration curve
D_AVAIL       time blocks for wind data... assumed to be a superset of the demand timeseries
F             fuel types
FUEL_PARAMS   fuel table parameters
G             generation types (or generator list)
GEN_FUEL_MAP  map for generator fuel types
GEN_PARAMS    generation table parameters
GEN_TYPE      generation type
G_OM_Maint    Subset of gens to divide fixed O&M costs among maint_wks
G_PWL_COST    Generators for which to use multi-segment piecewise linear fuel use
G_RAMP        Generators for which to enforce ramping limits
G_RPS         Generators included in the Renewable Portfolio Standard
G_UC          Generators to compute continuous or discrete unit commitment state and constraints
G_UC_INT      Generators with integer on/off values for unit commitment
G_WIND        Wind generators (for reserve requirements)
HR_SEG        piece-wise linear fuel use segments (slope=heatrate)
PWL_COEF      Coefficients for piecewise linear representation
PWL_COST_SEG  Valid piece-wise linear segments
S             scenarios for multi-period and stochastic problems
SameAs        Set Element Comparison Without Checking
T             Demand time sub-periods (e.g. hours or ldc sub-blocks)

ACRONYMS  

coal          
coal_bit      
coal_igcc     
coal_igcc_ccs 
coal_lig      
coal_lig_st   
coal_sub      
coal_sub_st   
coal_sub_st_ccs 
geotherm      
ng            
ng_cc         
ng_cc_ccs     
ng_gt         
ng_gt_aero    
ng_st         
pv_dist       
pv_util       
solar         
u235          
u235_st       
water         
wind          
wind_off      
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 100
"Flexible Unit Commitment Model"
Symbol Listing


PARAMETERS

pBlockDurWk   duration for each block in weeks
pCapTotal     Total installed capacity [GW]
pCarbonCap    max annual CO2 emissions                                            [Mt CO2e]
pCostCO2      cost of carbon (in terms of CO2 equivalent)                         [$/t-CO2eq = M$/Mt]
pDemand       table of demand data
pDemandAvg    average demand for scenario [GW]
pDemandData   Demand data
pDemandMax    maximum demand for scenario [GW]
pDemandScale  factor by which to scale demand
pEnergyGen    Electricity Generation by plant [TWh]
pEnergyTotal  Total electricity Generation for the system [TWh]
pFractionOfYear fraction of year covered by the simulation
pFuel         table of fuel data
pFuelData     Fuels Data Table
pGen          table of generator data
pGenAvail     table of time dependent generator availability
pGenAvailData Complete long-term availability data
pGenAvgAvail  average availability (max capacity factor)
pGenData      Generation Data Table
pGenDefaults  Generation Defaults Data Table
pMaint        
pMaxNumPlants upper bound on number of plants for unit commitment
pMipGap       relative Mixed-Integer duality gap
pNetLoadFollowDown 
pPerUnitStartUpCount Average number of startups per generator type [starts/yr]
pPriceNonServed Cost of non-served energy                                           [$/MWh]
pPwrOut       
pQuickStart   
pQuickStSpinSubFract Fraction of Spinning Reserves that can be supplied by off-line generators [p.u.]
pRegDown      
pRegDownLoadFract Fraction of load over unit minimums for regulation down    [p.u.]
pRegUp        
pRegUpLoadFract additional Fraction of load for regulation up              [p.u.]
pRenewableShed Average Renewable energy shed during period [GWh/hr]
pRenewPercent Percent of total energy from renewables
pReplaceReserveGW offline replacement reserves to fill-in if spinning reserves are called [GW]
pRPS          fraction of energy from wind                                        [p.u.]
pScenWeight   Scenario weighting for cost calcs. Use for probability or time discounting
pSpinReserve  
pSpinReserveLoadFract addition Fraction of load for spin reserves                [p.u.]
pSpinReserveMinGW minimum spining reserve                                    [GW]
pTotalCarbonEmissions Total carbon emissions [Kt CO2e]
pTotalDurationHr the total time for the demand data in hrs
pTotalRenewableShedByGen Total Renewable energy shed for each generator [GWh]
pUcIntEnabled Unit Commitment Integer enabled (1), disabled (0), or not unit_commit (na)
pUnitCommit   
pWACC         weighted average cost of capital (utility investment discount rate) [p.u.]
pWindFlexDownCapacity Additional down reserves based on installed wind capacity [fraction of Wind capacity]
pWindFlexDownForecast Additional down reserves based on wind power output (forecast)  [fraction of PwrOur]
pWindFlexUpCapacity Additional up reserves based on installed wind capacity [fraction of Wind capacity]
pWindFlexUpForecast Additional up reserves based on wind power output (forecast)  [fraction of PwrOur]
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 101
"Flexible Unit Commitment Model"
Symbol Listing


VARIABLES 

vCapOffMaint  Quantity of capacity available off maintenance [GW]
vCarbonCost   cost of all carbon emissions                 [M$]
vCarbonEmissions carbon from operations + fraction embedded   [Mt-CO2e]
vFixedOMCost  fixed O&M costs in target year               [M$]
vFuelCost     total fuel costs in target year              [M$]
vFuelUse      fuel usage by generator & type           [BTUe12]
vInstantFuel  instantaneous fuel use by gen per period [BTUe9/hr]
vMaintBegin   Number of units starting maintenance during the block [integer]
vMaintCost    Total maintenance cost for scenario
vMaintEnd     Number of units finishing maintenance during the block [integer]
vNetLoadFollowDown Load follow down reserves service provision by generator class [GW]
vNonServed    non-served demand                        [GW]
vNonServedCost total cost of non-served energy              [M$]
vObjective    Objective: scenario weighted average (EV or discounted ops cost)  [M$]
vOnMaint      Number of units on maintenance in a block
vOpsCost      system operations cost in target year        [M$]
vPenaltyCost  rps and plan_margin penalty costs            [M$]
vPwrOut       production of the unit                   [GW]
vQuickStart   Non-spin reserves service provision by generator class [GW]
vRegDown      Regulation down reserves service provision by generator class [GW]
vRegUp        Regulation up reserves service provision by generator class [GW]
vShutDown     number of units of each type that shuts down during each period  [continuous]
vShutInt      integer match to vShutDown for members of G_INT_UC [integer]
vSpinReserve  Contingency Spinning reserves service provision by generator class [GW]
vStartInt     integer match to vStartUp for members of G_INT_UC [integer]
vStartUp      number of units of each type that starts up during each period  [continuous]
vStartupCost  total startup (fixed) costs, not including fuel & carbon [M$]
vTotalCost    total system cost for scenario               [M$]
vUCInt        integer match to vUnitCommit for members of G_INT_UC [integer]
vUnitCommit   number of units of each gen type on-line during period     [continuous]
vVariableOMCost variable O&M costs in target year            [M$]

EQUATIONS 

eCapOffMaint  Compute resulting capacity available for dispatch
eCarbonCap    Limit total emissions                                    [Mt-CO2e]
eCarbonCost   cost of all carbon emissions                 [M$]
eCarbonEmissions carbon from operations + fraction embedded   [Mt-CO2e]
eDemand       output must equal demand                           [GW]
eFixedOMCost  system fixed O&Mcosts for one year           [M$]
eFuelCost     system fuel costs for one year               [M$]
eFuelUse      fuel usage by type                           [quad = BTUe15]
eInstantFuelByGen fuel use by gen and demand period       [BTUe9/hr]
eMaintCost    Compute total maintenance cost for scenario
eMaintMax     Limit quantity of each gen type on maintenance simultaneously
eMaintState   Compute maintenance begin and end
eMaintTime    Sum total maintenance over the time horizon
eMinDownTime  
eMinUpTime    
eNetLoadFollowDown Provide required load following down reserves [GW]
eNetLoadFollowDownMax Stay below max load following down on-line generators of each class can supply [GW]
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 102
"Flexible Unit Commitment Model"
Symbol Listing


EQUATIONS 

eNonServedCost total cost of non-served energy              [M$]
eObjective    Objective function: scenario weighted average (EV or discounted ops cost)  [M$]
eOpsCost      system operations cost for one year of operation  [M$]
ePenaltyCost  rps and plan_margin penalty costs                   [M$]
ePwrMaxSepRsrv output w/ reserves lower than available max       [GW]
ePwrMaxSepRsrvUC output w/ reserves lower than committed max       [GW]
ePwrMinSepRsrv output w/ reserves greater than installed min     [GW]
ePwrMinSepRsrvUC output w/ reserves greater than committed min     [GW]
eQuickStart   Provide required non-spinning reserves [GW]
eQuickStartMax Stay below max non-spin reserves off-line generators of each class can supply [GW]
eRampDownLimit Limit period to period ramp down rates
eRampDownLimitUC Limit period to period ramp down for integer commited plants
eRampUpLimit  Limit period to period ramp up rates
eRampUpLimitUC Limit period to period ramp up rates for integer commited plants
eRegDown      Provide required regulation down reserves [GW]
eRegDownMax   Stay below max regulation down on-line generators of each class can supply [GW]
eRegUp        Provide required regulation up reserves [GW]
eRegUpMax     Stay below max regulation up reserves on-line generators of each class can supply [GW]
eRPS          RPS Standard: minimum energy percent from renewables     [p.u.]
eShutDownInteger Integerization for unit shutdown
eSpinReserve  Provide required spinning reserves [GW]
eSpinReserveMax Stay below max spinning reserves on-line generators of each class can supply [GW]
eStartupCost  compute syste-wide unit startup costs                        [M$]
eStartUpInteger Integerization for unit startup
eState        compute unit commitment startup and shutdowns           [integer]
eTotalCost    total cost = ops                             [M$]
eTotalMaint   Sum total maintenance over the time horizon
eUnitCommit   can only commit up to the installed number of units     [continous]
eUnitCommitInteger Integerization for unit commitment
eVarOMCost    system variable O&M costs for one year       [M$]

MODELS    

UnitCommit    

FILES     

fListOut      
UC_maint      
UC_net_lf_down 
UC_power      
UC_quick_st   
UC_reg_down   
UC_reg_up     
UC_spin       
UC_uc         
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 103
"Flexible Unit Commitment Model"
Symbol Listing


MACROS    

mDelFile      
mDemShift     
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 104
"Flexible Unit Commitment Model"
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  /Users/bpalmint/repos/advpower/models/ops/UnitCommit.gms
     2      364 INCLUDE        1     367  ./Users/bpalmint/repos/advpower/models/shared/AdvPwrSetup.gms
     3      783 INCLUDE        1     672  ./Users/bpalmint/repos/advpower/models/shared/MaintenanceEquations.gms
     4      936 INCLUDE        1     679  ./Users/bpalmint/repos/advpower/models/shared/ReserveEquations.gms
     5     1320 INCLUDE        1     682  ./Users/bpalmint/repos/advpower/models/shared/MinUpDownEquations.gms
     6     1917 INCLUDE        1    1219  ./Users/bpalmint/repos/advpower/models/shared/AdvPwrDataRead.gms
     7     2081 INCLUDE        6     167  ../Users/bpalmint/repos/advpower/models/data/miniE_sys.inc
     8     2201 INCLUDE        6     172  ../Users/bpalmint/repos/advpower/models/data/thesis_fuel.inc
     9     2259 INCLUDE        6     173  ../Users/bpalmint/repos/advpower/models/data/ercot2007_dem_yr_as_5wk.inc
    10     3156 INCLUDE        6     175  ../Users/bpalmint/repos/advpower/models/data/miniE_units_sep.inc
    11     3295 INCLUDE        6     180  ../Users/bpalmint/repos/advpower/models/data/eia_aeo2011_gen_params.inc
    12     3493 INCLUDE        6     227  ../Users/bpalmint/repos/advpower/models/data/ercot2007_avail.inc
    13    12635 INCLUDE        1    1376  ./Users/bpalmint/repos/advpower/models/shared/calcSummary.gms
    14    12723 INCLUDE        1    1381  ./Users/bpalmint/repos/advpower/models/shared/writeResults.gms
    15    12791 INCLUDE       14      68  ../Users/bpalmint/repos/advpower/models/shared/writeSummary.gms
    16    12933 BATINCLUDE    15     154  .../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    17    13113 BATINCLUDE    15     166  .../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    18    13289 BATINCLUDE    15     170  .../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    19    13472 BATINCLUDE    15     183  .../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    20    13675 BATINCLUDE    15     215  .../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    21    13851 BATINCLUDE    15     219  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    22    13901 BATINCLUDE    15     220  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    23    13950 BATINCLUDE    15     221  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    24    13999 BATINCLUDE    15     222  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    25    14049 BATINCLUDE    15     223  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    26    14099 BATINCLUDE    15     224  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    27    14149 BATINCLUDE    15     225  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    28    14199 BATINCLUDE    15     226  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    29    14247 BATINCLUDE    15     228  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    30    14297 BATINCLUDE    15     229  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    31    14347 BATINCLUDE    15     230  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    32    14398 BATINCLUDE    15     232  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    33    14448 BATINCLUDE    15     233  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    34    14498 BATINCLUDE    15     234  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    35    14545 BATINCLUDE    15     235  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    36    14595 BATINCLUDE    15     236  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    37    14645 BATINCLUDE    15     237  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    38    14695 BATINCLUDE    15     238  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    39    14744 BATINCLUDE    15     239  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    40    14792 BATINCLUDE    15     240  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    41    14842 BATINCLUDE    15     241  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    42    14893 BATINCLUDE    15     243  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    43    14943 BATINCLUDE    15     244  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    44    14994 BATINCLUDE    15     246  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    45    15044 BATINCLUDE    15     247  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    46    15094 BATINCLUDE    15     248  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    47    15145 BATINCLUDE    15     250  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    48    15193 BATINCLUDE    15     251  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    49    15242 BATINCLUDE    15     253  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    50    15292 BATINCLUDE    15     254  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    51    15342 BATINCLUDE    15     255  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 105
"Flexible Unit Commitment Model"
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

    52    15392 BATINCLUDE    15     256  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    53    15443 BATINCLUDE    15     258  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    54    15491 BATINCLUDE    15     259  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    55    15539 BATINCLUDE    15     260  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    56    15589 BATINCLUDE    15     261  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    57    15640 BATINCLUDE    15     263  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    58    15690 BATINCLUDE    15     264  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    59    15740 BATINCLUDE    15     265  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    60    15788 BATINCLUDE    15     266  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    61    15839 BATINCLUDE    15     268  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    62    15889 BATINCLUDE    15     269  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    63    15939 BATINCLUDE    15     270  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    64    15989 BATINCLUDE    15     271  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    65    16037 BATINCLUDE    15     273  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    66    16085 BATINCLUDE    15     274  .../Users/bpalmint/repos/advpower/models/shared/writeFlagState.gms
    67    16166 BATINCLUDE    14      85  ../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    68    16386 BATINCLUDE    14     100  ../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    69    16619 BATINCLUDE    14     128  ../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    70    16827 BATINCLUDE    14     129  ../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    71    17035 BATINCLUDE    14     130  ../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    72    17243 BATINCLUDE    14     131  ../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    73    17453 BATINCLUDE    14     134  ../Users/bpalmint/repos/advpower/models/util/put2csv.gms
    74    17691 BATINCLUDE    14     315  ../Users/bpalmint/repos/advpower/models/util/put2csv.gms


COMPILATION TIME     =        0.063 SECONDS      4 MB  24.4.6 r52609 DEX-DEG
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 106
"Flexible Unit Commitment Model"
E x e c u t i o n


----  12444 Generator Data Table after AdvPwrDataRead...

----  12445 PARAMETER pGen  table of generator data

                                                            onlyS

wind                                   .c_fix_om           28.070
wind                                   .heatrate            1.000
wind                                   .fuel                 wind
wind                                   .cap_cur             0.400
wind                                   .gen_size            0.200
wind                                   .ramp_max            1.000
wind                                   .max_start            +INF
wind                                   .max_cap_fact        1.000
wind                                   .derate              1.000
wind                                   .type                 wind
wind                                   .extended_type        wind
wind                                   .cap_credit          0.105
wind                                   .c_cap            2438.000
wind                                   .life               20.000
wind                                   .cap_max             1.000
wind                                   .lead_time           4.500
Arthur_Von_Rosenberg_Combined          .c_var_om            3.110
Arthur_Von_Rosenberg_Combined          .c_fix_om            7.310
Arthur_Von_Rosenberg_Combined          .heatrate            7.499
Arthur_Von_Rosenberg_Combined          .fuel                   ng
Arthur_Von_Rosenberg_Combined          .cap_cur             0.550
Arthur_Von_Rosenberg_Combined          .gen_size            0.550
Arthur_Von_Rosenberg_Combined          .ramp_max            1.000
Arthur_Von_Rosenberg_Combined          .unit_min            0.165
Arthur_Von_Rosenberg_Combined          .c_start_fix         9.251
Arthur_Von_Rosenberg_Combined          .fuel_start          0.589
Arthur_Von_Rosenberg_Combined          .reg_up              0.008
Arthur_Von_Rosenberg_Combined          .reg_down            0.008
Arthur_Von_Rosenberg_Combined          .spin_rsv            0.170
Arthur_Von_Rosenberg_Combined          .max_start         365.000
Arthur_Von_Rosenberg_Combined          .max_cap_fact        0.890
Arthur_Von_Rosenberg_Combined          .derate              0.890
Arthur_Von_Rosenberg_Combined          .maint_wks           3.000
Arthur_Von_Rosenberg_Combined          .c_maint_wk          2.437
Arthur_Von_Rosenberg_Combined          .min_up              6.000
Arthur_Von_Rosenberg_Combined          .min_down           12.000
Arthur_Von_Rosenberg_Combined          .type                ng_cc
Arthur_Von_Rosenberg_Combined          .extended_type       ng_cc
Arthur_Von_Rosenberg_Combined          .cap_credit          1.000
Arthur_Von_Rosenberg_Combined          .c_cap            1003.000
Arthur_Von_Rosenberg_Combined          .life               30.000
Arthur_Von_Rosenberg_Combined          .cap_max             0.550
Arthur_Von_Rosenberg_Combined          .lead_time           4.500
Arthur_Von_Rosenberg_Combined          .unit_min_pu         0.300
Arthur_Von_Rosenberg_Combined          .efor                0.060
Arthur_Von_Rosenberg_Combined          .repair_hr          32.000
Bastrop_Combined                       .c_var_om            3.110
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 107
"Flexible Unit Commitment Model"
E x e c u t i o n


      12445 PARAMETER pGen  table of generator data

                                                            onlyS

Bastrop_Combined                       .c_fix_om            7.310
Bastrop_Combined                       .heatrate            7.845
Bastrop_Combined                       .fuel                   ng
Bastrop_Combined                       .cap_cur             0.728
Bastrop_Combined                       .gen_size            0.728
Bastrop_Combined                       .ramp_max            1.000
Bastrop_Combined                       .unit_min            0.218
Bastrop_Combined                       .c_start_fix         9.251
Bastrop_Combined                       .fuel_start          0.589
Bastrop_Combined                       .reg_up              0.008
Bastrop_Combined                       .reg_down            0.008
Bastrop_Combined                       .spin_rsv            0.170
Bastrop_Combined                       .max_start         365.000
Bastrop_Combined                       .max_cap_fact        0.890
Bastrop_Combined                       .derate              0.890
Bastrop_Combined                       .maint_wks           3.000
Bastrop_Combined                       .c_maint_wk          2.437
Bastrop_Combined                       .min_up              6.000
Bastrop_Combined                       .min_down           12.000
Bastrop_Combined                       .type                ng_cc
Bastrop_Combined                       .extended_type       ng_cc
Bastrop_Combined                       .cap_credit          1.000
Bastrop_Combined                       .c_cap            1003.000
Bastrop_Combined                       .life               30.000
Bastrop_Combined                       .cap_max             0.728
Bastrop_Combined                       .lead_time           4.500
Bastrop_Combined                       .unit_min_pu         0.300
Bastrop_Combined                       .efor                0.060
Bastrop_Combined                       .repair_hr          32.000
Bosque_County_Peaking_GT_1             .c_var_om            9.870
Bosque_County_Peaking_GT_1             .c_fix_om            3.350
Bosque_County_Peaking_GT_1             .heatrate            7.639
Bosque_County_Peaking_GT_1             .fuel                   ng
Bosque_County_Peaking_GT_1             .cap_cur             0.154
Bosque_County_Peaking_GT_1             .gen_size            0.154
Bosque_County_Peaking_GT_1             .ramp_max            6.000
Bosque_County_Peaking_GT_1             .unit_min            0.039
Bosque_County_Peaking_GT_1             .c_start_fix         7.811
Bosque_County_Peaking_GT_1             .fuel_start          0.188
Bosque_County_Peaking_GT_1             .reg_up              0.050
Bosque_County_Peaking_GT_1             .reg_down            0.050
Bosque_County_Peaking_GT_1             .spin_rsv            1.000
Bosque_County_Peaking_GT_1             .max_start            +INF
Bosque_County_Peaking_GT_1             .max_cap_fact        0.910
Bosque_County_Peaking_GT_1             .derate              0.910
Bosque_County_Peaking_GT_1             .maint_wks           2.000
Bosque_County_Peaking_GT_1             .c_maint_wk          1.675
Bosque_County_Peaking_GT_1             .type                ng_gt
Bosque_County_Peaking_GT_1             .extended_type       ng_gt
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 108
"Flexible Unit Commitment Model"
E x e c u t i o n


      12445 PARAMETER pGen  table of generator data

                                                            onlyS

Bosque_County_Peaking_GT_1             .cap_credit          0.950
Bosque_County_Peaking_GT_1             .c_cap             665.000
Bosque_County_Peaking_GT_1             .life               30.000
Bosque_County_Peaking_GT_1             .cap_max             0.154
Bosque_County_Peaking_GT_1             .lead_time           2.750
Bosque_County_Peaking_GT_1             .unit_min_pu         0.250
Bosque_County_Peaking_GT_1             .efor                0.050
Bosque_County_Peaking_GT_1             .repair_hr          88.000
Bosque_County_Peaking_GT_2             .c_var_om            9.870
Bosque_County_Peaking_GT_2             .c_fix_om            3.350
Bosque_County_Peaking_GT_2             .heatrate            7.639
Bosque_County_Peaking_GT_2             .fuel                   ng
Bosque_County_Peaking_GT_2             .cap_cur             0.154
Bosque_County_Peaking_GT_2             .gen_size            0.154
Bosque_County_Peaking_GT_2             .ramp_max            6.000
Bosque_County_Peaking_GT_2             .unit_min            0.039
Bosque_County_Peaking_GT_2             .c_start_fix         7.811
Bosque_County_Peaking_GT_2             .fuel_start          0.188
Bosque_County_Peaking_GT_2             .reg_up              0.050
Bosque_County_Peaking_GT_2             .reg_down            0.050
Bosque_County_Peaking_GT_2             .spin_rsv            1.000
Bosque_County_Peaking_GT_2             .max_start            +INF
Bosque_County_Peaking_GT_2             .max_cap_fact        0.910
Bosque_County_Peaking_GT_2             .derate              0.910
Bosque_County_Peaking_GT_2             .maint_wks           2.000
Bosque_County_Peaking_GT_2             .c_maint_wk          1.675
Bosque_County_Peaking_GT_2             .type                ng_gt
Bosque_County_Peaking_GT_2             .extended_type       ng_gt
Bosque_County_Peaking_GT_2             .cap_credit          0.950
Bosque_County_Peaking_GT_2             .c_cap             665.000
Bosque_County_Peaking_GT_2             .life               30.000
Bosque_County_Peaking_GT_2             .cap_max             0.154
Bosque_County_Peaking_GT_2             .lead_time           2.750
Bosque_County_Peaking_GT_2             .unit_min_pu         0.250
Bosque_County_Peaking_GT_2             .efor                0.050
Bosque_County_Peaking_GT_2             .repair_hr          88.000
Bosque_County_Peaking_Units3to5_Combo  .c_var_om            3.110
Bosque_County_Peaking_Units3to5_Combo  .c_fix_om            7.310
Bosque_County_Peaking_Units3to5_Combo  .heatrate            7.639
Bosque_County_Peaking_Units3to5_Combo  .fuel                   ng
Bosque_County_Peaking_Units3to5_Combo  .cap_cur             0.499
Bosque_County_Peaking_Units3to5_Combo  .gen_size            0.499
Bosque_County_Peaking_Units3to5_Combo  .ramp_max            1.000
Bosque_County_Peaking_Units3to5_Combo  .unit_min            0.150
Bosque_County_Peaking_Units3to5_Combo  .c_start_fix         9.251
Bosque_County_Peaking_Units3to5_Combo  .fuel_start          0.589
Bosque_County_Peaking_Units3to5_Combo  .reg_up              0.008
Bosque_County_Peaking_Units3to5_Combo  .reg_down            0.008
Bosque_County_Peaking_Units3to5_Combo  .spin_rsv            0.170
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 109
"Flexible Unit Commitment Model"
E x e c u t i o n


      12445 PARAMETER pGen  table of generator data

                                                            onlyS

Bosque_County_Peaking_Units3to5_Combo  .max_start         365.000
Bosque_County_Peaking_Units3to5_Combo  .max_cap_fact        0.890
Bosque_County_Peaking_Units3to5_Combo  .derate              0.890
Bosque_County_Peaking_Units3to5_Combo  .maint_wks           3.000
Bosque_County_Peaking_Units3to5_Combo  .c_maint_wk          2.437
Bosque_County_Peaking_Units3to5_Combo  .min_up              6.000
Bosque_County_Peaking_Units3to5_Combo  .min_down           12.000
Bosque_County_Peaking_Units3to5_Combo  .type                ng_cc
Bosque_County_Peaking_Units3to5_Combo  .extended_type       ng_cc
Bosque_County_Peaking_Units3to5_Combo  .cap_credit          1.000
Bosque_County_Peaking_Units3to5_Combo  .c_cap            1003.000
Bosque_County_Peaking_Units3to5_Combo  .life               30.000
Bosque_County_Peaking_Units3to5_Combo  .cap_max             0.499
Bosque_County_Peaking_Units3to5_Combo  .lead_time           4.500
Bosque_County_Peaking_Units3to5_Combo  .unit_min_pu         0.300
Bosque_County_Peaking_Units3to5_Combo  .efor                0.060
Bosque_County_Peaking_Units3to5_Combo  .repair_hr          32.000
Brazoz_Valley_Generating_Facility_Combo.c_var_om            3.110
Brazoz_Valley_Generating_Facility_Combo.c_fix_om            7.310
Brazoz_Valley_Generating_Facility_Combo.heatrate            7.462
Brazoz_Valley_Generating_Facility_Combo.fuel                   ng
Brazoz_Valley_Generating_Facility_Combo.cap_cur             0.676
Brazoz_Valley_Generating_Facility_Combo.gen_size            0.676
Brazoz_Valley_Generating_Facility_Combo.ramp_max            1.000
Brazoz_Valley_Generating_Facility_Combo.unit_min            0.203
Brazoz_Valley_Generating_Facility_Combo.c_start_fix         9.251
Brazoz_Valley_Generating_Facility_Combo.fuel_start          0.589
Brazoz_Valley_Generating_Facility_Combo.reg_up              0.008
Brazoz_Valley_Generating_Facility_Combo.reg_down            0.008
Brazoz_Valley_Generating_Facility_Combo.spin_rsv            0.170
Brazoz_Valley_Generating_Facility_Combo.max_start         365.000
Brazoz_Valley_Generating_Facility_Combo.max_cap_fact        0.890
Brazoz_Valley_Generating_Facility_Combo.derate              0.890
Brazoz_Valley_Generating_Facility_Combo.maint_wks           3.000
Brazoz_Valley_Generating_Facility_Combo.c_maint_wk          2.437
Brazoz_Valley_Generating_Facility_Combo.min_up              6.000
Brazoz_Valley_Generating_Facility_Combo.min_down           12.000
Brazoz_Valley_Generating_Facility_Combo.type                ng_cc
Brazoz_Valley_Generating_Facility_Combo.extended_type       ng_cc
Brazoz_Valley_Generating_Facility_Combo.cap_credit          1.000
Brazoz_Valley_Generating_Facility_Combo.c_cap            1003.000
Brazoz_Valley_Generating_Facility_Combo.life               30.000
Brazoz_Valley_Generating_Facility_Combo.cap_max             0.676
Brazoz_Valley_Generating_Facility_Combo.lead_time           4.500
Brazoz_Valley_Generating_Facility_Combo.unit_min_pu         0.300
Brazoz_Valley_Generating_Facility_Combo.efor                0.060
Brazoz_Valley_Generating_Facility_Combo.repair_hr          32.000
Coleto_Creek_1                         .c_var_om            4.250
Coleto_Creek_1                         .c_fix_om           14.835
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 110
"Flexible Unit Commitment Model"
E x e c u t i o n


      12445 PARAMETER pGen  table of generator data

                                                            onlyS

Coleto_Creek_1                         .heatrate           10.133
Coleto_Creek_1                         .fuel             coal_sub
Coleto_Creek_1                         .cap_cur             0.600
Coleto_Creek_1                         .gen_size            0.600
Coleto_Creek_1                         .ramp_max            0.300
Coleto_Creek_1                         .unit_min            0.300
Coleto_Creek_1                         .c_start_fix         3.581
Coleto_Creek_1                         .fuel_start          2.602
Coleto_Creek_1                         .reg_up              0.003
Coleto_Creek_1                         .reg_down            0.003
Coleto_Creek_1                         .spin_rsv            0.050
Coleto_Creek_1                         .max_start         104.000
Coleto_Creek_1                         .max_cap_fact        0.850
Coleto_Creek_1                         .derate              0.850
Coleto_Creek_1                         .maint_wks           5.000
Coleto_Creek_1                         .c_maint_wk          2.967
Coleto_Creek_1                         .min_up             24.000
Coleto_Creek_1                         .min_down           12.000
Coleto_Creek_1                         .type          coal_sub_st
Coleto_Creek_1                         .extended_type coal_sub_st
Coleto_Creek_1                         .cap_credit          0.930
Coleto_Creek_1                         .c_cap            2844.000
Coleto_Creek_1                         .life               30.000
Coleto_Creek_1                         .cap_max             0.600
Coleto_Creek_1                         .lead_time           7.000
Coleto_Creek_1                         .unit_min_pu         0.500
Coleto_Creek_1                         .efor                0.070
Coleto_Creek_1                         .repair_hr          40.000
Colorado_Bend_Energy_Center_Combined_1 .c_var_om            3.110
Colorado_Bend_Energy_Center_Combined_1 .c_fix_om            7.310
Colorado_Bend_Energy_Center_Combined_1 .heatrate            7.386
Colorado_Bend_Energy_Center_Combined_1 .fuel                   ng
Colorado_Bend_Energy_Center_Combined_1 .cap_cur             0.278
Colorado_Bend_Energy_Center_Combined_1 .gen_size            0.278
Colorado_Bend_Energy_Center_Combined_1 .ramp_max            1.000
Colorado_Bend_Energy_Center_Combined_1 .unit_min            0.083
Colorado_Bend_Energy_Center_Combined_1 .c_start_fix         9.251
Colorado_Bend_Energy_Center_Combined_1 .fuel_start          0.589
Colorado_Bend_Energy_Center_Combined_1 .reg_up              0.008
Colorado_Bend_Energy_Center_Combined_1 .reg_down            0.008
Colorado_Bend_Energy_Center_Combined_1 .spin_rsv            0.170
Colorado_Bend_Energy_Center_Combined_1 .max_start         365.000
Colorado_Bend_Energy_Center_Combined_1 .max_cap_fact        0.890
Colorado_Bend_Energy_Center_Combined_1 .derate              0.890
Colorado_Bend_Energy_Center_Combined_1 .maint_wks           3.000
Colorado_Bend_Energy_Center_Combined_1 .c_maint_wk          2.437
Colorado_Bend_Energy_Center_Combined_1 .min_up              6.000
Colorado_Bend_Energy_Center_Combined_1 .min_down           12.000
Colorado_Bend_Energy_Center_Combined_1 .type                ng_cc
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 111
"Flexible Unit Commitment Model"
E x e c u t i o n


      12445 PARAMETER pGen  table of generator data

                                                            onlyS

Colorado_Bend_Energy_Center_Combined_1 .extended_type       ng_cc
Colorado_Bend_Energy_Center_Combined_1 .cap_credit          1.000
Colorado_Bend_Energy_Center_Combined_1 .c_cap            1003.000
Colorado_Bend_Energy_Center_Combined_1 .life               30.000
Colorado_Bend_Energy_Center_Combined_1 .cap_max             0.278
Colorado_Bend_Energy_Center_Combined_1 .lead_time           4.500
Colorado_Bend_Energy_Center_Combined_1 .unit_min_pu         0.300
Colorado_Bend_Energy_Center_Combined_1 .efor                0.060
Colorado_Bend_Energy_Center_Combined_1 .repair_hr          32.000
Colorado_Bend_Energy_Center_Combined_2 .c_var_om            3.110
Colorado_Bend_Energy_Center_Combined_2 .c_fix_om            7.310
Colorado_Bend_Energy_Center_Combined_2 .heatrate            7.386
Colorado_Bend_Energy_Center_Combined_2 .fuel                   ng
Colorado_Bend_Energy_Center_Combined_2 .cap_cur             0.278
Colorado_Bend_Energy_Center_Combined_2 .gen_size            0.278
Colorado_Bend_Energy_Center_Combined_2 .ramp_max            1.000
Colorado_Bend_Energy_Center_Combined_2 .unit_min            0.083
Colorado_Bend_Energy_Center_Combined_2 .c_start_fix         9.251
Colorado_Bend_Energy_Center_Combined_2 .fuel_start          0.589
Colorado_Bend_Energy_Center_Combined_2 .reg_up              0.008
Colorado_Bend_Energy_Center_Combined_2 .reg_down            0.008
Colorado_Bend_Energy_Center_Combined_2 .spin_rsv            0.170
Colorado_Bend_Energy_Center_Combined_2 .max_start         365.000
Colorado_Bend_Energy_Center_Combined_2 .max_cap_fact        0.890
Colorado_Bend_Energy_Center_Combined_2 .derate              0.890
Colorado_Bend_Energy_Center_Combined_2 .maint_wks           3.000
Colorado_Bend_Energy_Center_Combined_2 .c_maint_wk          2.437
Colorado_Bend_Energy_Center_Combined_2 .min_up              6.000
Colorado_Bend_Energy_Center_Combined_2 .min_down           12.000
Colorado_Bend_Energy_Center_Combined_2 .type                ng_cc
Colorado_Bend_Energy_Center_Combined_2 .extended_type       ng_cc
Colorado_Bend_Energy_Center_Combined_2 .cap_credit          1.000
Colorado_Bend_Energy_Center_Combined_2 .c_cap            1003.000
Colorado_Bend_Energy_Center_Combined_2 .life               30.000
Colorado_Bend_Energy_Center_Combined_2 .cap_max             0.278
Colorado_Bend_Energy_Center_Combined_2 .lead_time           4.500
Colorado_Bend_Energy_Center_Combined_2 .unit_min_pu         0.300
Colorado_Bend_Energy_Center_Combined_2 .efor                0.060
Colorado_Bend_Energy_Center_Combined_2 .repair_hr          32.000
DeCordova_Steam_Electric_Station_CT4   .c_var_om            9.870
DeCordova_Steam_Electric_Station_CT4   .c_fix_om            3.350
DeCordova_Steam_Electric_Station_CT4   .heatrate           12.147
DeCordova_Steam_Electric_Station_CT4   .fuel                   ng
DeCordova_Steam_Electric_Station_CT4   .cap_cur             0.089
DeCordova_Steam_Electric_Station_CT4   .gen_size            0.089
DeCordova_Steam_Electric_Station_CT4   .ramp_max            6.000
DeCordova_Steam_Electric_Station_CT4   .unit_min            0.022
DeCordova_Steam_Electric_Station_CT4   .c_start_fix         7.811
DeCordova_Steam_Electric_Station_CT4   .fuel_start          0.188
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 112
"Flexible Unit Commitment Model"
E x e c u t i o n


      12445 PARAMETER pGen  table of generator data

                                                            onlyS

DeCordova_Steam_Electric_Station_CT4   .reg_up              0.050
DeCordova_Steam_Electric_Station_CT4   .reg_down            0.050
DeCordova_Steam_Electric_Station_CT4   .spin_rsv            1.000
DeCordova_Steam_Electric_Station_CT4   .max_start            +INF
DeCordova_Steam_Electric_Station_CT4   .max_cap_fact        0.910
DeCordova_Steam_Electric_Station_CT4   .derate              0.910
DeCordova_Steam_Electric_Station_CT4   .maint_wks           2.000
DeCordova_Steam_Electric_Station_CT4   .c_maint_wk          1.675
DeCordova_Steam_Electric_Station_CT4   .type                ng_gt
DeCordova_Steam_Electric_Station_CT4   .extended_type       ng_gt
DeCordova_Steam_Electric_Station_CT4   .cap_credit          0.950
DeCordova_Steam_Electric_Station_CT4   .c_cap             665.000
DeCordova_Steam_Electric_Station_CT4   .life               30.000
DeCordova_Steam_Electric_Station_CT4   .cap_max             0.089
DeCordova_Steam_Electric_Station_CT4   .lead_time           2.750
DeCordova_Steam_Electric_Station_CT4   .unit_min_pu         0.250
DeCordova_Steam_Electric_Station_CT4   .efor                0.050
DeCordova_Steam_Electric_Station_CT4   .repair_hr          88.000
Ennis_Power_Company_Combined           .c_var_om            3.110
Ennis_Power_Company_Combined           .c_fix_om            7.310
Ennis_Power_Company_Combined           .heatrate            7.361
Ennis_Power_Company_Combined           .fuel                   ng
Ennis_Power_Company_Combined           .cap_cur             0.418
Ennis_Power_Company_Combined           .gen_size            0.418
Ennis_Power_Company_Combined           .ramp_max            1.000
Ennis_Power_Company_Combined           .unit_min            0.125
Ennis_Power_Company_Combined           .c_start_fix         9.251
Ennis_Power_Company_Combined           .fuel_start          0.589
Ennis_Power_Company_Combined           .reg_up              0.008
Ennis_Power_Company_Combined           .reg_down            0.008
Ennis_Power_Company_Combined           .spin_rsv            0.170
Ennis_Power_Company_Combined           .max_start         365.000
Ennis_Power_Company_Combined           .max_cap_fact        0.890
Ennis_Power_Company_Combined           .derate              0.890
Ennis_Power_Company_Combined           .maint_wks           3.000
Ennis_Power_Company_Combined           .c_maint_wk          2.437
Ennis_Power_Company_Combined           .min_up              6.000
Ennis_Power_Company_Combined           .min_down           12.000
Ennis_Power_Company_Combined           .type                ng_cc
Ennis_Power_Company_Combined           .extended_type       ng_cc
Ennis_Power_Company_Combined           .cap_credit          1.000
Ennis_Power_Company_Combined           .c_cap            1003.000
Ennis_Power_Company_Combined           .life               30.000
Ennis_Power_Company_Combined           .cap_max             0.418
Ennis_Power_Company_Combined           .lead_time           4.500
Ennis_Power_Company_Combined           .unit_min_pu         0.300
Ennis_Power_Company_Combined           .efor                0.060
Ennis_Power_Company_Combined           .repair_hr          32.000
Fayette_Power_Project_1                .c_var_om            4.250
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 113
"Flexible Unit Commitment Model"
E x e c u t i o n


      12445 PARAMETER pGen  table of generator data

                                                            onlyS

Fayette_Power_Project_1                .c_fix_om           14.835
Fayette_Power_Project_1                .heatrate           10.679
Fayette_Power_Project_1                .fuel             coal_sub
Fayette_Power_Project_1                .cap_cur             0.615
Fayette_Power_Project_1                .gen_size            0.615
Fayette_Power_Project_1                .ramp_max            0.300
Fayette_Power_Project_1                .unit_min            0.308
Fayette_Power_Project_1                .c_start_fix         3.581
Fayette_Power_Project_1                .fuel_start          2.602
Fayette_Power_Project_1                .reg_up              0.003
Fayette_Power_Project_1                .reg_down            0.003
Fayette_Power_Project_1                .spin_rsv            0.050
Fayette_Power_Project_1                .max_start         104.000
Fayette_Power_Project_1                .max_cap_fact        0.850
Fayette_Power_Project_1                .derate              0.850
Fayette_Power_Project_1                .maint_wks           5.000
Fayette_Power_Project_1                .c_maint_wk          2.967
Fayette_Power_Project_1                .min_up             24.000
Fayette_Power_Project_1                .min_down           12.000
Fayette_Power_Project_1                .type          coal_sub_st
Fayette_Power_Project_1                .extended_type coal_sub_st
Fayette_Power_Project_1                .cap_credit          0.930
Fayette_Power_Project_1                .c_cap            2844.000
Fayette_Power_Project_1                .life               30.000
Fayette_Power_Project_1                .cap_max             0.615
Fayette_Power_Project_1                .lead_time           7.000
Fayette_Power_Project_1                .unit_min_pu         0.500
Fayette_Power_Project_1                .efor                0.070
Fayette_Power_Project_1                .repair_hr          40.000
Fayette_Power_Project_2                .c_var_om            4.250
Fayette_Power_Project_2                .c_fix_om           14.835
Fayette_Power_Project_2                .heatrate           10.679
Fayette_Power_Project_2                .fuel             coal_sub
Fayette_Power_Project_2                .cap_cur             0.615
Fayette_Power_Project_2                .gen_size            0.615
Fayette_Power_Project_2                .ramp_max            0.300
Fayette_Power_Project_2                .unit_min            0.308
Fayette_Power_Project_2                .c_start_fix         3.581
Fayette_Power_Project_2                .fuel_start          2.602
Fayette_Power_Project_2                .reg_up              0.003
Fayette_Power_Project_2                .reg_down            0.003
Fayette_Power_Project_2                .spin_rsv            0.050
Fayette_Power_Project_2                .max_start         104.000
Fayette_Power_Project_2                .max_cap_fact        0.850
Fayette_Power_Project_2                .derate              0.850
Fayette_Power_Project_2                .maint_wks           5.000
Fayette_Power_Project_2                .c_maint_wk          2.967
Fayette_Power_Project_2                .min_up             24.000
Fayette_Power_Project_2                .min_down           12.000
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 114
"Flexible Unit Commitment Model"
E x e c u t i o n


      12445 PARAMETER pGen  table of generator data

                                                            onlyS

Fayette_Power_Project_2                .type          coal_sub_st
Fayette_Power_Project_2                .extended_type coal_sub_st
Fayette_Power_Project_2                .cap_credit          0.930
Fayette_Power_Project_2                .c_cap            2844.000
Fayette_Power_Project_2                .life               30.000
Fayette_Power_Project_2                .cap_max             0.615
Fayette_Power_Project_2                .lead_time           7.000
Fayette_Power_Project_2                .unit_min_pu         0.500
Fayette_Power_Project_2                .efor                0.070
Fayette_Power_Project_2                .repair_hr          40.000
Fayette_Power_Project_3                .c_var_om            4.250
Fayette_Power_Project_3                .c_fix_om           14.835
Fayette_Power_Project_3                .heatrate           10.679
Fayette_Power_Project_3                .fuel             coal_sub
Fayette_Power_Project_3                .cap_cur             0.460
Fayette_Power_Project_3                .gen_size            0.460
Fayette_Power_Project_3                .ramp_max            0.300
Fayette_Power_Project_3                .unit_min            0.230
Fayette_Power_Project_3                .c_start_fix         3.581
Fayette_Power_Project_3                .fuel_start          2.602
Fayette_Power_Project_3                .reg_up              0.003
Fayette_Power_Project_3                .reg_down            0.003
Fayette_Power_Project_3                .spin_rsv            0.050
Fayette_Power_Project_3                .max_start         104.000
Fayette_Power_Project_3                .max_cap_fact        0.850
Fayette_Power_Project_3                .derate              0.850
Fayette_Power_Project_3                .maint_wks           5.000
Fayette_Power_Project_3                .c_maint_wk          2.967
Fayette_Power_Project_3                .min_up             24.000
Fayette_Power_Project_3                .min_down           12.000
Fayette_Power_Project_3                .type          coal_sub_st
Fayette_Power_Project_3                .extended_type coal_sub_st
Fayette_Power_Project_3                .cap_credit          0.930
Fayette_Power_Project_3                .c_cap            2844.000
Fayette_Power_Project_3                .life               30.000
Fayette_Power_Project_3                .cap_max             0.460
Fayette_Power_Project_3                .lead_time           7.000
Fayette_Power_Project_3                .unit_min_pu         0.500
Fayette_Power_Project_3                .efor                0.070
Fayette_Power_Project_3                .repair_hr          40.000
Permian_Basin_CT2                      .c_var_om            9.870
Permian_Basin_CT2                      .c_fix_om            3.350
Permian_Basin_CT2                      .heatrate           13.750
Permian_Basin_CT2                      .fuel                   ng
Permian_Basin_CT2                      .cap_cur             0.089
Permian_Basin_CT2                      .gen_size            0.089
Permian_Basin_CT2                      .ramp_max            6.000
Permian_Basin_CT2                      .unit_min            0.022
Permian_Basin_CT2                      .c_start_fix         7.811
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 115
"Flexible Unit Commitment Model"
E x e c u t i o n


      12445 PARAMETER pGen  table of generator data

                                                            onlyS

Permian_Basin_CT2                      .fuel_start          0.188
Permian_Basin_CT2                      .reg_up              0.050
Permian_Basin_CT2                      .reg_down            0.050
Permian_Basin_CT2                      .spin_rsv            1.000
Permian_Basin_CT2                      .max_start            +INF
Permian_Basin_CT2                      .max_cap_fact        0.910
Permian_Basin_CT2                      .derate              0.910
Permian_Basin_CT2                      .maint_wks           2.000
Permian_Basin_CT2                      .c_maint_wk          1.675
Permian_Basin_CT2                      .type                ng_gt
Permian_Basin_CT2                      .extended_type       ng_gt
Permian_Basin_CT2                      .cap_credit          0.950
Permian_Basin_CT2                      .c_cap             665.000
Permian_Basin_CT2                      .life               30.000
Permian_Basin_CT2                      .cap_max             0.089
Permian_Basin_CT2                      .lead_time           2.750
Permian_Basin_CT2                      .unit_min_pu         0.250
Permian_Basin_CT2                      .efor                0.050
Permian_Basin_CT2                      .repair_hr          88.000
Permian_Basin_CT3                      .c_var_om            9.870
Permian_Basin_CT3                      .c_fix_om            3.350
Permian_Basin_CT3                      .heatrate           13.750
Permian_Basin_CT3                      .fuel                   ng
Permian_Basin_CT3                      .cap_cur             0.089
Permian_Basin_CT3                      .gen_size            0.089
Permian_Basin_CT3                      .ramp_max            6.000
Permian_Basin_CT3                      .unit_min            0.022
Permian_Basin_CT3                      .c_start_fix         7.811
Permian_Basin_CT3                      .fuel_start          0.188
Permian_Basin_CT3                      .reg_up              0.050
Permian_Basin_CT3                      .reg_down            0.050
Permian_Basin_CT3                      .spin_rsv            1.000
Permian_Basin_CT3                      .max_start            +INF
Permian_Basin_CT3                      .max_cap_fact        0.910
Permian_Basin_CT3                      .derate              0.910
Permian_Basin_CT3                      .maint_wks           2.000
Permian_Basin_CT3                      .c_maint_wk          1.675
Permian_Basin_CT3                      .type                ng_gt
Permian_Basin_CT3                      .extended_type       ng_gt
Permian_Basin_CT3                      .cap_credit          0.950
Permian_Basin_CT3                      .c_cap             665.000
Permian_Basin_CT3                      .life               30.000
Permian_Basin_CT3                      .cap_max             0.089
Permian_Basin_CT3                      .lead_time           2.750
Permian_Basin_CT3                      .unit_min_pu         0.250
Permian_Basin_CT3                      .efor                0.050
Permian_Basin_CT3                      .repair_hr          88.000
R_W_Miller_4                           .c_var_om            9.870
R_W_Miller_4                           .c_fix_om            3.350
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 116
"Flexible Unit Commitment Model"
E x e c u t i o n


      12445 PARAMETER pGen  table of generator data

                                                            onlyS

R_W_Miller_4                           .heatrate           12.666
R_W_Miller_4                           .fuel                   ng
R_W_Miller_4                           .cap_cur             0.119
R_W_Miller_4                           .gen_size            0.119
R_W_Miller_4                           .ramp_max            6.000
R_W_Miller_4                           .unit_min            0.030
R_W_Miller_4                           .c_start_fix         7.811
R_W_Miller_4                           .fuel_start          0.188
R_W_Miller_4                           .reg_up              0.050
R_W_Miller_4                           .reg_down            0.050
R_W_Miller_4                           .spin_rsv            1.000
R_W_Miller_4                           .max_start            +INF
R_W_Miller_4                           .max_cap_fact        0.910
R_W_Miller_4                           .derate              0.910
R_W_Miller_4                           .maint_wks           2.000
R_W_Miller_4                           .c_maint_wk          1.675
R_W_Miller_4                           .type                ng_gt
R_W_Miller_4                           .extended_type       ng_gt
R_W_Miller_4                           .cap_credit          0.950
R_W_Miller_4                           .c_cap             665.000
R_W_Miller_4                           .life               30.000
R_W_Miller_4                           .cap_max             0.119
R_W_Miller_4                           .lead_time           2.750
R_W_Miller_4                           .unit_min_pu         0.250
R_W_Miller_4                           .efor                0.050
R_W_Miller_4                           .repair_hr          88.000
R_W_Miller_5                           .c_var_om            9.870
R_W_Miller_5                           .c_fix_om            3.350
R_W_Miller_5                           .heatrate           12.666
R_W_Miller_5                           .fuel                   ng
R_W_Miller_5                           .cap_cur             0.119
R_W_Miller_5                           .gen_size            0.119
R_W_Miller_5                           .ramp_max            6.000
R_W_Miller_5                           .unit_min            0.030
R_W_Miller_5                           .c_start_fix         7.811
R_W_Miller_5                           .fuel_start          0.188
R_W_Miller_5                           .reg_up              0.050
R_W_Miller_5                           .reg_down            0.050
R_W_Miller_5                           .spin_rsv            1.000
R_W_Miller_5                           .max_start            +INF
R_W_Miller_5                           .max_cap_fact        0.910
R_W_Miller_5                           .derate              0.910
R_W_Miller_5                           .maint_wks           2.000
R_W_Miller_5                           .c_maint_wk          1.675
R_W_Miller_5                           .type                ng_gt
R_W_Miller_5                           .extended_type       ng_gt
R_W_Miller_5                           .cap_credit          0.950
R_W_Miller_5                           .c_cap             665.000
R_W_Miller_5                           .life               30.000
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 117
"Flexible Unit Commitment Model"
E x e c u t i o n


      12445 PARAMETER pGen  table of generator data

                                                            onlyS

R_W_Miller_5                           .cap_max             0.119
R_W_Miller_5                           .lead_time           2.750
R_W_Miller_5                           .unit_min_pu         0.250
R_W_Miller_5                           .efor                0.050
R_W_Miller_5                           .repair_hr          88.000
San_Jacinto_Steam_Electric_Station_1   .c_var_om            9.870
San_Jacinto_Steam_Electric_Station_1   .c_fix_om            3.350
San_Jacinto_Steam_Electric_Station_1   .heatrate           13.516
San_Jacinto_Steam_Electric_Station_1   .fuel                   ng
San_Jacinto_Steam_Electric_Station_1   .cap_cur             0.088
San_Jacinto_Steam_Electric_Station_1   .gen_size            0.088
San_Jacinto_Steam_Electric_Station_1   .ramp_max            6.000
San_Jacinto_Steam_Electric_Station_1   .unit_min            0.022
San_Jacinto_Steam_Electric_Station_1   .c_start_fix         7.811
San_Jacinto_Steam_Electric_Station_1   .fuel_start          0.188
San_Jacinto_Steam_Electric_Station_1   .reg_up              0.050
San_Jacinto_Steam_Electric_Station_1   .reg_down            0.050
San_Jacinto_Steam_Electric_Station_1   .spin_rsv            1.000
San_Jacinto_Steam_Electric_Station_1   .max_start            +INF
San_Jacinto_Steam_Electric_Station_1   .max_cap_fact        0.910
San_Jacinto_Steam_Electric_Station_1   .derate              0.910
San_Jacinto_Steam_Electric_Station_1   .maint_wks           2.000
San_Jacinto_Steam_Electric_Station_1   .c_maint_wk          1.675
San_Jacinto_Steam_Electric_Station_1   .type                ng_gt
San_Jacinto_Steam_Electric_Station_1   .extended_type       ng_gt
San_Jacinto_Steam_Electric_Station_1   .cap_credit          0.950
San_Jacinto_Steam_Electric_Station_1   .c_cap             665.000
San_Jacinto_Steam_Electric_Station_1   .life               30.000
San_Jacinto_Steam_Electric_Station_1   .cap_max             0.088
San_Jacinto_Steam_Electric_Station_1   .lead_time           2.750
San_Jacinto_Steam_Electric_Station_1   .unit_min_pu         0.250
San_Jacinto_Steam_Electric_Station_1   .efor                0.050
San_Jacinto_Steam_Electric_Station_1   .repair_hr          88.000
San_Jacinto_Steam_Electric_Station_2   .c_var_om            9.870
San_Jacinto_Steam_Electric_Station_2   .c_fix_om            3.350
San_Jacinto_Steam_Electric_Station_2   .heatrate           13.516
San_Jacinto_Steam_Electric_Station_2   .fuel                   ng
San_Jacinto_Steam_Electric_Station_2   .cap_cur             0.088
San_Jacinto_Steam_Electric_Station_2   .gen_size            0.088
San_Jacinto_Steam_Electric_Station_2   .ramp_max            6.000
San_Jacinto_Steam_Electric_Station_2   .unit_min            0.022
San_Jacinto_Steam_Electric_Station_2   .c_start_fix         7.811
San_Jacinto_Steam_Electric_Station_2   .fuel_start          0.188
San_Jacinto_Steam_Electric_Station_2   .reg_up              0.050
San_Jacinto_Steam_Electric_Station_2   .reg_down            0.050
San_Jacinto_Steam_Electric_Station_2   .spin_rsv            1.000
San_Jacinto_Steam_Electric_Station_2   .max_start            +INF
San_Jacinto_Steam_Electric_Station_2   .max_cap_fact        0.910
San_Jacinto_Steam_Electric_Station_2   .derate              0.910
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 118
"Flexible Unit Commitment Model"
E x e c u t i o n


      12445 PARAMETER pGen  table of generator data

                                                            onlyS

San_Jacinto_Steam_Electric_Station_2   .maint_wks           2.000
San_Jacinto_Steam_Electric_Station_2   .c_maint_wk          1.675
San_Jacinto_Steam_Electric_Station_2   .type                ng_gt
San_Jacinto_Steam_Electric_Station_2   .extended_type       ng_gt
San_Jacinto_Steam_Electric_Station_2   .cap_credit          0.950
San_Jacinto_Steam_Electric_Station_2   .c_cap             665.000
San_Jacinto_Steam_Electric_Station_2   .life               30.000
San_Jacinto_Steam_Electric_Station_2   .cap_max             0.088
San_Jacinto_Steam_Electric_Station_2   .lead_time           2.750
San_Jacinto_Steam_Electric_Station_2   .unit_min_pu         0.250
San_Jacinto_Steam_Electric_Station_2   .efor                0.050
San_Jacinto_Steam_Electric_Station_2   .repair_hr          88.000
new_coal_st                            .c_var_om            4.250
new_coal_st                            .c_fix_om           14.835
new_coal_st                            .heatrate            8.800
new_coal_st                            .fuel             coal_sub
new_coal_st                            .gen_size            0.650
new_coal_st                            .ramp_max            0.300
new_coal_st                            .unit_min            0.325
new_coal_st                            .c_start_fix         3.581
new_coal_st                            .fuel_start          2.602
new_coal_st                            .reg_up              0.003
new_coal_st                            .reg_down            0.003
new_coal_st                            .spin_rsv            0.050
new_coal_st                            .max_start         104.000
new_coal_st                            .max_cap_fact        0.850
new_coal_st                            .derate              0.850
new_coal_st                            .maint_wks           5.000
new_coal_st                            .c_maint_wk          2.967
new_coal_st                            .min_up             24.000
new_coal_st                            .min_down           12.000
new_coal_st                            .type          coal_sub_st
new_coal_st                            .extended_type coal_sub_st
new_coal_st                            .cap_credit          0.930
new_coal_st                            .c_cap            2844.000
new_coal_st                            .life               30.000
new_coal_st                            .cap_max              +INF
new_coal_st                            .lead_time           7.000
new_coal_st                            .unit_min_pu         0.500
new_coal_st                            .efor                0.070
new_coal_st                            .repair_hr          40.000
new_ng_cc                              .c_var_om            3.110
new_ng_cc                              .c_fix_om            7.310
new_ng_cc                              .heatrate            6.430
new_ng_cc                              .fuel                   ng
new_ng_cc                              .gen_size            0.400
new_ng_cc                              .ramp_max            1.000
new_ng_cc                              .unit_min            0.120
new_ng_cc                              .c_start_fix         9.251
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 119
"Flexible Unit Commitment Model"
E x e c u t i o n


      12445 PARAMETER pGen  table of generator data

                                                            onlyS

new_ng_cc                              .fuel_start          0.589
new_ng_cc                              .reg_up              0.008
new_ng_cc                              .reg_down            0.008
new_ng_cc                              .spin_rsv            0.170
new_ng_cc                              .max_start         365.000
new_ng_cc                              .max_cap_fact        0.890
new_ng_cc                              .derate              0.890
new_ng_cc                              .maint_wks           3.000
new_ng_cc                              .c_maint_wk          2.437
new_ng_cc                              .min_up              6.000
new_ng_cc                              .min_down           12.000
new_ng_cc                              .type                ng_cc
new_ng_cc                              .extended_type       ng_cc
new_ng_cc                              .cap_credit          1.000
new_ng_cc                              .c_cap            1003.000
new_ng_cc                              .life               30.000
new_ng_cc                              .cap_max              +INF
new_ng_cc                              .lead_time           4.500
new_ng_cc                              .unit_min_pu         0.300
new_ng_cc                              .efor                0.060
new_ng_cc                              .repair_hr          32.000
new_ng_gt_aero                         .c_var_om            9.870
new_ng_gt_aero                         .c_fix_om            3.350
new_ng_gt_aero                         .heatrate            9.750
new_ng_gt_aero                         .fuel                   ng
new_ng_gt_aero                         .gen_size            0.210
new_ng_gt_aero                         .ramp_max            6.000
new_ng_gt_aero                         .unit_min            0.053
new_ng_gt_aero                         .c_start_fix         1.000
new_ng_gt_aero                         .quick_start         1.000
new_ng_gt_aero                         .reg_up              0.050
new_ng_gt_aero                         .reg_down            0.050
new_ng_gt_aero                         .spin_rsv            1.000
new_ng_gt_aero                         .max_start            +INF
new_ng_gt_aero                         .max_cap_fact        0.910
new_ng_gt_aero                         .derate              0.910
new_ng_gt_aero                         .maint_wks           2.000
new_ng_gt_aero                         .c_maint_wk          1.675
new_ng_gt_aero                         .type           ng_gt_aero
new_ng_gt_aero                         .extended_type  ng_gt_aero
new_ng_gt_aero                         .cap_credit          0.950
new_ng_gt_aero                         .c_cap             665.000
new_ng_gt_aero                         .life               30.000
new_ng_gt_aero                         .cap_max              +INF
new_ng_gt_aero                         .lead_time           2.750
new_ng_gt_aero                         .unit_min_pu         0.250
new_ng_gt_aero                         .efor                0.050
new_ng_gt_aero                         .repair_hr          88.000
new_nuke_st                            .c_var_om            2.040
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 120
"Flexible Unit Commitment Model"
E x e c u t i o n


      12445 PARAMETER pGen  table of generator data

                                                            onlyS

new_nuke_st                            .c_fix_om           44.375
new_nuke_st                            .heatrate           10.400
new_nuke_st                            .fuel                 u235
new_nuke_st                            .gen_size            1.118
new_nuke_st                            .ramp_max            0.100
new_nuke_st                            .unit_min            0.894
new_nuke_st                            .c_start_fix       100.000
new_nuke_st                            .max_start           1.000
new_nuke_st                            .max_cap_fact        0.900
new_nuke_st                            .derate              0.900
new_nuke_st                            .maint_wks           4.000
new_nuke_st                            .c_maint_wk         11.094
new_nuke_st                            .min_up             48.000
new_nuke_st                            .min_down           24.000
new_nuke_st                            .type              u235_st
new_nuke_st                            .extended_type     u235_st
new_nuke_st                            .cap_credit          0.960
new_nuke_st                            .c_cap            5335.000
new_nuke_st                            .life               30.000
new_nuke_st                            .cap_max              +INF
new_nuke_st                            .lead_time          10.000
new_nuke_st                            .unit_min_pu         0.800
new_nuke_st                            .efor                0.042
new_nuke_st                            .repair_hr         112.000

GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 121
"Flexible Unit Commitment Model"
Model Statistics    SOLVE UnitCommit Using MIP From line 12626


MODEL STATISTICS

BLOCKS OF EQUATIONS          47     SINGLE EQUATIONS      322,167
BLOCKS OF VARIABLES          31     SINGLE VARIABLES      265,026
NON ZERO ELEMENTS     1,332,645     DISCRETE VARIABLES     50,700


GENERATION TIME      =        1.499 SECONDS    140 MB  24.4.6 r52609 DEX-DEG


EXECUTION TIME       =        1.834 SECONDS    140 MB  24.4.6 r52609 DEX-DEG
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 122
"Flexible Unit Commitment Model"
Solution Report     SOLVE UnitCommit Using MIP From line 12626


               S O L V E      S U M M A R Y

     MODEL   UnitCommit          OBJECTIVE  vObjective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  12626

**** SOLVER STATUS     8 User Interrupt            
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE               NA

 RESOURCE USAGE, LIMIT        793.289     10800.000
 ITERATION COUNT, LIMIT         0    2000000000

IBM ILOG CPLEX   24.4.6 r52609 Released Jun 26, 2015 DEG x86 64bit/MacOS X    
--- GAMS/Cplex licensed for continuous and discrete problems.
Cplex 12.6.2.0

Reading parameter(s) from "/Users/bpalmint/repos/advpower/models/ops/cplex.opt"
>>  * Note: the number of threads can either be specified explicitly or using "0" for use all cores
>>  threads 1
>> 
>>  *Parallel mode. Options:
>>  * 1=deterministic & repeatable, 0=automatic, -1=opportunistic & non-repeatable 
>>  parallelmode 1
>> 
>>  * Conserve memory when possible... hopefully avoid crashes b/c of memory
>>  memoryemphasis 1
>> 
>>  * Declare solution method for pure LP, RMIP, and final MIP solve. 
>>  *   Options: 0=automatic, 2=Dual Simplex, 4=barrier, 6=concurrent (a race between
>>  * dual simplex and barrier in parallel)
>>  *
>>  * Sometimes barrier is notably faster for operations problems, but more often dual simplex wins
>>  * Barrier is often better for planning problems
>>  LPmethod 4
>>  * Solution method for solving the root MIP node. See description and options for LPmethod above
>>  startalg 4
>>  * Solution method for solving sub MIP nodes. See description and options for LPmethod above
>>  * subalg 4
>> 
>>  * Tighten LP tolerance (default 1e-6). For problems with objective values close to 1, this 
>>  * may be necessary to find the true optimal. In particular, with MILP, using the default can 
>>  * cause the final LP solve to stop short of finding the best node from the MILP branch-and-cut
>>  * Surprisingly, a tighter tolerance can also achieve FASTER run times for MILP, presumably
>>  * because the nodes can be compared more carefully.
>>  epopt 1e-9
>> 
>>  * Stay with barrier until the optimal solution is found rather than crossing over to simplex
>>  * This can run much faster for these problems, because the final simplex iterations can be 
>>  * slow and b/c the cross-over itself takes a good bit of time. However, the approach is not
>>  * robust and can fail or be slower than the default behavior. Not recommended with barrier 
>>  * alone (LPmethod = 4) b/c may not converge. Consider for concurrent optimization.
>>  *barcrossalg -1
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 123
"Flexible Unit Commitment Model"
Solution Report     SOLVE UnitCommit Using MIP From line 12626


>> 
>>  * Ignore small (dual) infeasibilities in the final LP solve. Without this setting, occasionally
>>  * CPLEX will get unhappy with an infeasibility on the order of 1e-6
>>  relaxfixedinfeas 1
>> 
>>  *enable relative epsilon optimal (cheat) parameter
>>  *This value is not used if cheat is defined
>>  relobjdif 0
>> 
Finished reading from "/Users/bpalmint/repos/advpower/models/ops/cplex.opt"
The following cheat parameter (objective difference) will be used:
    cheat: 0
rel cheat: 0
Space for names approximately 34.88 Mb
Use option 'names no' to turn use of names off
MIP status(114): aborted, no integer solution
Cplex Time: 792.67sec (det. 721694.29 ticks)
Problem aborted, no integer solution found.

No solution returned
GAMS 24.4.6  r52609 Released Jun 26, 2015 DEX-DEG x86 64bit/MacOS X                                                                                                                                                                  08/02/15 03:47:16 Page 124
"Flexible Unit Commitment Model"
E x e c u t i o n


**** Exec Error at line 12684: division by zero (0)
**** Exec Error at line 12925: division by zero (0)

**** REPORT FILE SUMMARY

fListOut /Users/bpalmint/repos/advpower/models/ops/out/UC_summary.csv
UC_power /Users/bpalmint/repos/advpower/models/ops/out/UC_power.csv
UC_uc /Users/bpalmint/repos/advpower/models/ops/out/UC_uc.csv
UC_spin /Users/bpalmint/repos/advpower/models/ops/out/UC_spin.csv
UC_net_lf_down /Users/bpalmint/repos/advpower/models/ops/out/UC_net_lf_down.csv
UC_reg_up /Users/bpalmint/repos/advpower/models/ops/out/UC_reg_up.csv
UC_reg_down /Users/bpalmint/repos/advpower/models/ops/out/UC_reg_down.csv
UC_quick_st /Users/bpalmint/repos/advpower/models/ops/out/UC_quick_st.csv
UC_maint /Users/bpalmint/repos/advpower/models/ops/out/UC_maint.csv


EXECUTION TIME       =        0.217 SECONDS     65 MB  24.4.6 r52609 DEX-DEG


USER: Strategic Energy Analysis Center               G150520:1510CO-GEN
      National Renewable Energy Laboratory (NREL)                DC3485


**** FILE SUMMARY

Input      /Users/bpalmint/repos/advpower/models/ops/UnitCommit.gms
Output     /Users/bpalmint/repos/advpower/models/ops/UnitCommit.lst

**** USER ERROR(S) ENCOUNTERED
